/*
  Copyright (c) 2015, Alcatel-Lucent Inc
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of the copyright holder nor the names of its contributors
        may be used to endorse or promote products derived from this software without
        specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package net.nuagenetworks.vro.vspk.model;

import net.nuagenetworks.vro.vspk.model.fetchers.*;

import net.nuagenetworks.vro.model.fetchers.BaseFetcher;
import net.nuagenetworks.vro.model.BaseObjectExtensions;
import net.nuagenetworks.vro.model.BaseModelHelper;
import net.nuagenetworks.bambou.RestException;
import org.springframework.web.client.HttpClientErrorException;
import java.util.ArrayList;

public class ModelHelper extends BaseModelHelper {

    public static java.util.List<Session> getAllSessions() {
        return SessionManager.getInstance().getSessions();
    }

    public static Session getSessionById(String id) {
        return SessionManager.getInstance().getSessionById(id);
    }
    
    
    public static CertificateMetadata getCertificateMetadataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CertificateMetadata obj = null;
            obj = new CertificateMetadata();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CERTIFICATEMETADATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<CertificateMetadata> getCertificateMetadatasForFetcherId(String id) throws RestException {
        CertificateMetadatasFetcher fetcher = getCertificateMetadatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CERTIFICATEMETADATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CertificateMetadata>();
    }

    public static CertificateMetadatasFetcher getCertificateMetadatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CERTIFICATEMETADATAS_FETCHER, id);
        if (fetcher != null) {
            return (CertificateMetadatasFetcher) fetcher;
        }return null;
    }

    public static java.util.List<CertificateMetadata> getAllCertificateMetadatas() throws RestException {
        java.util.List<CertificateMetadata> allObjs = new ArrayList<CertificateMetadata>();

        return allObjs;
    }

    public static java.util.List<CertificateMetadatasFetcher> getAllCertificateMetadatasFetchers() throws RestException {
        java.util.List<CertificateMetadatasFetcher> allObjs = new ArrayList<CertificateMetadatasFetcher>();
        return allObjs;
    }
    public static DownloadProgress getDownloadProgressById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DownloadProgress obj = null;
            obj = new DownloadProgress();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOWNLOADPROGRESS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<DownloadProgress> getDownloadProgressForFetcherId(String id) throws RestException {
        DownloadProgressFetcher fetcher = getDownloadProgressFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOWNLOADPROGRESS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DownloadProgress>();
    }

    public static DownloadProgressFetcher getDownloadProgressFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOWNLOADPROGRESS_FETCHER, id);
        if (fetcher != null) {
            return (DownloadProgressFetcher) fetcher;
        }return null;
    }

    public static java.util.List<DownloadProgress> getAllDownloadProgress() throws RestException {
        java.util.List<DownloadProgress> allObjs = new ArrayList<DownloadProgress>();

        return allObjs;
    }

    public static java.util.List<DownloadProgressFetcher> getAllDownloadProgressFetchers() throws RestException {
        java.util.List<DownloadProgressFetcher> allObjs = new ArrayList<DownloadProgressFetcher>();
        return allObjs;
    }
    public static TCPConnectTestResult getTCPConnectTestResultById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TCPConnectTestResult obj = null;
            obj = new TCPConnectTestResult();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TCPCONNECTTESTRESULT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<TCPConnectTestResult> getTCPConnectTestResultsForFetcherId(String id) throws RestException {
        TCPConnectTestResultsFetcher fetcher = getTCPConnectTestResultsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TCPCONNECTTESTRESULT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TCPConnectTestResult>();
    }

    public static TCPConnectTestResultsFetcher getTCPConnectTestResultsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TCPCONNECTTESTRESULTS_FETCHER, id);
        if (fetcher != null) {
            return (TCPConnectTestResultsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<TCPConnectTestResult> getAllTCPConnectTestResults() throws RestException {
        java.util.List<TCPConnectTestResult> allObjs = new ArrayList<TCPConnectTestResult>();

        return allObjs;
    }

    public static java.util.List<TCPConnectTestResultsFetcher> getAllTCPConnectTestResultsFetchers() throws RestException {
        java.util.List<TCPConnectTestResultsFetcher> allObjs = new ArrayList<TCPConnectTestResultsFetcher>();
        return allObjs;
    }
    public static ThreatPreventionNodeInfo getThreatPreventionNodeInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ThreatPreventionNodeInfo obj = null;
            obj = new ThreatPreventionNodeInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.THREATPREVENTIONNODEINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ThreatPreventionNodeInfo> getThreatPreventionNodeInfosForFetcherId(String id) throws RestException {
        ThreatPreventionNodeInfosFetcher fetcher = getThreatPreventionNodeInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.THREATPREVENTIONNODEINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ThreatPreventionNodeInfo>();
    }

    public static ThreatPreventionNodeInfosFetcher getThreatPreventionNodeInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.THREATPREVENTIONNODEINFOS_FETCHER, id);
        if (fetcher != null) {
            return (ThreatPreventionNodeInfosFetcher) fetcher;
        }return null;
    }

    public static java.util.List<ThreatPreventionNodeInfo> getAllThreatPreventionNodeInfos() throws RestException {
        java.util.List<ThreatPreventionNodeInfo> allObjs = new ArrayList<ThreatPreventionNodeInfo>();

        return allObjs;
    }

    public static java.util.List<ThreatPreventionNodeInfosFetcher> getAllThreatPreventionNodeInfosFetchers() throws RestException {
        java.util.List<ThreatPreventionNodeInfosFetcher> allObjs = new ArrayList<ThreatPreventionNodeInfosFetcher>();
        return allObjs;
    }
    public static VPortInfo getVPortInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VPortInfo obj = null;
            obj = new VPortInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VPORTINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<VPortInfo> getVPortInfosForFetcherId(String id) throws RestException {
        VPortInfosFetcher fetcher = getVPortInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VPORTINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VPortInfo>();
    }

    public static VPortInfosFetcher getVPortInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VPORTINFOS_FETCHER, id);
        if (fetcher != null) {
            return (VPortInfosFetcher) fetcher;
        }return null;
    }

    public static java.util.List<VPortInfo> getAllVPortInfos() throws RestException {
        java.util.List<VPortInfo> allObjs = new ArrayList<VPortInfo>();

        return allObjs;
    }

    public static java.util.List<VPortInfosFetcher> getAllVPortInfosFetchers() throws RestException {
        java.util.List<VPortInfosFetcher> allObjs = new ArrayList<VPortInfosFetcher>();
        return allObjs;
    }
    public static ForwardingClass getForwardingClassById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ForwardingClass obj = null;
            obj = new ForwardingClass();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FORWARDINGCLASS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ForwardingClass> getForwardingClassForFetcherId(String id) throws RestException {
        ForwardingClassFetcher fetcher = getForwardingClassFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FORWARDINGCLASS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ForwardingClass>();
    }

    public static ForwardingClassFetcher getForwardingClassFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FORWARDINGCLASS_FETCHER, id);
        if (fetcher != null) {
            return (ForwardingClassFetcher) fetcher;
        }return null;
    }

    public static java.util.List<ForwardingClass> getAllForwardingClass() throws RestException {
        java.util.List<ForwardingClass> allObjs = new ArrayList<ForwardingClass>();

        return allObjs;
    }

    public static java.util.List<ForwardingClassFetcher> getAllForwardingClassFetchers() throws RestException {
        java.util.List<ForwardingClassFetcher> allObjs = new ArrayList<ForwardingClassFetcher>();
        return allObjs;
    }
    public static BandwidthTestResult getBandwidthTestResultById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BandwidthTestResult obj = null;
            obj = new BandwidthTestResult();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BANDWIDTHTESTRESULT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<BandwidthTestResult> getBandwidthTestResultsForFetcherId(String id) throws RestException {
        BandwidthTestResultsFetcher fetcher = getBandwidthTestResultsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BANDWIDTHTESTRESULT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BandwidthTestResult>();
    }

    public static BandwidthTestResultsFetcher getBandwidthTestResultsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BANDWIDTHTESTRESULTS_FETCHER, id);
        if (fetcher != null) {
            return (BandwidthTestResultsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<BandwidthTestResult> getAllBandwidthTestResults() throws RestException {
        java.util.List<BandwidthTestResult> allObjs = new ArrayList<BandwidthTestResult>();

        return allObjs;
    }

    public static java.util.List<BandwidthTestResultsFetcher> getAllBandwidthTestResultsFetchers() throws RestException {
        java.util.List<BandwidthTestResultsFetcher> allObjs = new ArrayList<BandwidthTestResultsFetcher>();
        return allObjs;
    }
    public static MTUDiscoveryTestResult getMTUDiscoveryTestResultById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MTUDiscoveryTestResult obj = null;
            obj = new MTUDiscoveryTestResult();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MTUDISCOVERYTESTRESULT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<MTUDiscoveryTestResult> getMTUDiscoveryTestResultsForFetcherId(String id) throws RestException {
        MTUDiscoveryTestResultsFetcher fetcher = getMTUDiscoveryTestResultsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MTUDISCOVERYTESTRESULT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MTUDiscoveryTestResult>();
    }

    public static MTUDiscoveryTestResultsFetcher getMTUDiscoveryTestResultsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MTUDISCOVERYTESTRESULTS_FETCHER, id);
        if (fetcher != null) {
            return (MTUDiscoveryTestResultsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<MTUDiscoveryTestResult> getAllMTUDiscoveryTestResults() throws RestException {
        java.util.List<MTUDiscoveryTestResult> allObjs = new ArrayList<MTUDiscoveryTestResult>();

        return allObjs;
    }

    public static java.util.List<MTUDiscoveryTestResultsFetcher> getAllMTUDiscoveryTestResultsFetchers() throws RestException {
        java.util.List<MTUDiscoveryTestResultsFetcher> allObjs = new ArrayList<MTUDiscoveryTestResultsFetcher>();
        return allObjs;
    }
    public static SysmonUplinkConnection getSysmonUplinkConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SysmonUplinkConnection obj = null;
            obj = new SysmonUplinkConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SYSMONUPLINKCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<SysmonUplinkConnection> getSysmonUplinkConnectionsForFetcherId(String id) throws RestException {
        SysmonUplinkConnectionsFetcher fetcher = getSysmonUplinkConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SYSMONUPLINKCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SysmonUplinkConnection>();
    }

    public static SysmonUplinkConnectionsFetcher getSysmonUplinkConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SYSMONUPLINKCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (SysmonUplinkConnectionsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<SysmonUplinkConnection> getAllSysmonUplinkConnections() throws RestException {
        java.util.List<SysmonUplinkConnection> allObjs = new ArrayList<SysmonUplinkConnection>();

        return allObjs;
    }

    public static java.util.List<SysmonUplinkConnectionsFetcher> getAllSysmonUplinkConnectionsFetchers() throws RestException {
        java.util.List<SysmonUplinkConnectionsFetcher> allObjs = new ArrayList<SysmonUplinkConnectionsFetcher>();
        return allObjs;
    }
    public static UDPProbeTestResult getUDPProbeTestResultById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            UDPProbeTestResult obj = null;
            obj = new UDPProbeTestResult();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.UDPPROBETESTRESULT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<UDPProbeTestResult> getUDPProbeTestResultsForFetcherId(String id) throws RestException {
        UDPProbeTestResultsFetcher fetcher = getUDPProbeTestResultsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.UDPPROBETESTRESULT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<UDPProbeTestResult>();
    }

    public static UDPProbeTestResultsFetcher getUDPProbeTestResultsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.UDPPROBETESTRESULTS_FETCHER, id);
        if (fetcher != null) {
            return (UDPProbeTestResultsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<UDPProbeTestResult> getAllUDPProbeTestResults() throws RestException {
        java.util.List<UDPProbeTestResult> allObjs = new ArrayList<UDPProbeTestResult>();

        return allObjs;
    }

    public static java.util.List<UDPProbeTestResultsFetcher> getAllUDPProbeTestResultsFetchers() throws RestException {
        java.util.List<UDPProbeTestResultsFetcher> allObjs = new ArrayList<UDPProbeTestResultsFetcher>();
        return allObjs;
    }
    public static AllocationPool getAllocationPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllocationPool obj = null;
            obj = new AllocationPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ALLOCATIONPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<AllocationPool> getAllocationPoolsForFetcherId(String id) throws RestException {
        AllocationPoolsFetcher fetcher = getAllocationPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ALLOCATIONPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AllocationPool>();
    }

    public static AllocationPoolsFetcher getAllocationPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ALLOCATIONPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (AllocationPoolsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<AllocationPool> getAllAllocationPools() throws RestException {
        java.util.List<AllocationPool> allObjs = new ArrayList<AllocationPool>();

        return allObjs;
    }

    public static java.util.List<AllocationPoolsFetcher> getAllAllocationPoolsFetchers() throws RestException {
        java.util.List<AllocationPoolsFetcher> allObjs = new ArrayList<AllocationPoolsFetcher>();
        return allObjs;
    }
    public static AddressMap getAddressMapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AddressMap obj = null;
            obj = new AddressMap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ADDRESSMAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAddressMapId(String id) throws RestException {
        AddressMap obj = getObject(Constants.ADDRESSMAP, id);
        if (obj == null) {
            obj = getAddressMapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAddressMapId(String id) throws RestException {
        AddressMap obj = getObject(Constants.ADDRESSMAP, id);
        if (obj == null) {
            obj = getAddressMapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAddressMapId(String id) throws RestException {
        AddressMap obj = getObject(Constants.ADDRESSMAP, id);
        if (obj == null) {
            obj = getAddressMapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForAddressMapId(String id) throws RestException {
        AddressMap obj = getObject(Constants.ADDRESSMAP, id);
        if (obj == null) {
            obj = getAddressMapById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForAddressMapId(String id) throws RestException {
        AddressMap obj = getObject(Constants.ADDRESSMAP, id);
        if (obj == null) {
            obj = getAddressMapById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AddressMap> getAddressMapsForFetcherId(String id) throws RestException {
        AddressMapsFetcher fetcher = getAddressMapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ADDRESSMAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AddressMap>();
    }

    public static AddressMapsFetcher getAddressMapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ADDRESSMAPS_FETCHER, id);
        if (fetcher != null) {
            return (AddressMapsFetcher) fetcher;
        }
        if ((fetcher = getAddressMapsFetcherForPATNATPoolId(id)) != null) {
            return (AddressMapsFetcher) addFetcher(Constants.ADDRESSMAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AddressMap> getAllAddressMaps() throws RestException {
        java.util.List<AddressMap> allObjs = new ArrayList<AddressMap>();

        return allObjs;
    }

    public static java.util.List<AddressMapsFetcher> getAllAddressMapsFetchers() throws RestException {
        java.util.List<AddressMapsFetcher> allObjs = new ArrayList<AddressMapsFetcher>();
        return allObjs;
    }
    public static AddressRange getAddressRangeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AddressRange obj = null;
            obj = new AddressRange();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ADDRESSRANGE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForAddressRangeId(String id) throws RestException {
        AddressRange obj = getObject(Constants.ADDRESSRANGE, id);
        if (obj == null) {
            obj = getAddressRangeById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAddressRangeId(String id) throws RestException {
        AddressRange obj = getObject(Constants.ADDRESSRANGE, id);
        if (obj == null) {
            obj = getAddressRangeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAddressRangeId(String id) throws RestException {
        AddressRange obj = getObject(Constants.ADDRESSRANGE, id);
        if (obj == null) {
            obj = getAddressRangeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAddressRangeId(String id) throws RestException {
        AddressRange obj = getObject(Constants.ADDRESSRANGE, id);
        if (obj == null) {
            obj = getAddressRangeById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AddressRange> getAddressRangesForFetcherId(String id) throws RestException {
        AddressRangesFetcher fetcher = getAddressRangesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ADDRESSRANGE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AddressRange>();
    }

    public static AddressRangesFetcher getAddressRangesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ADDRESSRANGES_FETCHER, id);
        if (fetcher != null) {
            return (AddressRangesFetcher) fetcher;
        }
        if ((fetcher = getAddressRangesFetcherForL2DomainId(id)) != null) {
            return (AddressRangesFetcher) addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getAddressRangesFetcherForL2DomainTemplateId(id)) != null) {
            return (AddressRangesFetcher) addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getAddressRangesFetcherForSharedNetworkResourceId(id)) != null) {
            return (AddressRangesFetcher) addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getAddressRangesFetcherForSubnetId(id)) != null) {
            return (AddressRangesFetcher) addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getAddressRangesFetcherForSubnetTemplateId(id)) != null) {
            return (AddressRangesFetcher) addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AddressRange> getAllAddressRanges() throws RestException {
        java.util.List<AddressRange> allObjs = new ArrayList<AddressRange>();

        return allObjs;
    }

    public static java.util.List<AddressRangesFetcher> getAllAddressRangesFetchers() throws RestException {
        java.util.List<AddressRangesFetcher> allObjs = new ArrayList<AddressRangesFetcher>();
        return allObjs;
    }
    public static AggregatedDomain getAggregatedDomainById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AggregatedDomain obj = null;
            obj = new AggregatedDomain();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AGGREGATEDDOMAIN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationsFetcher getApplicationsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementbindingsFetcher getApplicationperformancemanagementbindingsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementbindingsFetcher fetcher = obj.getApplicationperformancemanagementbindings();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BridgeInterfacesFetcher getBridgeInterfacesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            BridgeInterfacesFetcher fetcher = obj.getBridgeInterfaces();
            return addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainTemplatesFetcher getDomainTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            DomainTemplatesFetcher fetcher = obj.getDomainTemplates();
            return addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            EgressAdvFwdTemplatesFetcher fetcher = obj.getEgressAdvFwdTemplates();
            return addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainFIPAclTemplatesFetcher getDomainFIPAclTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            DomainFIPAclTemplatesFetcher fetcher = obj.getDomainFIPAclTemplates();
            return addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FirewallAclsFetcher getFirewallAclsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            FirewallAclsFetcher fetcher = obj.getFirewallAcls();
            return addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FloatingIpsFetcher getFloatingIpsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            FloatingIpsFetcher fetcher = obj.getFloatingIps();
            return addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ForwardingPathListsFetcher getForwardingPathListsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ForwardingPathListsFetcher fetcher = obj.getForwardingPathLists();
            return addFetcher(Constants.FORWARDINGPATHLISTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HostInterfacesFetcher getHostInterfacesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            HostInterfacesFetcher fetcher = obj.getHostInterfaces();
            return addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            IngressAdvFwdTemplatesFetcher fetcher = obj.getIngressAdvFwdTemplates();
            return addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LinksFetcher getLinksFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            LinksFetcher fetcher = obj.getLinks();
            return addFetcher(Constants.LINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceBindingsFetcher getNetworkPerformanceBindingsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            NetworkPerformanceBindingsFetcher fetcher = obj.getNetworkPerformanceBindings();
            return addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            NSGatewaySummariesFetcher fetcher = obj.getNSGatewaySummaries();
            return addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGRoutingPolicyBindingsFetcher getNSGRoutingPolicyBindingsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            NSGRoutingPolicyBindingsFetcher fetcher = obj.getNSGRoutingPolicyBindings();
            return addFetcher(Constants.NSGROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OSPFInstancesFetcher getOSPFInstancesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            OSPFInstancesFetcher fetcher = obj.getOSPFInstances();
            return addFetcher(Constants.OSPFINSTANCES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PGExpressionsFetcher getPGExpressionsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            PGExpressionsFetcher fetcher = obj.getPGExpressions();
            return addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            RoutingPoliciesFetcher fetcher = obj.getRoutingPolicies();
            return addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPolicyBindingsFetcher getRoutingPolicyBindingsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            RoutingPolicyBindingsFetcher fetcher = obj.getRoutingPolicyBindings();
            return addFetcher(Constants.ROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SPATSourcesPoolsFetcher getSPATSourcesPoolsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            SPATSourcesPoolsFetcher fetcher = obj.getSPATSourcesPools();
            return addFetcher(Constants.SPATSOURCESPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkRDsFetcher getUplinkRDsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            UplinkRDsFetcher fetcher = obj.getUplinkRDs();
            return addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VirtualFirewallRulesFetcher fetcher = obj.getVirtualFirewallRules();
            return addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFDomainMappingsFetcher getVNFDomainMappingsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VNFDomainMappingsFetcher fetcher = obj.getVNFDomainMappings();
            return addFetcher(Constants.VNFDOMAINMAPPINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPNConnectionsFetcher getVPNConnectionsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VPNConnectionsFetcher fetcher = obj.getVPNConnections();
            return addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZonesFetcher getZonesFetcherForAggregatedDomainId(String id) throws RestException {
        AggregatedDomain obj = getObject(Constants.AGGREGATEDDOMAIN, id);
        if (obj == null) {
            obj = getAggregatedDomainById(id);
        }

        if (obj != null) {
            ZonesFetcher fetcher = obj.getZones();
            return addFetcher(Constants.ZONES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AggregatedDomain> getAggregatedDomainsForFetcherId(String id) throws RestException {
        AggregatedDomainsFetcher fetcher = getAggregatedDomainsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AGGREGATEDDOMAIN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AggregatedDomain>();
    }

    public static AggregatedDomainsFetcher getAggregatedDomainsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AGGREGATEDDOMAINS_FETCHER, id);
        if (fetcher != null) {
            return (AggregatedDomainsFetcher) fetcher;
        }
        if ((fetcher = getAggregatedDomainsFetcherForDomainId(id)) != null) {
            return (AggregatedDomainsFetcher) addFetcher(Constants.AGGREGATEDDOMAINS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AggregatedDomain> getAllAggregatedDomains() throws RestException {
        java.util.List<AggregatedDomain> allObjs = new ArrayList<AggregatedDomain>();

        return allObjs;
    }

    public static java.util.List<AggregatedDomainsFetcher> getAllAggregatedDomainsFetchers() throws RestException {
        java.util.List<AggregatedDomainsFetcher> allObjs = new ArrayList<AggregatedDomainsFetcher>();
        return allObjs;
    }
    public static AggregateMetadata getAggregateMetadataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AggregateMetadata obj = null;
            obj = new AggregateMetadata();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AGGREGATEMETADATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<AggregateMetadata> getAggregateMetadatasForFetcherId(String id) throws RestException {
        AggregateMetadatasFetcher fetcher = getAggregateMetadatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AGGREGATEMETADATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AggregateMetadata>();
    }

    public static AggregateMetadatasFetcher getAggregateMetadatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AGGREGATEMETADATAS_FETCHER, id);
        if (fetcher != null) {
            return (AggregateMetadatasFetcher) fetcher;
        }
        if ((fetcher = getAggregateMetadatasFetcherForVPortId(id)) != null) {
            return (AggregateMetadatasFetcher) addFetcher(Constants.AGGREGATEMETADATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AggregateMetadata> getAllAggregateMetadatas() throws RestException {
        java.util.List<AggregateMetadata> allObjs = new ArrayList<AggregateMetadata>();

        return allObjs;
    }

    public static java.util.List<AggregateMetadatasFetcher> getAllAggregateMetadatasFetchers() throws RestException {
        java.util.List<AggregateMetadatasFetcher> allObjs = new ArrayList<AggregateMetadatasFetcher>();
        return allObjs;
    }
    public static Alarm getAlarmById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Alarm obj = null;
            obj = new Alarm();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ALARM, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAlarmId(String id) throws RestException {
        Alarm obj = getObject(Constants.ALARM, id);
        if (obj == null) {
            obj = getAlarmById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAlarmId(String id) throws RestException {
        Alarm obj = getObject(Constants.ALARM, id);
        if (obj == null) {
            obj = getAlarmById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAlarmId(String id) throws RestException {
        Alarm obj = getObject(Constants.ALARM, id);
        if (obj == null) {
            obj = getAlarmById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Alarm> getAlarmsForFetcherId(String id) throws RestException {
        AlarmsFetcher fetcher = getAlarmsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ALARM);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Alarm>();
    }

    public static AlarmsFetcher getAlarmsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ALARMS_FETCHER, id);
        if (fetcher != null) {
            return (AlarmsFetcher) fetcher;
        }
        if ((fetcher = getAlarmsFetcherForAggregatedDomainId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForAzureCloudId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForContainerId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForDomainId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForEnterpriseId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForEthernetSegmentGroupId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForGatewayId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForGatewayRedundantPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForHSCId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForIKEGatewayConnectionId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForL2DomainId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForNetconfGatewayId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForNetconfManagerId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForNSGatewayId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForNSPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForRedundancyGroupId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForWANServiceId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForShuntLinkId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForSSIDConnectionId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForTCAId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVLANId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVMId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVRSId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVSCId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVSDId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForVsgRedundantPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAlarmsFetcherForWirelessPortId(id)) != null) {
            return (AlarmsFetcher) addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Alarm> getAllAlarms() throws RestException {
        java.util.List<Alarm> allObjs = new ArrayList<Alarm>();

        return allObjs;
    }

    public static java.util.List<AlarmsFetcher> getAllAlarmsFetchers() throws RestException {
        java.util.List<AlarmsFetcher> allObjs = new ArrayList<AlarmsFetcher>();
        return allObjs;
    }
    public static AllAlarm getAllAlarmById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllAlarm obj = null;
            obj = new AllAlarm();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ALLALARM, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAllAlarmId(String id) throws RestException {
        AllAlarm obj = getObject(Constants.ALLALARM, id);
        if (obj == null) {
            obj = getAllAlarmById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAllAlarmId(String id) throws RestException {
        AllAlarm obj = getObject(Constants.ALLALARM, id);
        if (obj == null) {
            obj = getAllAlarmById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAllAlarmId(String id) throws RestException {
        AllAlarm obj = getObject(Constants.ALLALARM, id);
        if (obj == null) {
            obj = getAllAlarmById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AllAlarm> getAllAlarmsForFetcherId(String id) throws RestException {
        AllAlarmsFetcher fetcher = getAllAlarmsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ALLALARM);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AllAlarm>();
    }

    public static AllAlarmsFetcher getAllAlarmsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ALLALARMS_FETCHER, id);
        if (fetcher != null) {
            return (AllAlarmsFetcher) fetcher;
        }
        if ((fetcher = getAllAlarmsFetcherForEnterpriseId(id)) != null) {
            return (AllAlarmsFetcher) addFetcher(Constants.ALLALARMS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AllAlarm> getAllAllAlarms() throws RestException {
        java.util.List<AllAlarm> allObjs = new ArrayList<AllAlarm>();

        return allObjs;
    }

    public static java.util.List<AllAlarmsFetcher> getAllAllAlarmsFetchers() throws RestException {
        java.util.List<AllAlarmsFetcher> allObjs = new ArrayList<AllAlarmsFetcher>();
        return allObjs;
    }
    public static AllGateway getAllGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllGateway obj = null;
            obj = new AllGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ALLGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAllGatewayId(String id) throws RestException {
        AllGateway obj = getObject(Constants.ALLGATEWAY, id);
        if (obj == null) {
            obj = getAllGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAllGatewayId(String id) throws RestException {
        AllGateway obj = getObject(Constants.ALLGATEWAY, id);
        if (obj == null) {
            obj = getAllGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAllGatewayId(String id) throws RestException {
        AllGateway obj = getObject(Constants.ALLGATEWAY, id);
        if (obj == null) {
            obj = getAllGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AllGateway> getAllGatewaysForFetcherId(String id) throws RestException {
        AllGatewaysFetcher fetcher = getAllGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ALLGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AllGateway>();
    }

    public static AllGatewaysFetcher getAllGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ALLGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (AllGatewaysFetcher) fetcher;
        }
        if ((fetcher = getAllGatewaysFetcherForMeId(id)) != null) {
            return (AllGatewaysFetcher) addFetcher(Constants.ALLGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AllGateway> getAllAllGateways() throws RestException {
        java.util.List<AllGateway> allObjs = new ArrayList<AllGateway>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllGatewaysFetcher fetcher = getAllGatewaysFetcherForMeId(session.getId());
            java.util.List<AllGateway> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<AllGatewaysFetcher> getAllAllGatewaysFetchers() throws RestException {
        java.util.List<AllGatewaysFetcher> allObjs = new ArrayList<AllGatewaysFetcher>();
        return allObjs;
    }
    public static AllRedundancyGroup getAllRedundancyGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllRedundancyGroup obj = null;
            obj = new AllRedundancyGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ALLREDUNDANCYGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAllRedundancyGroupId(String id) throws RestException {
        AllRedundancyGroup obj = getObject(Constants.ALLREDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getAllRedundancyGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAllRedundancyGroupId(String id) throws RestException {
        AllRedundancyGroup obj = getObject(Constants.ALLREDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getAllRedundancyGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAllRedundancyGroupId(String id) throws RestException {
        AllRedundancyGroup obj = getObject(Constants.ALLREDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getAllRedundancyGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AllRedundancyGroup> getAllRedundancyGroupsForFetcherId(String id) throws RestException {
        AllRedundancyGroupsFetcher fetcher = getAllRedundancyGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ALLREDUNDANCYGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AllRedundancyGroup>();
    }

    public static AllRedundancyGroupsFetcher getAllRedundancyGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ALLREDUNDANCYGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (AllRedundancyGroupsFetcher) fetcher;
        }
        if ((fetcher = getAllRedundancyGroupsFetcherForMeId(id)) != null) {
            return (AllRedundancyGroupsFetcher) addFetcher(Constants.ALLREDUNDANCYGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AllRedundancyGroup> getAllAllRedundancyGroups() throws RestException {
        java.util.List<AllRedundancyGroup> allObjs = new ArrayList<AllRedundancyGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            AllRedundancyGroupsFetcher fetcher = getAllRedundancyGroupsFetcherForMeId(session.getId());
            java.util.List<AllRedundancyGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<AllRedundancyGroupsFetcher> getAllAllRedundancyGroupsFetchers() throws RestException {
        java.util.List<AllRedundancyGroupsFetcher> allObjs = new ArrayList<AllRedundancyGroupsFetcher>();
        return allObjs;
    }
    public static Application getApplicationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Application obj = null;
            obj = new Application();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.APPLICATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ApplicationBindingsFetcher getApplicationBindingsFetcherForApplicationId(String id) throws RestException {
        Application obj = getObject(Constants.APPLICATION, id);
        if (obj == null) {
            obj = getApplicationById(id);
        }

        if (obj != null) {
            ApplicationBindingsFetcher fetcher = obj.getApplicationBindings();
            return addFetcher(Constants.APPLICATIONBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForApplicationId(String id) throws RestException {
        Application obj = getObject(Constants.APPLICATION, id);
        if (obj == null) {
            obj = getApplicationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForApplicationId(String id) throws RestException {
        Application obj = getObject(Constants.APPLICATION, id);
        if (obj == null) {
            obj = getApplicationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MonitorscopesFetcher getMonitorscopesFetcherForApplicationId(String id) throws RestException {
        Application obj = getObject(Constants.APPLICATION, id);
        if (obj == null) {
            obj = getApplicationById(id);
        }

        if (obj != null) {
            MonitorscopesFetcher fetcher = obj.getMonitorscopes();
            return addFetcher(Constants.MONITORSCOPES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForApplicationId(String id) throws RestException {
        Application obj = getObject(Constants.APPLICATION, id);
        if (obj == null) {
            obj = getApplicationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Application> getApplicationsForFetcherId(String id) throws RestException {
        ApplicationsFetcher fetcher = getApplicationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.APPLICATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Application>();
    }

    public static ApplicationsFetcher getApplicationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.APPLICATIONS_FETCHER, id);
        if (fetcher != null) {
            return (ApplicationsFetcher) fetcher;
        }
        if ((fetcher = getApplicationsFetcherForAggregatedDomainId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationsFetcherForDomainId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationsFetcherForEnterpriseId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationsFetcherForL2DomainId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationsFetcherForL7applicationsignatureId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationsFetcherForMeId(id)) != null) {
            return (ApplicationsFetcher) addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Application> getAllApplications() throws RestException {
        java.util.List<Application> allObjs = new ArrayList<Application>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ApplicationsFetcher fetcher = getApplicationsFetcherForMeId(session.getId());
            java.util.List<Application> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ApplicationsFetcher> getAllApplicationsFetchers() throws RestException {
        java.util.List<ApplicationsFetcher> allObjs = new ArrayList<ApplicationsFetcher>();
        return allObjs;
    }
    public static ApplicationBinding getApplicationBindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ApplicationBinding obj = null;
            obj = new ApplicationBinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.APPLICATIONBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForApplicationBindingId(String id) throws RestException {
        ApplicationBinding obj = getObject(Constants.APPLICATIONBINDING, id);
        if (obj == null) {
            obj = getApplicationBindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForApplicationBindingId(String id) throws RestException {
        ApplicationBinding obj = getObject(Constants.APPLICATIONBINDING, id);
        if (obj == null) {
            obj = getApplicationBindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForApplicationBindingId(String id) throws RestException {
        ApplicationBinding obj = getObject(Constants.APPLICATIONBINDING, id);
        if (obj == null) {
            obj = getApplicationBindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ApplicationBinding> getApplicationBindingsForFetcherId(String id) throws RestException {
        ApplicationBindingsFetcher fetcher = getApplicationBindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.APPLICATIONBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ApplicationBinding>();
    }

    public static ApplicationBindingsFetcher getApplicationBindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.APPLICATIONBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (ApplicationBindingsFetcher) fetcher;
        }
        if ((fetcher = getApplicationBindingsFetcherForApplicationId(id)) != null) {
            return (ApplicationBindingsFetcher) addFetcher(Constants.APPLICATIONBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationBindingsFetcherForApplicationperformancemanagementId(id)) != null) {
            return (ApplicationBindingsFetcher) addFetcher(Constants.APPLICATIONBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ApplicationBinding> getAllApplicationBindings() throws RestException {
        java.util.List<ApplicationBinding> allObjs = new ArrayList<ApplicationBinding>();

        return allObjs;
    }

    public static java.util.List<ApplicationBindingsFetcher> getAllApplicationBindingsFetchers() throws RestException {
        java.util.List<ApplicationBindingsFetcher> allObjs = new ArrayList<ApplicationBindingsFetcher>();
        return allObjs;
    }
    public static Applicationperformancemanagement getApplicationperformancemanagementById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Applicationperformancemanagement obj = null;
            obj = new Applicationperformancemanagement();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ApplicationBindingsFetcher getApplicationBindingsFetcherForApplicationperformancemanagementId(String id) throws RestException {
        Applicationperformancemanagement obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementById(id);
        }

        if (obj != null) {
            ApplicationBindingsFetcher fetcher = obj.getApplicationBindings();
            return addFetcher(Constants.APPLICATIONBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementbindingsFetcher getApplicationperformancemanagementbindingsFetcherForApplicationperformancemanagementId(String id) throws RestException {
        Applicationperformancemanagement obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementbindingsFetcher fetcher = obj.getApplicationperformancemanagementbindings();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForApplicationperformancemanagementId(String id) throws RestException {
        Applicationperformancemanagement obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForApplicationperformancemanagementId(String id) throws RestException {
        Applicationperformancemanagement obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForApplicationperformancemanagementId(String id) throws RestException {
        Applicationperformancemanagement obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENT, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Applicationperformancemanagement> getApplicationperformancemanagementsForFetcherId(String id) throws RestException {
        ApplicationperformancemanagementsFetcher fetcher = getApplicationperformancemanagementsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.APPLICATIONPERFORMANCEMANAGEMENT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Applicationperformancemanagement>();
    }

    public static ApplicationperformancemanagementsFetcher getApplicationperformancemanagementsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, id);
        if (fetcher != null) {
            return (ApplicationperformancemanagementsFetcher) fetcher;
        }
        if ((fetcher = getApplicationperformancemanagementsFetcherForEnterpriseId(id)) != null) {
            return (ApplicationperformancemanagementsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationperformancemanagementsFetcherForMeId(id)) != null) {
            return (ApplicationperformancemanagementsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationperformancemanagementsFetcherForPerformanceMonitorId(id)) != null) {
            return (ApplicationperformancemanagementsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Applicationperformancemanagement> getAllApplicationperformancemanagements() throws RestException {
        java.util.List<Applicationperformancemanagement> allObjs = new ArrayList<Applicationperformancemanagement>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ApplicationperformancemanagementsFetcher fetcher = getApplicationperformancemanagementsFetcherForMeId(session.getId());
            java.util.List<Applicationperformancemanagement> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ApplicationperformancemanagementsFetcher> getAllApplicationperformancemanagementsFetchers() throws RestException {
        java.util.List<ApplicationperformancemanagementsFetcher> allObjs = new ArrayList<ApplicationperformancemanagementsFetcher>();
        return allObjs;
    }
    public static Applicationperformancemanagementbinding getApplicationperformancemanagementbindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Applicationperformancemanagementbinding obj = null;
            obj = new Applicationperformancemanagementbinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForApplicationperformancemanagementbindingId(String id) throws RestException {
        Applicationperformancemanagementbinding obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDING, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementbindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForApplicationperformancemanagementbindingId(String id) throws RestException {
        Applicationperformancemanagementbinding obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDING, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementbindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForApplicationperformancemanagementbindingId(String id) throws RestException {
        Applicationperformancemanagementbinding obj = getObject(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDING, id);
        if (obj == null) {
            obj = getApplicationperformancemanagementbindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Applicationperformancemanagementbinding> getApplicationperformancemanagementbindingsForFetcherId(String id) throws RestException {
        ApplicationperformancemanagementbindingsFetcher fetcher = getApplicationperformancemanagementbindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Applicationperformancemanagementbinding>();
    }

    public static ApplicationperformancemanagementbindingsFetcher getApplicationperformancemanagementbindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (ApplicationperformancemanagementbindingsFetcher) fetcher;
        }
        if ((fetcher = getApplicationperformancemanagementbindingsFetcherForAggregatedDomainId(id)) != null) {
            return (ApplicationperformancemanagementbindingsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationperformancemanagementbindingsFetcherForApplicationperformancemanagementId(id)) != null) {
            return (ApplicationperformancemanagementbindingsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationperformancemanagementbindingsFetcherForDomainId(id)) != null) {
            return (ApplicationperformancemanagementbindingsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getApplicationperformancemanagementbindingsFetcherForL2DomainId(id)) != null) {
            return (ApplicationperformancemanagementbindingsFetcher) addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Applicationperformancemanagementbinding> getAllApplicationperformancemanagementbindings() throws RestException {
        java.util.List<Applicationperformancemanagementbinding> allObjs = new ArrayList<Applicationperformancemanagementbinding>();

        return allObjs;
    }

    public static java.util.List<ApplicationperformancemanagementbindingsFetcher> getAllApplicationperformancemanagementbindingsFetchers() throws RestException {
        java.util.List<ApplicationperformancemanagementbindingsFetcher> allObjs = new ArrayList<ApplicationperformancemanagementbindingsFetcher>();
        return allObjs;
    }
    public static AutoDiscoverCluster getAutoDiscoverClusterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AutoDiscoverCluster obj = null;
            obj = new AutoDiscoverCluster();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AUTODISCOVERCLUSTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<AutoDiscoverCluster> getAutoDiscoverClustersForFetcherId(String id) throws RestException {
        AutoDiscoverClustersFetcher fetcher = getAutoDiscoverClustersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AUTODISCOVERCLUSTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AutoDiscoverCluster>();
    }

    public static AutoDiscoverClustersFetcher getAutoDiscoverClustersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AUTODISCOVERCLUSTERS_FETCHER, id);
        if (fetcher != null) {
            return (AutoDiscoverClustersFetcher) fetcher;
        }
        if ((fetcher = getAutoDiscoverClustersFetcherForVCenterDataCenterId(id)) != null) {
            return (AutoDiscoverClustersFetcher) addFetcher(Constants.AUTODISCOVERCLUSTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AutoDiscoverCluster> getAllAutoDiscoverClusters() throws RestException {
        java.util.List<AutoDiscoverCluster> allObjs = new ArrayList<AutoDiscoverCluster>();

        return allObjs;
    }

    public static java.util.List<AutoDiscoverClustersFetcher> getAllAutoDiscoverClustersFetchers() throws RestException {
        java.util.List<AutoDiscoverClustersFetcher> allObjs = new ArrayList<AutoDiscoverClustersFetcher>();
        return allObjs;
    }
    public static Autodiscovereddatacenter getAutodiscovereddatacenterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Autodiscovereddatacenter obj = null;
            obj = new Autodiscovereddatacenter();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AUTODISCOVEREDDATACENTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<Autodiscovereddatacenter> getAutodiscovereddatacentersForFetcherId(String id) throws RestException {
        AutodiscovereddatacentersFetcher fetcher = getAutodiscovereddatacentersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AUTODISCOVEREDDATACENTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Autodiscovereddatacenter>();
    }

    public static AutodiscovereddatacentersFetcher getAutodiscovereddatacentersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AUTODISCOVEREDDATACENTERS_FETCHER, id);
        if (fetcher != null) {
            return (AutodiscovereddatacentersFetcher) fetcher;
        }
        if ((fetcher = getAutodiscovereddatacentersFetcherForVCenterId(id)) != null) {
            return (AutodiscovereddatacentersFetcher) addFetcher(Constants.AUTODISCOVEREDDATACENTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Autodiscovereddatacenter> getAllAutodiscovereddatacenters() throws RestException {
        java.util.List<Autodiscovereddatacenter> allObjs = new ArrayList<Autodiscovereddatacenter>();

        return allObjs;
    }

    public static java.util.List<AutodiscovereddatacentersFetcher> getAllAutodiscovereddatacentersFetchers() throws RestException {
        java.util.List<AutodiscovereddatacentersFetcher> allObjs = new ArrayList<AutodiscovereddatacentersFetcher>();
        return allObjs;
    }
    public static AutoDiscoveredGateway getAutoDiscoveredGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AutoDiscoveredGateway obj = null;
            obj = new AutoDiscoveredGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AUTODISCOVEREDGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSPortsFetcher getNSPortsFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            NSPortsFetcher fetcher = obj.getNSPorts();
            return addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortsFetcher getPortsFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            PortsFetcher fetcher = obj.getPorts();
            return addFetcher(Constants.PORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WANServicesFetcher getWANServicesFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            WANServicesFetcher fetcher = obj.getWANServices();
            return addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WirelessPortsFetcher getWirelessPortsFetcherForAutoDiscoveredGatewayId(String id) throws RestException {
        AutoDiscoveredGateway obj = getObject(Constants.AUTODISCOVEREDGATEWAY, id);
        if (obj == null) {
            obj = getAutoDiscoveredGatewayById(id);
        }

        if (obj != null) {
            WirelessPortsFetcher fetcher = obj.getWirelessPorts();
            return addFetcher(Constants.WIRELESSPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AutoDiscoveredGateway> getAutoDiscoveredGatewaysForFetcherId(String id) throws RestException {
        AutoDiscoveredGatewaysFetcher fetcher = getAutoDiscoveredGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AUTODISCOVEREDGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AutoDiscoveredGateway>();
    }

    public static AutoDiscoveredGatewaysFetcher getAutoDiscoveredGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AUTODISCOVEREDGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (AutoDiscoveredGatewaysFetcher) fetcher;
        }
        if ((fetcher = getAutoDiscoveredGatewaysFetcherForMeId(id)) != null) {
            return (AutoDiscoveredGatewaysFetcher) addFetcher(Constants.AUTODISCOVEREDGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AutoDiscoveredGateway> getAllAutoDiscoveredGateways() throws RestException {
        java.util.List<AutoDiscoveredGateway> allObjs = new ArrayList<AutoDiscoveredGateway>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            AutoDiscoveredGatewaysFetcher fetcher = getAutoDiscoveredGatewaysFetcherForMeId(session.getId());
            java.util.List<AutoDiscoveredGateway> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<AutoDiscoveredGatewaysFetcher> getAllAutoDiscoveredGatewaysFetchers() throws RestException {
        java.util.List<AutoDiscoveredGatewaysFetcher> allObjs = new ArrayList<AutoDiscoveredGatewaysFetcher>();
        return allObjs;
    }
    public static AutoDiscoverHypervisorFromCluster getAutoDiscoverHypervisorFromClusterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AutoDiscoverHypervisorFromCluster obj = null;
            obj = new AutoDiscoverHypervisorFromCluster();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AUTODISCOVERHYPERVISORFROMCLUSTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<AutoDiscoverHypervisorFromCluster> getAutoDiscoverHypervisorFromClustersForFetcherId(String id) throws RestException {
        AutoDiscoverHypervisorFromClustersFetcher fetcher = getAutoDiscoverHypervisorFromClustersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AUTODISCOVERHYPERVISORFROMCLUSTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AutoDiscoverHypervisorFromCluster>();
    }

    public static AutoDiscoverHypervisorFromClustersFetcher getAutoDiscoverHypervisorFromClustersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AUTODISCOVERHYPERVISORFROMCLUSTERS_FETCHER, id);
        if (fetcher != null) {
            return (AutoDiscoverHypervisorFromClustersFetcher) fetcher;
        }
        if ((fetcher = getAutoDiscoverHypervisorFromClustersFetcherForVCenterClusterId(id)) != null) {
            return (AutoDiscoverHypervisorFromClustersFetcher) addFetcher(Constants.AUTODISCOVERHYPERVISORFROMCLUSTERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAutoDiscoverHypervisorFromClustersFetcherForVCenterDataCenterId(id)) != null) {
            return (AutoDiscoverHypervisorFromClustersFetcher) addFetcher(Constants.AUTODISCOVERHYPERVISORFROMCLUSTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AutoDiscoverHypervisorFromCluster> getAllAutoDiscoverHypervisorFromClusters() throws RestException {
        java.util.List<AutoDiscoverHypervisorFromCluster> allObjs = new ArrayList<AutoDiscoverHypervisorFromCluster>();

        return allObjs;
    }

    public static java.util.List<AutoDiscoverHypervisorFromClustersFetcher> getAllAutoDiscoverHypervisorFromClustersFetchers() throws RestException {
        java.util.List<AutoDiscoverHypervisorFromClustersFetcher> allObjs = new ArrayList<AutoDiscoverHypervisorFromClustersFetcher>();
        return allObjs;
    }
    public static Avatar getAvatarById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Avatar obj = null;
            obj = new Avatar();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AVATAR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAvatarId(String id) throws RestException {
        Avatar obj = getObject(Constants.AVATAR, id);
        if (obj == null) {
            obj = getAvatarById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAvatarId(String id) throws RestException {
        Avatar obj = getObject(Constants.AVATAR, id);
        if (obj == null) {
            obj = getAvatarById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAvatarId(String id) throws RestException {
        Avatar obj = getObject(Constants.AVATAR, id);
        if (obj == null) {
            obj = getAvatarById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Avatar> getAvatarsForFetcherId(String id) throws RestException {
        AvatarsFetcher fetcher = getAvatarsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AVATAR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Avatar>();
    }

    public static AvatarsFetcher getAvatarsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AVATARS_FETCHER, id);
        if (fetcher != null) {
            return (AvatarsFetcher) fetcher;
        }
        if ((fetcher = getAvatarsFetcherForEnterpriseId(id)) != null) {
            return (AvatarsFetcher) addFetcher(Constants.AVATARS_FETCHER, fetcher);
        }
        
        if ((fetcher = getAvatarsFetcherForUserId(id)) != null) {
            return (AvatarsFetcher) addFetcher(Constants.AVATARS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Avatar> getAllAvatars() throws RestException {
        java.util.List<Avatar> allObjs = new ArrayList<Avatar>();

        return allObjs;
    }

    public static java.util.List<AvatarsFetcher> getAllAvatarsFetchers() throws RestException {
        java.util.List<AvatarsFetcher> allObjs = new ArrayList<AvatarsFetcher>();
        return allObjs;
    }
    public static AzureCloud getAzureCloudById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            AzureCloud obj = null;
            obj = new AzureCloud();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.AZURECLOUD, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewayProfilesFetcher getIKEGatewayProfilesFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            IKEGatewayProfilesFetcher fetcher = obj.getIKEGatewayProfiles();
            return addFetcher(Constants.IKEGATEWAYPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForAzureCloudId(String id) throws RestException {
        AzureCloud obj = getObject(Constants.AZURECLOUD, id);
        if (obj == null) {
            obj = getAzureCloudById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<AzureCloud> getAzureCloudsForFetcherId(String id) throws RestException {
        AzureCloudsFetcher fetcher = getAzureCloudsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.AZURECLOUD);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<AzureCloud>();
    }

    public static AzureCloudsFetcher getAzureCloudsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.AZURECLOUDS_FETCHER, id);
        if (fetcher != null) {
            return (AzureCloudsFetcher) fetcher;
        }
        if ((fetcher = getAzureCloudsFetcherForEnterpriseId(id)) != null) {
            return (AzureCloudsFetcher) addFetcher(Constants.AZURECLOUDS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<AzureCloud> getAllAzureClouds() throws RestException {
        java.util.List<AzureCloud> allObjs = new ArrayList<AzureCloud>();

        return allObjs;
    }

    public static java.util.List<AzureCloudsFetcher> getAllAzureCloudsFetchers() throws RestException {
        java.util.List<AzureCloudsFetcher> allObjs = new ArrayList<AzureCloudsFetcher>();
        return allObjs;
    }
    public static BFDSession getBFDSessionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BFDSession obj = null;
            obj = new BFDSession();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BFDSESSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBFDSessionId(String id) throws RestException {
        BFDSession obj = getObject(Constants.BFDSESSION, id);
        if (obj == null) {
            obj = getBFDSessionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBFDSessionId(String id) throws RestException {
        BFDSession obj = getObject(Constants.BFDSESSION, id);
        if (obj == null) {
            obj = getBFDSessionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBFDSessionId(String id) throws RestException {
        BFDSession obj = getObject(Constants.BFDSESSION, id);
        if (obj == null) {
            obj = getBFDSessionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BFDSession> getBFDSessionsForFetcherId(String id) throws RestException {
        BFDSessionsFetcher fetcher = getBFDSessionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BFDSESSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BFDSession>();
    }

    public static BFDSessionsFetcher getBFDSessionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BFDSESSIONS_FETCHER, id);
        if (fetcher != null) {
            return (BFDSessionsFetcher) fetcher;
        }
        if ((fetcher = getBFDSessionsFetcherForBRConnectionId(id)) != null) {
            return (BFDSessionsFetcher) addFetcher(Constants.BFDSESSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBFDSessionsFetcherForUplinkConnectionId(id)) != null) {
            return (BFDSessionsFetcher) addFetcher(Constants.BFDSESSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BFDSession> getAllBFDSessions() throws RestException {
        java.util.List<BFDSession> allObjs = new ArrayList<BFDSession>();

        return allObjs;
    }

    public static java.util.List<BFDSessionsFetcher> getAllBFDSessionsFetchers() throws RestException {
        java.util.List<BFDSessionsFetcher> allObjs = new ArrayList<BFDSessionsFetcher>();
        return allObjs;
    }
    public static BGPNeighbor getBGPNeighborById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BGPNeighbor obj = null;
            obj = new BGPNeighbor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BGPNEIGHBOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForBGPNeighborId(String id) throws RestException {
        BGPNeighbor obj = getObject(Constants.BGPNEIGHBOR, id);
        if (obj == null) {
            obj = getBGPNeighborById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBGPNeighborId(String id) throws RestException {
        BGPNeighbor obj = getObject(Constants.BGPNEIGHBOR, id);
        if (obj == null) {
            obj = getBGPNeighborById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBGPNeighborId(String id) throws RestException {
        BGPNeighbor obj = getObject(Constants.BGPNEIGHBOR, id);
        if (obj == null) {
            obj = getBGPNeighborById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBGPNeighborId(String id) throws RestException {
        BGPNeighbor obj = getObject(Constants.BGPNEIGHBOR, id);
        if (obj == null) {
            obj = getBGPNeighborById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BGPNeighbor> getBGPNeighborsForFetcherId(String id) throws RestException {
        BGPNeighborsFetcher fetcher = getBGPNeighborsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BGPNEIGHBOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BGPNeighbor>();
    }

    public static BGPNeighborsFetcher getBGPNeighborsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BGPNEIGHBORS_FETCHER, id);
        if (fetcher != null) {
            return (BGPNeighborsFetcher) fetcher;
        }
        if ((fetcher = getBGPNeighborsFetcherForMeId(id)) != null) {
            return (BGPNeighborsFetcher) addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBGPNeighborsFetcherForSubnetId(id)) != null) {
            return (BGPNeighborsFetcher) addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBGPNeighborsFetcherForVLANId(id)) != null) {
            return (BGPNeighborsFetcher) addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBGPNeighborsFetcherForVPortId(id)) != null) {
            return (BGPNeighborsFetcher) addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BGPNeighbor> getAllBGPNeighbors() throws RestException {
        java.util.List<BGPNeighbor> allObjs = new ArrayList<BGPNeighbor>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            BGPNeighborsFetcher fetcher = getBGPNeighborsFetcherForMeId(session.getId());
            java.util.List<BGPNeighbor> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<BGPNeighborsFetcher> getAllBGPNeighborsFetchers() throws RestException {
        java.util.List<BGPNeighborsFetcher> allObjs = new ArrayList<BGPNeighborsFetcher>();
        return allObjs;
    }
    public static BGPPeer getBGPPeerById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BGPPeer obj = null;
            obj = new BGPPeer();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BGPPEER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBGPPeerId(String id) throws RestException {
        BGPPeer obj = getObject(Constants.BGPPEER, id);
        if (obj == null) {
            obj = getBGPPeerById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBGPPeerId(String id) throws RestException {
        BGPPeer obj = getObject(Constants.BGPPEER, id);
        if (obj == null) {
            obj = getBGPPeerById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBGPPeerId(String id) throws RestException {
        BGPPeer obj = getObject(Constants.BGPPEER, id);
        if (obj == null) {
            obj = getBGPPeerById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BGPPeer> getBGPPeersForFetcherId(String id) throws RestException {
        BGPPeersFetcher fetcher = getBGPPeersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BGPPEER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BGPPeer>();
    }

    public static BGPPeersFetcher getBGPPeersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BGPPEERS_FETCHER, id);
        if (fetcher != null) {
            return (BGPPeersFetcher) fetcher;
        }
        if ((fetcher = getBGPPeersFetcherForHSCId(id)) != null) {
            return (BGPPeersFetcher) addFetcher(Constants.BGPPEERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBGPPeersFetcherForVSCId(id)) != null) {
            return (BGPPeersFetcher) addFetcher(Constants.BGPPEERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BGPPeer> getAllBGPPeers() throws RestException {
        java.util.List<BGPPeer> allObjs = new ArrayList<BGPPeer>();

        return allObjs;
    }

    public static java.util.List<BGPPeersFetcher> getAllBGPPeersFetchers() throws RestException {
        java.util.List<BGPPeersFetcher> allObjs = new ArrayList<BGPPeersFetcher>();
        return allObjs;
    }
    public static BGPProfile getBGPProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BGPProfile obj = null;
            obj = new BGPProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BGPPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBGPProfileId(String id) throws RestException {
        BGPProfile obj = getObject(Constants.BGPPROFILE, id);
        if (obj == null) {
            obj = getBGPProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBGPProfileId(String id) throws RestException {
        BGPProfile obj = getObject(Constants.BGPPROFILE, id);
        if (obj == null) {
            obj = getBGPProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBGPProfileId(String id) throws RestException {
        BGPProfile obj = getObject(Constants.BGPPROFILE, id);
        if (obj == null) {
            obj = getBGPProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BGPProfile> getBGPProfilesForFetcherId(String id) throws RestException {
        BGPProfilesFetcher fetcher = getBGPProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BGPPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BGPProfile>();
    }

    public static BGPProfilesFetcher getBGPProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BGPPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (BGPProfilesFetcher) fetcher;
        }
        if ((fetcher = getBGPProfilesFetcherForEnterpriseId(id)) != null) {
            return (BGPProfilesFetcher) addFetcher(Constants.BGPPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getBGPProfilesFetcherForMeId(id)) != null) {
            return (BGPProfilesFetcher) addFetcher(Constants.BGPPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BGPProfile> getAllBGPProfiles() throws RestException {
        java.util.List<BGPProfile> allObjs = new ArrayList<BGPProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            BGPProfilesFetcher fetcher = getBGPProfilesFetcherForMeId(session.getId());
            java.util.List<BGPProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<BGPProfilesFetcher> getAllBGPProfilesFetchers() throws RestException {
        java.util.List<BGPProfilesFetcher> allObjs = new ArrayList<BGPProfilesFetcher>();
        return allObjs;
    }
    public static Bootstrap getBootstrapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Bootstrap obj = null;
            obj = new Bootstrap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BOOTSTRAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBootstrapId(String id) throws RestException {
        Bootstrap obj = getObject(Constants.BOOTSTRAP, id);
        if (obj == null) {
            obj = getBootstrapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBootstrapId(String id) throws RestException {
        Bootstrap obj = getObject(Constants.BOOTSTRAP, id);
        if (obj == null) {
            obj = getBootstrapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBootstrapId(String id) throws RestException {
        Bootstrap obj = getObject(Constants.BOOTSTRAP, id);
        if (obj == null) {
            obj = getBootstrapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Bootstrap> getBootstrapsForFetcherId(String id) throws RestException {
        BootstrapsFetcher fetcher = getBootstrapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BOOTSTRAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Bootstrap>();
    }

    public static BootstrapsFetcher getBootstrapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BOOTSTRAPS_FETCHER, id);
        if (fetcher != null) {
            return (BootstrapsFetcher) fetcher;
        }
        if ((fetcher = getBootstrapsFetcherForGatewayId(id)) != null) {
            return (BootstrapsFetcher) addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBootstrapsFetcherForNetconfGatewayId(id)) != null) {
            return (BootstrapsFetcher) addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBootstrapsFetcherForNSGatewayId(id)) != null) {
            return (BootstrapsFetcher) addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Bootstrap> getAllBootstraps() throws RestException {
        java.util.List<Bootstrap> allObjs = new ArrayList<Bootstrap>();

        return allObjs;
    }

    public static java.util.List<BootstrapsFetcher> getAllBootstrapsFetchers() throws RestException {
        java.util.List<BootstrapsFetcher> allObjs = new ArrayList<BootstrapsFetcher>();
        return allObjs;
    }
    public static BootstrapActivation getBootstrapActivationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BootstrapActivation obj = null;
            obj = new BootstrapActivation();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BOOTSTRAPACTIVATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBootstrapActivationId(String id) throws RestException {
        BootstrapActivation obj = getObject(Constants.BOOTSTRAPACTIVATION, id);
        if (obj == null) {
            obj = getBootstrapActivationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBootstrapActivationId(String id) throws RestException {
        BootstrapActivation obj = getObject(Constants.BOOTSTRAPACTIVATION, id);
        if (obj == null) {
            obj = getBootstrapActivationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBootstrapActivationId(String id) throws RestException {
        BootstrapActivation obj = getObject(Constants.BOOTSTRAPACTIVATION, id);
        if (obj == null) {
            obj = getBootstrapActivationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BootstrapActivation> getBootstrapActivationsForFetcherId(String id) throws RestException {
        BootstrapActivationsFetcher fetcher = getBootstrapActivationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BOOTSTRAPACTIVATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BootstrapActivation>();
    }

    public static BootstrapActivationsFetcher getBootstrapActivationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, id);
        if (fetcher != null) {
            return (BootstrapActivationsFetcher) fetcher;
        }
        if ((fetcher = getBootstrapActivationsFetcherForGatewayId(id)) != null) {
            return (BootstrapActivationsFetcher) addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBootstrapActivationsFetcherForNetconfGatewayId(id)) != null) {
            return (BootstrapActivationsFetcher) addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBootstrapActivationsFetcherForNSGatewayId(id)) != null) {
            return (BootstrapActivationsFetcher) addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BootstrapActivation> getAllBootstrapActivations() throws RestException {
        java.util.List<BootstrapActivation> allObjs = new ArrayList<BootstrapActivation>();

        return allObjs;
    }

    public static java.util.List<BootstrapActivationsFetcher> getAllBootstrapActivationsFetchers() throws RestException {
        java.util.List<BootstrapActivationsFetcher> allObjs = new ArrayList<BootstrapActivationsFetcher>();
        return allObjs;
    }
    public static BRConnection getBRConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BRConnection obj = null;
            obj = new BRConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BRCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static BFDSessionsFetcher getBFDSessionsFetcherForBRConnectionId(String id) throws RestException {
        BRConnection obj = getObject(Constants.BRCONNECTION, id);
        if (obj == null) {
            obj = getBRConnectionById(id);
        }

        if (obj != null) {
            BFDSessionsFetcher fetcher = obj.getBFDSessions();
            return addFetcher(Constants.BFDSESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBRConnectionId(String id) throws RestException {
        BRConnection obj = getObject(Constants.BRCONNECTION, id);
        if (obj == null) {
            obj = getBRConnectionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBRConnectionId(String id) throws RestException {
        BRConnection obj = getObject(Constants.BRCONNECTION, id);
        if (obj == null) {
            obj = getBRConnectionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBRConnectionId(String id) throws RestException {
        BRConnection obj = getObject(Constants.BRCONNECTION, id);
        if (obj == null) {
            obj = getBRConnectionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BRConnection> getBRConnectionsForFetcherId(String id) throws RestException {
        BRConnectionsFetcher fetcher = getBRConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BRCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BRConnection>();
    }

    public static BRConnectionsFetcher getBRConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BRCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (BRConnectionsFetcher) fetcher;
        }
        if ((fetcher = getBRConnectionsFetcherForVLANId(id)) != null) {
            return (BRConnectionsFetcher) addFetcher(Constants.BRCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getBRConnectionsFetcherForVLANTemplateId(id)) != null) {
            return (BRConnectionsFetcher) addFetcher(Constants.BRCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BRConnection> getAllBRConnections() throws RestException {
        java.util.List<BRConnection> allObjs = new ArrayList<BRConnection>();

        return allObjs;
    }

    public static java.util.List<BRConnectionsFetcher> getAllBRConnectionsFetchers() throws RestException {
        java.util.List<BRConnectionsFetcher> allObjs = new ArrayList<BRConnectionsFetcher>();
        return allObjs;
    }
    public static BridgeInterface getBridgeInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BridgeInterface obj = null;
            obj = new BridgeInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BRIDGEINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyDecisionsFetcher getPolicyDecisionsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            PolicyDecisionsFetcher fetcher = obj.getPolicyDecisions();
            return addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForBridgeInterfaceId(String id) throws RestException {
        BridgeInterface obj = getObject(Constants.BRIDGEINTERFACE, id);
        if (obj == null) {
            obj = getBridgeInterfaceById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BridgeInterface> getBridgeInterfacesForFetcherId(String id) throws RestException {
        BridgeInterfacesFetcher fetcher = getBridgeInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BRIDGEINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BridgeInterface>();
    }

    public static BridgeInterfacesFetcher getBridgeInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BRIDGEINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (BridgeInterfacesFetcher) fetcher;
        }
        if ((fetcher = getBridgeInterfacesFetcherForAggregatedDomainId(id)) != null) {
            return (BridgeInterfacesFetcher) addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getBridgeInterfacesFetcherForDomainId(id)) != null) {
            return (BridgeInterfacesFetcher) addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getBridgeInterfacesFetcherForL2DomainId(id)) != null) {
            return (BridgeInterfacesFetcher) addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getBridgeInterfacesFetcherForVPortId(id)) != null) {
            return (BridgeInterfacesFetcher) addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BridgeInterface> getAllBridgeInterfaces() throws RestException {
        java.util.List<BridgeInterface> allObjs = new ArrayList<BridgeInterface>();

        return allObjs;
    }

    public static java.util.List<BridgeInterfacesFetcher> getAllBridgeInterfacesFetchers() throws RestException {
        java.util.List<BridgeInterfacesFetcher> allObjs = new ArrayList<BridgeInterfacesFetcher>();
        return allObjs;
    }
    public static BulkStatistics getBulkStatisticsById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            BulkStatistics obj = null;
            obj = new BulkStatistics();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.BULKSTATISTICS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForBulkStatisticsId(String id) throws RestException {
        BulkStatistics obj = getObject(Constants.BULKSTATISTICS, id);
        if (obj == null) {
            obj = getBulkStatisticsById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForBulkStatisticsId(String id) throws RestException {
        BulkStatistics obj = getObject(Constants.BULKSTATISTICS, id);
        if (obj == null) {
            obj = getBulkStatisticsById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForBulkStatisticsId(String id) throws RestException {
        BulkStatistics obj = getObject(Constants.BULKSTATISTICS, id);
        if (obj == null) {
            obj = getBulkStatisticsById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<BulkStatistics> getBulkStatisticsForFetcherId(String id) throws RestException {
        BulkStatisticsFetcher fetcher = getBulkStatisticsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.BULKSTATISTICS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<BulkStatistics>();
    }

    public static BulkStatisticsFetcher getBulkStatisticsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.BULKSTATISTICS_FETCHER, id);
        if (fetcher != null) {
            return (BulkStatisticsFetcher) fetcher;
        }
        if ((fetcher = getBulkStatisticsFetcherForPATNATPoolId(id)) != null) {
            return (BulkStatisticsFetcher) addFetcher(Constants.BULKSTATISTICS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<BulkStatistics> getAllBulkStatistics() throws RestException {
        java.util.List<BulkStatistics> allObjs = new ArrayList<BulkStatistics>();

        return allObjs;
    }

    public static java.util.List<BulkStatisticsFetcher> getAllBulkStatisticsFetchers() throws RestException {
        java.util.List<BulkStatisticsFetcher> allObjs = new ArrayList<BulkStatisticsFetcher>();
        return allObjs;
    }
    public static CaptivePortalProfile getCaptivePortalProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CaptivePortalProfile obj = null;
            obj = new CaptivePortalProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CAPTIVEPORTALPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<CaptivePortalProfile> getCaptivePortalProfilesForFetcherId(String id) throws RestException {
        CaptivePortalProfilesFetcher fetcher = getCaptivePortalProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CAPTIVEPORTALPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CaptivePortalProfile>();
    }

    public static CaptivePortalProfilesFetcher getCaptivePortalProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CAPTIVEPORTALPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (CaptivePortalProfilesFetcher) fetcher;
        }
        if ((fetcher = getCaptivePortalProfilesFetcherForEnterpriseId(id)) != null) {
            return (CaptivePortalProfilesFetcher) addFetcher(Constants.CAPTIVEPORTALPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<CaptivePortalProfile> getAllCaptivePortalProfiles() throws RestException {
        java.util.List<CaptivePortalProfile> allObjs = new ArrayList<CaptivePortalProfile>();

        return allObjs;
    }

    public static java.util.List<CaptivePortalProfilesFetcher> getAllCaptivePortalProfilesFetchers() throws RestException {
        java.util.List<CaptivePortalProfilesFetcher> allObjs = new ArrayList<CaptivePortalProfilesFetcher>();
        return allObjs;
    }
    public static Certificate getCertificateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Certificate obj = null;
            obj = new Certificate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CERTIFICATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCertificateId(String id) throws RestException {
        Certificate obj = getObject(Constants.CERTIFICATE, id);
        if (obj == null) {
            obj = getCertificateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCertificateId(String id) throws RestException {
        Certificate obj = getObject(Constants.CERTIFICATE, id);
        if (obj == null) {
            obj = getCertificateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCertificateId(String id) throws RestException {
        Certificate obj = getObject(Constants.CERTIFICATE, id);
        if (obj == null) {
            obj = getCertificateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Certificate> getCertificatesForFetcherId(String id) throws RestException {
        CertificatesFetcher fetcher = getCertificatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CERTIFICATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Certificate>();
    }

    public static CertificatesFetcher getCertificatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CERTIFICATES_FETCHER, id);
        if (fetcher != null) {
            return (CertificatesFetcher) fetcher;
        }
        if ((fetcher = getCertificatesFetcherForMeId(id)) != null) {
            return (CertificatesFetcher) addFetcher(Constants.CERTIFICATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Certificate> getAllCertificates() throws RestException {
        java.util.List<Certificate> allObjs = new ArrayList<Certificate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            CertificatesFetcher fetcher = getCertificatesFetcherForMeId(session.getId());
            java.util.List<Certificate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<CertificatesFetcher> getAllCertificatesFetchers() throws RestException {
        java.util.List<CertificatesFetcher> allObjs = new ArrayList<CertificatesFetcher>();
        return allObjs;
    }
    public static CloudMgmtSystem getCloudMgmtSystemById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CloudMgmtSystem obj = null;
            obj = new CloudMgmtSystem();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CLOUDMGMTSYSTEM, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCloudMgmtSystemId(String id) throws RestException {
        CloudMgmtSystem obj = getObject(Constants.CLOUDMGMTSYSTEM, id);
        if (obj == null) {
            obj = getCloudMgmtSystemById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCloudMgmtSystemId(String id) throws RestException {
        CloudMgmtSystem obj = getObject(Constants.CLOUDMGMTSYSTEM, id);
        if (obj == null) {
            obj = getCloudMgmtSystemById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCloudMgmtSystemId(String id) throws RestException {
        CloudMgmtSystem obj = getObject(Constants.CLOUDMGMTSYSTEM, id);
        if (obj == null) {
            obj = getCloudMgmtSystemById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<CloudMgmtSystem> getCloudMgmtSystemsForFetcherId(String id) throws RestException {
        CloudMgmtSystemsFetcher fetcher = getCloudMgmtSystemsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CLOUDMGMTSYSTEM);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CloudMgmtSystem>();
    }

    public static CloudMgmtSystemsFetcher getCloudMgmtSystemsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CLOUDMGMTSYSTEMS_FETCHER, id);
        if (fetcher != null) {
            return (CloudMgmtSystemsFetcher) fetcher;
        }
        if ((fetcher = getCloudMgmtSystemsFetcherForMeId(id)) != null) {
            return (CloudMgmtSystemsFetcher) addFetcher(Constants.CLOUDMGMTSYSTEMS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<CloudMgmtSystem> getAllCloudMgmtSystems() throws RestException {
        java.util.List<CloudMgmtSystem> allObjs = new ArrayList<CloudMgmtSystem>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            CloudMgmtSystemsFetcher fetcher = getCloudMgmtSystemsFetcherForMeId(session.getId());
            java.util.List<CloudMgmtSystem> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<CloudMgmtSystemsFetcher> getAllCloudMgmtSystemsFetchers() throws RestException {
        java.util.List<CloudMgmtSystemsFetcher> allObjs = new ArrayList<CloudMgmtSystemsFetcher>();
        return allObjs;
    }
    public static Command getCommandById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Command obj = null;
            obj = new Command();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.COMMAND, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<Command> getCommandsForFetcherId(String id) throws RestException {
        CommandsFetcher fetcher = getCommandsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.COMMAND);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Command>();
    }

    public static CommandsFetcher getCommandsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.COMMANDS_FETCHER, id);
        if (fetcher != null) {
            return (CommandsFetcher) fetcher;
        }
        if ((fetcher = getCommandsFetcherForMeId(id)) != null) {
            return (CommandsFetcher) addFetcher(Constants.COMMANDS_FETCHER, fetcher);
        }
        
        if ((fetcher = getCommandsFetcherForNSGatewayId(id)) != null) {
            return (CommandsFetcher) addFetcher(Constants.COMMANDS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Command> getAllCommands() throws RestException {
        java.util.List<Command> allObjs = new ArrayList<Command>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            CommandsFetcher fetcher = getCommandsFetcherForMeId(session.getId());
            java.util.List<Command> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<CommandsFetcher> getAllCommandsFetchers() throws RestException {
        java.util.List<CommandsFetcher> allObjs = new ArrayList<CommandsFetcher>();
        return allObjs;
    }
    public static VSDComponent getVSDComponentById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSDComponent obj = null;
            obj = new VSDComponent();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSDCOMPONENT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVSDComponentId(String id) throws RestException {
        VSDComponent obj = getObject(Constants.VSDCOMPONENT, id);
        if (obj == null) {
            obj = getVSDComponentById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVSDComponentId(String id) throws RestException {
        VSDComponent obj = getObject(Constants.VSDCOMPONENT, id);
        if (obj == null) {
            obj = getVSDComponentById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVSDComponentId(String id) throws RestException {
        VSDComponent obj = getObject(Constants.VSDCOMPONENT, id);
        if (obj == null) {
            obj = getVSDComponentById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VSDComponent> getVSDComponentsForFetcherId(String id) throws RestException {
        VSDComponentsFetcher fetcher = getVSDComponentsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSDCOMPONENT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VSDComponent>();
    }

    public static VSDComponentsFetcher getVSDComponentsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSDCOMPONENTS_FETCHER, id);
        if (fetcher != null) {
            return (VSDComponentsFetcher) fetcher;
        }
        if ((fetcher = getVSDComponentsFetcherForVSDId(id)) != null) {
            return (VSDComponentsFetcher) addFetcher(Constants.VSDCOMPONENTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VSDComponent> getAllVSDComponents() throws RestException {
        java.util.List<VSDComponent> allObjs = new ArrayList<VSDComponent>();

        return allObjs;
    }

    public static java.util.List<VSDComponentsFetcher> getAllVSDComponentsFetchers() throws RestException {
        java.util.List<VSDComponentsFetcher> allObjs = new ArrayList<VSDComponentsFetcher>();
        return allObjs;
    }
    public static Connectionendpoint getConnectionendpointById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Connectionendpoint obj = null;
            obj = new Connectionendpoint();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CONNECTIONENDPOINT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForConnectionendpointId(String id) throws RestException {
        Connectionendpoint obj = getObject(Constants.CONNECTIONENDPOINT, id);
        if (obj == null) {
            obj = getConnectionendpointById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForConnectionendpointId(String id) throws RestException {
        Connectionendpoint obj = getObject(Constants.CONNECTIONENDPOINT, id);
        if (obj == null) {
            obj = getConnectionendpointById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForConnectionendpointId(String id) throws RestException {
        Connectionendpoint obj = getObject(Constants.CONNECTIONENDPOINT, id);
        if (obj == null) {
            obj = getConnectionendpointById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Connectionendpoint> getConnectionendpointsForFetcherId(String id) throws RestException {
        ConnectionendpointsFetcher fetcher = getConnectionendpointsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CONNECTIONENDPOINT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Connectionendpoint>();
    }

    public static ConnectionendpointsFetcher getConnectionendpointsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CONNECTIONENDPOINTS_FETCHER, id);
        if (fetcher != null) {
            return (ConnectionendpointsFetcher) fetcher;
        }
        if ((fetcher = getConnectionendpointsFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (ConnectionendpointsFetcher) addFetcher(Constants.CONNECTIONENDPOINTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Connectionendpoint> getAllConnectionendpoints() throws RestException {
        java.util.List<Connectionendpoint> allObjs = new ArrayList<Connectionendpoint>();

        return allObjs;
    }

    public static java.util.List<ConnectionendpointsFetcher> getAllConnectionendpointsFetchers() throws RestException {
        java.util.List<ConnectionendpointsFetcher> allObjs = new ArrayList<ConnectionendpointsFetcher>();
        return allObjs;
    }
    public static Container getContainerById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Container obj = null;
            obj = new Container();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CONTAINER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerResyncsFetcher getContainerResyncsFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            ContainerResyncsFetcher fetcher = obj.getContainerResyncs();
            return addFetcher(Constants.CONTAINERRESYNCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSsFetcher getVRSsFetcherForContainerId(String id) throws RestException {
        Container obj = getObject(Constants.CONTAINER, id);
        if (obj == null) {
            obj = getContainerById(id);
        }

        if (obj != null) {
            VRSsFetcher fetcher = obj.getVRSs();
            return addFetcher(Constants.VRSS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Container> getContainersForFetcherId(String id) throws RestException {
        ContainersFetcher fetcher = getContainersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CONTAINER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Container>();
    }

    public static ContainersFetcher getContainersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CONTAINERS_FETCHER, id);
        if (fetcher != null) {
            return (ContainersFetcher) fetcher;
        }
        if ((fetcher = getContainersFetcherForAggregatedDomainId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForDomainId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForEgressACLTemplateId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForEnterpriseId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForIngressACLTemplateId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForL2DomainId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForMeId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForQOSId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForSubnetId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForUserId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForVPortId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForVRSId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainersFetcherForZoneId(id)) != null) {
            return (ContainersFetcher) addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Container> getAllContainers() throws RestException {
        java.util.List<Container> allObjs = new ArrayList<Container>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ContainersFetcher fetcher = getContainersFetcherForMeId(session.getId());
            java.util.List<Container> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ContainersFetcher> getAllContainersFetchers() throws RestException {
        java.util.List<ContainersFetcher> allObjs = new ArrayList<ContainersFetcher>();
        return allObjs;
    }
    public static ContainerInterface getContainerInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ContainerInterface obj = null;
            obj = new ContainerInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CONTAINERINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            MultiCastChannelMapsFetcher fetcher = obj.getMultiCastChannelMaps();
            return addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyDecisionsFetcher getPolicyDecisionsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            PolicyDecisionsFetcher fetcher = obj.getPolicyDecisions();
            return addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForContainerInterfaceId(String id) throws RestException {
        ContainerInterface obj = getObject(Constants.CONTAINERINTERFACE, id);
        if (obj == null) {
            obj = getContainerInterfaceById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ContainerInterface> getContainerInterfacesForFetcherId(String id) throws RestException {
        ContainerInterfacesFetcher fetcher = getContainerInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CONTAINERINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ContainerInterface>();
    }

    public static ContainerInterfacesFetcher getContainerInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CONTAINERINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (ContainerInterfacesFetcher) fetcher;
        }
        if ((fetcher = getContainerInterfacesFetcherForAggregatedDomainId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForContainerId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForDomainId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForL2DomainId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForMeId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForSubnetId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForVPortId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerInterfacesFetcherForZoneId(id)) != null) {
            return (ContainerInterfacesFetcher) addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ContainerInterface> getAllContainerInterfaces() throws RestException {
        java.util.List<ContainerInterface> allObjs = new ArrayList<ContainerInterface>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ContainerInterfacesFetcher fetcher = getContainerInterfacesFetcherForMeId(session.getId());
            java.util.List<ContainerInterface> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ContainerInterfacesFetcher> getAllContainerInterfacesFetchers() throws RestException {
        java.util.List<ContainerInterfacesFetcher> allObjs = new ArrayList<ContainerInterfacesFetcher>();
        return allObjs;
    }
    public static ContainerResync getContainerResyncById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ContainerResync obj = null;
            obj = new ContainerResync();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CONTAINERRESYNC, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForContainerResyncId(String id) throws RestException {
        ContainerResync obj = getObject(Constants.CONTAINERRESYNC, id);
        if (obj == null) {
            obj = getContainerResyncById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForContainerResyncId(String id) throws RestException {
        ContainerResync obj = getObject(Constants.CONTAINERRESYNC, id);
        if (obj == null) {
            obj = getContainerResyncById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForContainerResyncId(String id) throws RestException {
        ContainerResync obj = getObject(Constants.CONTAINERRESYNC, id);
        if (obj == null) {
            obj = getContainerResyncById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ContainerResync> getContainerResyncsForFetcherId(String id) throws RestException {
        ContainerResyncsFetcher fetcher = getContainerResyncsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CONTAINERRESYNC);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ContainerResync>();
    }

    public static ContainerResyncsFetcher getContainerResyncsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CONTAINERRESYNCS_FETCHER, id);
        if (fetcher != null) {
            return (ContainerResyncsFetcher) fetcher;
        }
        if ((fetcher = getContainerResyncsFetcherForContainerId(id)) != null) {
            return (ContainerResyncsFetcher) addFetcher(Constants.CONTAINERRESYNCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getContainerResyncsFetcherForSubnetId(id)) != null) {
            return (ContainerResyncsFetcher) addFetcher(Constants.CONTAINERRESYNCS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ContainerResync> getAllContainerResyncs() throws RestException {
        java.util.List<ContainerResync> allObjs = new ArrayList<ContainerResync>();

        return allObjs;
    }

    public static java.util.List<ContainerResyncsFetcher> getAllContainerResyncsFetchers() throws RestException {
        java.util.List<ContainerResyncsFetcher> allObjs = new ArrayList<ContainerResyncsFetcher>();
        return allObjs;
    }
    public static ControllerVRSLink getControllerVRSLinkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ControllerVRSLink obj = null;
            obj = new ControllerVRSLink();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CONTROLLERVRSLINK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HSCsFetcher getHSCsFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            HSCsFetcher fetcher = obj.getHSCs();
            return addFetcher(Constants.HSCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSsFetcher getVRSsFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            VRSsFetcher fetcher = obj.getVRSs();
            return addFetcher(Constants.VRSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSCsFetcher getVSCsFetcherForControllerVRSLinkId(String id) throws RestException {
        ControllerVRSLink obj = getObject(Constants.CONTROLLERVRSLINK, id);
        if (obj == null) {
            obj = getControllerVRSLinkById(id);
        }

        if (obj != null) {
            VSCsFetcher fetcher = obj.getVSCs();
            return addFetcher(Constants.VSCS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ControllerVRSLink> getControllerVRSLinksForFetcherId(String id) throws RestException {
        ControllerVRSLinksFetcher fetcher = getControllerVRSLinksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CONTROLLERVRSLINK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ControllerVRSLink>();
    }

    public static ControllerVRSLinksFetcher getControllerVRSLinksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, id);
        if (fetcher != null) {
            return (ControllerVRSLinksFetcher) fetcher;
        }
        if ((fetcher = getControllerVRSLinksFetcherForHSCId(id)) != null) {
            return (ControllerVRSLinksFetcher) addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getControllerVRSLinksFetcherForVRSId(id)) != null) {
            return (ControllerVRSLinksFetcher) addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getControllerVRSLinksFetcherForVSCId(id)) != null) {
            return (ControllerVRSLinksFetcher) addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ControllerVRSLink> getAllControllerVRSLinks() throws RestException {
        java.util.List<ControllerVRSLink> allObjs = new ArrayList<ControllerVRSLink>();

        return allObjs;
    }

    public static java.util.List<ControllerVRSLinksFetcher> getAllControllerVRSLinksFetchers() throws RestException {
        java.util.List<ControllerVRSLinksFetcher> allObjs = new ArrayList<ControllerVRSLinksFetcher>();
        return allObjs;
    }
    public static COSRemarkingPolicy getCOSRemarkingPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            COSRemarkingPolicy obj = null;
            obj = new COSRemarkingPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.COSREMARKINGPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCOSRemarkingPolicyId(String id) throws RestException {
        COSRemarkingPolicy obj = getObject(Constants.COSREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCOSRemarkingPolicyId(String id) throws RestException {
        COSRemarkingPolicy obj = getObject(Constants.COSREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCOSRemarkingPolicyId(String id) throws RestException {
        COSRemarkingPolicy obj = getObject(Constants.COSREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<COSRemarkingPolicy> getCOSRemarkingPoliciesForFetcherId(String id) throws RestException {
        COSRemarkingPoliciesFetcher fetcher = getCOSRemarkingPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.COSREMARKINGPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<COSRemarkingPolicy>();
    }

    public static COSRemarkingPoliciesFetcher getCOSRemarkingPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.COSREMARKINGPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (COSRemarkingPoliciesFetcher) fetcher;
        }
        if ((fetcher = getCOSRemarkingPoliciesFetcherForCOSRemarkingPolicyTableId(id)) != null) {
            return (COSRemarkingPoliciesFetcher) addFetcher(Constants.COSREMARKINGPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<COSRemarkingPolicy> getAllCOSRemarkingPolicies() throws RestException {
        java.util.List<COSRemarkingPolicy> allObjs = new ArrayList<COSRemarkingPolicy>();

        return allObjs;
    }

    public static java.util.List<COSRemarkingPoliciesFetcher> getAllCOSRemarkingPoliciesFetchers() throws RestException {
        java.util.List<COSRemarkingPoliciesFetcher> allObjs = new ArrayList<COSRemarkingPoliciesFetcher>();
        return allObjs;
    }
    public static COSRemarkingPolicyTable getCOSRemarkingPolicyTableById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            COSRemarkingPolicyTable obj = null;
            obj = new COSRemarkingPolicyTable();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.COSREMARKINGPOLICYTABLE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static COSRemarkingPoliciesFetcher getCOSRemarkingPoliciesFetcherForCOSRemarkingPolicyTableId(String id) throws RestException {
        COSRemarkingPolicyTable obj = getObject(Constants.COSREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            COSRemarkingPoliciesFetcher fetcher = obj.getCOSRemarkingPolicies();
            return addFetcher(Constants.COSREMARKINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCOSRemarkingPolicyTableId(String id) throws RestException {
        COSRemarkingPolicyTable obj = getObject(Constants.COSREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCOSRemarkingPolicyTableId(String id) throws RestException {
        COSRemarkingPolicyTable obj = getObject(Constants.COSREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCOSRemarkingPolicyTableId(String id) throws RestException {
        COSRemarkingPolicyTable obj = getObject(Constants.COSREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getCOSRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<COSRemarkingPolicyTable> getCOSRemarkingPolicyTablesForFetcherId(String id) throws RestException {
        COSRemarkingPolicyTablesFetcher fetcher = getCOSRemarkingPolicyTablesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.COSREMARKINGPOLICYTABLE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<COSRemarkingPolicyTable>();
    }

    public static COSRemarkingPolicyTablesFetcher getCOSRemarkingPolicyTablesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.COSREMARKINGPOLICYTABLES_FETCHER, id);
        if (fetcher != null) {
            return (COSRemarkingPolicyTablesFetcher) fetcher;
        }
        if ((fetcher = getCOSRemarkingPolicyTablesFetcherForEnterpriseId(id)) != null) {
            return (COSRemarkingPolicyTablesFetcher) addFetcher(Constants.COSREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }
        
        if ((fetcher = getCOSRemarkingPolicyTablesFetcherForMeId(id)) != null) {
            return (COSRemarkingPolicyTablesFetcher) addFetcher(Constants.COSREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<COSRemarkingPolicyTable> getAllCOSRemarkingPolicyTables() throws RestException {
        java.util.List<COSRemarkingPolicyTable> allObjs = new ArrayList<COSRemarkingPolicyTable>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            COSRemarkingPolicyTablesFetcher fetcher = getCOSRemarkingPolicyTablesFetcherForMeId(session.getId());
            java.util.List<COSRemarkingPolicyTable> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<COSRemarkingPolicyTablesFetcher> getAllCOSRemarkingPolicyTablesFetchers() throws RestException {
        java.util.List<COSRemarkingPolicyTablesFetcher> allObjs = new ArrayList<COSRemarkingPolicyTablesFetcher>();
        return allObjs;
    }
    public static CSNATPool getCSNATPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CSNATPool obj = null;
            obj = new CSNATPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CSNATPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static CTranslationMapsFetcher getCTranslationMapsFetcherForCSNATPoolId(String id) throws RestException {
        CSNATPool obj = getObject(Constants.CSNATPOOL, id);
        if (obj == null) {
            obj = getCSNATPoolById(id);
        }

        if (obj != null) {
            CTranslationMapsFetcher fetcher = obj.getCTranslationMaps();
            return addFetcher(Constants.CTRANSLATIONMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCSNATPoolId(String id) throws RestException {
        CSNATPool obj = getObject(Constants.CSNATPOOL, id);
        if (obj == null) {
            obj = getCSNATPoolById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCSNATPoolId(String id) throws RestException {
        CSNATPool obj = getObject(Constants.CSNATPOOL, id);
        if (obj == null) {
            obj = getCSNATPoolById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCSNATPoolId(String id) throws RestException {
        CSNATPool obj = getObject(Constants.CSNATPOOL, id);
        if (obj == null) {
            obj = getCSNATPoolById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<CSNATPool> getCSNATPoolsForFetcherId(String id) throws RestException {
        CSNATPoolsFetcher fetcher = getCSNATPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CSNATPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CSNATPool>();
    }

    public static CSNATPoolsFetcher getCSNATPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CSNATPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (CSNATPoolsFetcher) fetcher;
        }
        if ((fetcher = getCSNATPoolsFetcherForLinkId(id)) != null) {
            return (CSNATPoolsFetcher) addFetcher(Constants.CSNATPOOLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<CSNATPool> getAllCSNATPools() throws RestException {
        java.util.List<CSNATPool> allObjs = new ArrayList<CSNATPool>();

        return allObjs;
    }

    public static java.util.List<CSNATPoolsFetcher> getAllCSNATPoolsFetchers() throws RestException {
        java.util.List<CSNATPoolsFetcher> allObjs = new ArrayList<CSNATPoolsFetcher>();
        return allObjs;
    }
    public static CTranslationMap getCTranslationMapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CTranslationMap obj = null;
            obj = new CTranslationMap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CTRANSLATIONMAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCTranslationMapId(String id) throws RestException {
        CTranslationMap obj = getObject(Constants.CTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getCTranslationMapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCTranslationMapId(String id) throws RestException {
        CTranslationMap obj = getObject(Constants.CTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getCTranslationMapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCTranslationMapId(String id) throws RestException {
        CTranslationMap obj = getObject(Constants.CTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getCTranslationMapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<CTranslationMap> getCTranslationMapsForFetcherId(String id) throws RestException {
        CTranslationMapsFetcher fetcher = getCTranslationMapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CTRANSLATIONMAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CTranslationMap>();
    }

    public static CTranslationMapsFetcher getCTranslationMapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CTRANSLATIONMAPS_FETCHER, id);
        if (fetcher != null) {
            return (CTranslationMapsFetcher) fetcher;
        }
        if ((fetcher = getCTranslationMapsFetcherForCSNATPoolId(id)) != null) {
            return (CTranslationMapsFetcher) addFetcher(Constants.CTRANSLATIONMAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<CTranslationMap> getAllCTranslationMaps() throws RestException {
        java.util.List<CTranslationMap> allObjs = new ArrayList<CTranslationMap>();

        return allObjs;
    }

    public static java.util.List<CTranslationMapsFetcher> getAllCTranslationMapsFetchers() throws RestException {
        java.util.List<CTranslationMapsFetcher> allObjs = new ArrayList<CTranslationMapsFetcher>();
        return allObjs;
    }
    public static CustomProperty getCustomPropertyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            CustomProperty obj = null;
            obj = new CustomProperty();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.CUSTOMPROPERTY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForCustomPropertyId(String id) throws RestException {
        CustomProperty obj = getObject(Constants.CUSTOMPROPERTY, id);
        if (obj == null) {
            obj = getCustomPropertyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForCustomPropertyId(String id) throws RestException {
        CustomProperty obj = getObject(Constants.CUSTOMPROPERTY, id);
        if (obj == null) {
            obj = getCustomPropertyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForCustomPropertyId(String id) throws RestException {
        CustomProperty obj = getObject(Constants.CUSTOMPROPERTY, id);
        if (obj == null) {
            obj = getCustomPropertyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<CustomProperty> getCustomPropertiesForFetcherId(String id) throws RestException {
        CustomPropertiesFetcher fetcher = getCustomPropertiesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.CUSTOMPROPERTY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<CustomProperty>();
    }

    public static CustomPropertiesFetcher getCustomPropertiesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.CUSTOMPROPERTIES_FETCHER, id);
        if (fetcher != null) {
            return (CustomPropertiesFetcher) fetcher;
        }
        if ((fetcher = getCustomPropertiesFetcherForUplinkConnectionId(id)) != null) {
            return (CustomPropertiesFetcher) addFetcher(Constants.CUSTOMPROPERTIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<CustomProperty> getAllCustomProperties() throws RestException {
        java.util.List<CustomProperty> allObjs = new ArrayList<CustomProperty>();

        return allObjs;
    }

    public static java.util.List<CustomPropertiesFetcher> getAllCustomPropertiesFetchers() throws RestException {
        java.util.List<CustomPropertiesFetcher> allObjs = new ArrayList<CustomPropertiesFetcher>();
        return allObjs;
    }
    public static DefaultGateway getDefaultGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DefaultGateway obj = null;
            obj = new DefaultGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DEFAULTGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDefaultGatewayId(String id) throws RestException {
        DefaultGateway obj = getObject(Constants.DEFAULTGATEWAY, id);
        if (obj == null) {
            obj = getDefaultGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDefaultGatewayId(String id) throws RestException {
        DefaultGateway obj = getObject(Constants.DEFAULTGATEWAY, id);
        if (obj == null) {
            obj = getDefaultGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDefaultGatewayId(String id) throws RestException {
        DefaultGateway obj = getObject(Constants.DEFAULTGATEWAY, id);
        if (obj == null) {
            obj = getDefaultGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DefaultGateway> getDefaultGatewaysForFetcherId(String id) throws RestException {
        DefaultGatewaysFetcher fetcher = getDefaultGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DEFAULTGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DefaultGateway>();
    }

    public static DefaultGatewaysFetcher getDefaultGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DEFAULTGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (DefaultGatewaysFetcher) fetcher;
        }
        if ((fetcher = getDefaultGatewaysFetcherForSubnetId(id)) != null) {
            return (DefaultGatewaysFetcher) addFetcher(Constants.DEFAULTGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DefaultGateway> getAllDefaultGateways() throws RestException {
        java.util.List<DefaultGateway> allObjs = new ArrayList<DefaultGateway>();

        return allObjs;
    }

    public static java.util.List<DefaultGatewaysFetcher> getAllDefaultGatewaysFetchers() throws RestException {
        java.util.List<DefaultGatewaysFetcher> allObjs = new ArrayList<DefaultGatewaysFetcher>();
        return allObjs;
    }
    public static DemarcationService getDemarcationServiceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DemarcationService obj = null;
            obj = new DemarcationService();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DEMARCATIONSERVICE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDemarcationServiceId(String id) throws RestException {
        DemarcationService obj = getObject(Constants.DEMARCATIONSERVICE, id);
        if (obj == null) {
            obj = getDemarcationServiceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDemarcationServiceId(String id) throws RestException {
        DemarcationService obj = getObject(Constants.DEMARCATIONSERVICE, id);
        if (obj == null) {
            obj = getDemarcationServiceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDemarcationServiceId(String id) throws RestException {
        DemarcationService obj = getObject(Constants.DEMARCATIONSERVICE, id);
        if (obj == null) {
            obj = getDemarcationServiceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DemarcationService> getDemarcationServicesForFetcherId(String id) throws RestException {
        DemarcationServicesFetcher fetcher = getDemarcationServicesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DEMARCATIONSERVICE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DemarcationService>();
    }

    public static DemarcationServicesFetcher getDemarcationServicesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DEMARCATIONSERVICES_FETCHER, id);
        if (fetcher != null) {
            return (DemarcationServicesFetcher) fetcher;
        }
        if ((fetcher = getDemarcationServicesFetcherForLinkId(id)) != null) {
            return (DemarcationServicesFetcher) addFetcher(Constants.DEMARCATIONSERVICES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DemarcationService> getAllDemarcationServices() throws RestException {
        java.util.List<DemarcationService> allObjs = new ArrayList<DemarcationService>();

        return allObjs;
    }

    public static java.util.List<DemarcationServicesFetcher> getAllDemarcationServicesFetchers() throws RestException {
        java.util.List<DemarcationServicesFetcher> allObjs = new ArrayList<DemarcationServicesFetcher>();
        return allObjs;
    }
    public static DeploymentFailure getDeploymentFailureById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DeploymentFailure obj = null;
            obj = new DeploymentFailure();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DEPLOYMENTFAILURE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDeploymentFailureId(String id) throws RestException {
        DeploymentFailure obj = getObject(Constants.DEPLOYMENTFAILURE, id);
        if (obj == null) {
            obj = getDeploymentFailureById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDeploymentFailureId(String id) throws RestException {
        DeploymentFailure obj = getObject(Constants.DEPLOYMENTFAILURE, id);
        if (obj == null) {
            obj = getDeploymentFailureById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDeploymentFailureId(String id) throws RestException {
        DeploymentFailure obj = getObject(Constants.DEPLOYMENTFAILURE, id);
        if (obj == null) {
            obj = getDeploymentFailureById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DeploymentFailure> getDeploymentFailuresForFetcherId(String id) throws RestException {
        DeploymentFailuresFetcher fetcher = getDeploymentFailuresFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DEPLOYMENTFAILURE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DeploymentFailure>();
    }

    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, id);
        if (fetcher != null) {
            return (DeploymentFailuresFetcher) fetcher;
        }
        if ((fetcher = getDeploymentFailuresFetcherForAggregatedDomainId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForBGPNeighborId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForBridgeInterfaceId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForDomainId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForEgressProfileId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForEnterpriseId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForGatewayId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForIngressProfileId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForL2DomainId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForNetconfGatewayId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForRedundancyGroupId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForStaticRouteId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForSubnetId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDeploymentFailuresFetcherForVPortId(id)) != null) {
            return (DeploymentFailuresFetcher) addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DeploymentFailure> getAllDeploymentFailures() throws RestException {
        java.util.List<DeploymentFailure> allObjs = new ArrayList<DeploymentFailure>();

        return allObjs;
    }

    public static java.util.List<DeploymentFailuresFetcher> getAllDeploymentFailuresFetchers() throws RestException {
        java.util.List<DeploymentFailuresFetcher> allObjs = new ArrayList<DeploymentFailuresFetcher>();
        return allObjs;
    }
    public static Destinationurl getDestinationurlById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Destinationurl obj = null;
            obj = new Destinationurl();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DESTINATIONURL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDestinationurlId(String id) throws RestException {
        Destinationurl obj = getObject(Constants.DESTINATIONURL, id);
        if (obj == null) {
            obj = getDestinationurlById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDestinationurlId(String id) throws RestException {
        Destinationurl obj = getObject(Constants.DESTINATIONURL, id);
        if (obj == null) {
            obj = getDestinationurlById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDestinationurlId(String id) throws RestException {
        Destinationurl obj = getObject(Constants.DESTINATIONURL, id);
        if (obj == null) {
            obj = getDestinationurlById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Destinationurl> getDestinationurlsForFetcherId(String id) throws RestException {
        DestinationurlsFetcher fetcher = getDestinationurlsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DESTINATIONURL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Destinationurl>();
    }

    public static DestinationurlsFetcher getDestinationurlsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DESTINATIONURLS_FETCHER, id);
        if (fetcher != null) {
            return (DestinationurlsFetcher) fetcher;
        }
        if ((fetcher = getDestinationurlsFetcherForTierId(id)) != null) {
            return (DestinationurlsFetcher) addFetcher(Constants.DESTINATIONURLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Destinationurl> getAllDestinationurls() throws RestException {
        java.util.List<Destinationurl> allObjs = new ArrayList<Destinationurl>();

        return allObjs;
    }

    public static java.util.List<DestinationurlsFetcher> getAllDestinationurlsFetchers() throws RestException {
        java.util.List<DestinationurlsFetcher> allObjs = new ArrayList<DestinationurlsFetcher>();
        return allObjs;
    }
    public static DHCPOption getDHCPOptionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DHCPOption obj = null;
            obj = new DHCPOption();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DHCPOPTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForDHCPOptionId(String id) throws RestException {
        DHCPOption obj = getObject(Constants.DHCPOPTION, id);
        if (obj == null) {
            obj = getDHCPOptionById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDHCPOptionId(String id) throws RestException {
        DHCPOption obj = getObject(Constants.DHCPOPTION, id);
        if (obj == null) {
            obj = getDHCPOptionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDHCPOptionId(String id) throws RestException {
        DHCPOption obj = getObject(Constants.DHCPOPTION, id);
        if (obj == null) {
            obj = getDHCPOptionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDHCPOptionId(String id) throws RestException {
        DHCPOption obj = getObject(Constants.DHCPOPTION, id);
        if (obj == null) {
            obj = getDHCPOptionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DHCPOption> getDHCPOptionsForFetcherId(String id) throws RestException {
        DHCPOptionsFetcher fetcher = getDHCPOptionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DHCPOPTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DHCPOption>();
    }

    public static DHCPOptionsFetcher getDHCPOptionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DHCPOPTIONS_FETCHER, id);
        if (fetcher != null) {
            return (DHCPOptionsFetcher) fetcher;
        }
        if ((fetcher = getDHCPOptionsFetcherForAggregatedDomainId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForBridgeInterfaceId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForContainerInterfaceId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForDomainId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForHostInterfaceId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForL2DomainId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForSharedNetworkResourceId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForSubnetId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForVMInterfaceId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForVPortId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPOptionsFetcherForZoneId(id)) != null) {
            return (DHCPOptionsFetcher) addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DHCPOption> getAllDHCPOptions() throws RestException {
        java.util.List<DHCPOption> allObjs = new ArrayList<DHCPOption>();

        return allObjs;
    }

    public static java.util.List<DHCPOptionsFetcher> getAllDHCPOptionsFetchers() throws RestException {
        java.util.List<DHCPOptionsFetcher> allObjs = new ArrayList<DHCPOptionsFetcher>();
        return allObjs;
    }
    public static DHCPv6Option getDHCPv6OptionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DHCPv6Option obj = null;
            obj = new DHCPv6Option();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DHCPV6OPTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForDHCPv6OptionId(String id) throws RestException {
        DHCPv6Option obj = getObject(Constants.DHCPV6OPTION, id);
        if (obj == null) {
            obj = getDHCPv6OptionById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDHCPv6OptionId(String id) throws RestException {
        DHCPv6Option obj = getObject(Constants.DHCPV6OPTION, id);
        if (obj == null) {
            obj = getDHCPv6OptionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDHCPv6OptionId(String id) throws RestException {
        DHCPv6Option obj = getObject(Constants.DHCPV6OPTION, id);
        if (obj == null) {
            obj = getDHCPv6OptionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDHCPv6OptionId(String id) throws RestException {
        DHCPv6Option obj = getObject(Constants.DHCPV6OPTION, id);
        if (obj == null) {
            obj = getDHCPv6OptionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DHCPv6Option> getDHCPv6OptionsForFetcherId(String id) throws RestException {
        DHCPv6OptionsFetcher fetcher = getDHCPv6OptionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DHCPV6OPTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DHCPv6Option>();
    }

    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DHCPV6OPTIONS_FETCHER, id);
        if (fetcher != null) {
            return (DHCPv6OptionsFetcher) fetcher;
        }
        if ((fetcher = getDHCPv6OptionsFetcherForBridgeInterfaceId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForContainerInterfaceId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForDomainId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForHostInterfaceId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForL2DomainId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForSubnetId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForVMInterfaceId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForVPortId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDHCPv6OptionsFetcherForZoneId(id)) != null) {
            return (DHCPv6OptionsFetcher) addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DHCPv6Option> getAllDHCPv6Options() throws RestException {
        java.util.List<DHCPv6Option> allObjs = new ArrayList<DHCPv6Option>();

        return allObjs;
    }

    public static java.util.List<DHCPv6OptionsFetcher> getAllDHCPv6OptionsFetchers() throws RestException {
        java.util.List<DHCPv6OptionsFetcher> allObjs = new ArrayList<DHCPv6OptionsFetcher>();
        return allObjs;
    }
    public static DiskStat getDiskStatById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DiskStat obj = null;
            obj = new DiskStat();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DISKSTAT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDiskStatId(String id) throws RestException {
        DiskStat obj = getObject(Constants.DISKSTAT, id);
        if (obj == null) {
            obj = getDiskStatById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDiskStatId(String id) throws RestException {
        DiskStat obj = getObject(Constants.DISKSTAT, id);
        if (obj == null) {
            obj = getDiskStatById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDiskStatId(String id) throws RestException {
        DiskStat obj = getObject(Constants.DISKSTAT, id);
        if (obj == null) {
            obj = getDiskStatById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DiskStat> getDiskStatsForFetcherId(String id) throws RestException {
        DiskStatsFetcher fetcher = getDiskStatsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DISKSTAT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DiskStat>();
    }

    public static DiskStatsFetcher getDiskStatsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DISKSTATS_FETCHER, id);
        if (fetcher != null) {
            return (DiskStatsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<DiskStat> getAllDiskStats() throws RestException {
        java.util.List<DiskStat> allObjs = new ArrayList<DiskStat>();

        return allObjs;
    }

    public static java.util.List<DiskStatsFetcher> getAllDiskStatsFetchers() throws RestException {
        java.util.List<DiskStatsFetcher> allObjs = new ArrayList<DiskStatsFetcher>();
        return allObjs;
    }
    public static Domain getDomainById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Domain obj = null;
            obj = new Domain();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOMAIN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AggregatedDomainsFetcher getAggregatedDomainsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            AggregatedDomainsFetcher fetcher = obj.getAggregatedDomains();
            return addFetcher(Constants.AGGREGATEDDOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AlarmsFetcher getAlarmsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationsFetcher getApplicationsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementbindingsFetcher getApplicationperformancemanagementbindingsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementbindingsFetcher fetcher = obj.getApplicationperformancemanagementbindings();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BridgeInterfacesFetcher getBridgeInterfacesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            BridgeInterfacesFetcher fetcher = obj.getBridgeInterfaces();
            return addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainTemplatesFetcher getDomainTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DomainTemplatesFetcher fetcher = obj.getDomainTemplates();
            return addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EgressAdvFwdTemplatesFetcher fetcher = obj.getEgressAdvFwdTemplates();
            return addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAuditACLEntryTemplatesFetcher getEgressAuditACLEntryTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EgressAuditACLEntryTemplatesFetcher fetcher = obj.getEgressAuditACLEntryTemplates();
            return addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAuditACLTemplatesFetcher getEgressAuditACLTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EgressAuditACLTemplatesFetcher fetcher = obj.getEgressAuditACLTemplates();
            return addFetcher(Constants.EGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainFIPAclTemplatesFetcher getDomainFIPAclTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            DomainFIPAclTemplatesFetcher fetcher = obj.getDomainFIPAclTemplates();
            return addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FirewallAclsFetcher getFirewallAclsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            FirewallAclsFetcher fetcher = obj.getFirewallAcls();
            return addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FloatingIpsFetcher getFloatingIpsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            FloatingIpsFetcher fetcher = obj.getFloatingIps();
            return addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ForwardingPathListsFetcher getForwardingPathListsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ForwardingPathListsFetcher fetcher = obj.getForwardingPathLists();
            return addFetcher(Constants.FORWARDINGPATHLISTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HostInterfacesFetcher getHostInterfacesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            HostInterfacesFetcher fetcher = obj.getHostInterfaces();
            return addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            IngressAdvFwdTemplatesFetcher fetcher = obj.getIngressAdvFwdTemplates();
            return addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAuditACLEntryTemplatesFetcher getIngressAuditACLEntryTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            IngressAuditACLEntryTemplatesFetcher fetcher = obj.getIngressAuditACLEntryTemplates();
            return addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAuditACLTemplatesFetcher getIngressAuditACLTemplatesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            IngressAuditACLTemplatesFetcher fetcher = obj.getIngressAuditACLTemplates();
            return addFetcher(Constants.INGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LinksFetcher getLinksFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            LinksFetcher fetcher = obj.getLinks();
            return addFetcher(Constants.LINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MirrorDestinationGroupsFetcher getMirrorDestinationGroupsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            MirrorDestinationGroupsFetcher fetcher = obj.getMirrorDestinationGroups();
            return addFetcher(Constants.MIRRORDESTINATIONGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetconfGatewaysFetcher getNetconfGatewaysFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            NetconfGatewaysFetcher fetcher = obj.getNetconfGateways();
            return addFetcher(Constants.NETCONFGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkMacroGroupsFetcher getNetworkMacroGroupsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            NetworkMacroGroupsFetcher fetcher = obj.getNetworkMacroGroups();
            return addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceBindingsFetcher getNetworkPerformanceBindingsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            NetworkPerformanceBindingsFetcher fetcher = obj.getNetworkPerformanceBindings();
            return addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            NSGatewaySummariesFetcher fetcher = obj.getNSGatewaySummaries();
            return addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGRoutingPolicyBindingsFetcher getNSGRoutingPolicyBindingsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            NSGRoutingPolicyBindingsFetcher fetcher = obj.getNSGRoutingPolicyBindings();
            return addFetcher(Constants.NSGROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OSPFInstancesFetcher getOSPFInstancesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            OSPFInstancesFetcher fetcher = obj.getOSPFInstances();
            return addFetcher(Constants.OSPFINSTANCES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PGExpressionsFetcher getPGExpressionsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            PGExpressionsFetcher fetcher = obj.getPGExpressions();
            return addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            RoutingPoliciesFetcher fetcher = obj.getRoutingPolicies();
            return addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPolicyBindingsFetcher getRoutingPolicyBindingsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            RoutingPolicyBindingsFetcher fetcher = obj.getRoutingPolicyBindings();
            return addFetcher(Constants.ROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SPATSourcesPoolsFetcher getSPATSourcesPoolsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            SPATSourcesPoolsFetcher fetcher = obj.getSPATSourcesPools();
            return addFetcher(Constants.SPATSOURCESPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkRDsFetcher getUplinkRDsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            UplinkRDsFetcher fetcher = obj.getUplinkRDs();
            return addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VirtualFirewallRulesFetcher fetcher = obj.getVirtualFirewallRules();
            return addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFDomainMappingsFetcher getVNFDomainMappingsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VNFDomainMappingsFetcher fetcher = obj.getVNFDomainMappings();
            return addFetcher(Constants.VNFDOMAINMAPPINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPNConnectionsFetcher getVPNConnectionsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VPNConnectionsFetcher fetcher = obj.getVPNConnections();
            return addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZonesFetcher getZonesFetcherForDomainId(String id) throws RestException {
        Domain obj = getObject(Constants.DOMAIN, id);
        if (obj == null) {
            obj = getDomainById(id);
        }

        if (obj != null) {
            ZonesFetcher fetcher = obj.getZones();
            return addFetcher(Constants.ZONES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Domain> getDomainsForFetcherId(String id) throws RestException {
        DomainsFetcher fetcher = getDomainsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOMAIN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Domain>();
    }

    public static DomainsFetcher getDomainsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOMAINS_FETCHER, id);
        if (fetcher != null) {
            return (DomainsFetcher) fetcher;
        }
        if ((fetcher = getDomainsFetcherForAggregatedDomainId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForDomainId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForDomainTemplateId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForEnterpriseId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForFirewallAclId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForGatewayId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForMeId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainsFetcherForNetconfGatewayId(id)) != null) {
            return (DomainsFetcher) addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Domain> getAllDomains() throws RestException {
        java.util.List<Domain> allObjs = new ArrayList<Domain>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainsFetcher fetcher = getDomainsFetcherForMeId(session.getId());
            java.util.List<Domain> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<DomainsFetcher> getAllDomainsFetchers() throws RestException {
        java.util.List<DomainsFetcher> allObjs = new ArrayList<DomainsFetcher>();
        return allObjs;
    }
    public static DomainKindSummary getDomainKindSummaryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainKindSummary obj = null;
            obj = new DomainKindSummary();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOMAINKINDSUMMARY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDomainKindSummaryId(String id) throws RestException {
        DomainKindSummary obj = getObject(Constants.DOMAINKINDSUMMARY, id);
        if (obj == null) {
            obj = getDomainKindSummaryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDomainKindSummaryId(String id) throws RestException {
        DomainKindSummary obj = getObject(Constants.DOMAINKINDSUMMARY, id);
        if (obj == null) {
            obj = getDomainKindSummaryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDomainKindSummaryId(String id) throws RestException {
        DomainKindSummary obj = getObject(Constants.DOMAINKINDSUMMARY, id);
        if (obj == null) {
            obj = getDomainKindSummaryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DomainKindSummary> getDomainKindSummariesForFetcherId(String id) throws RestException {
        DomainKindSummariesFetcher fetcher = getDomainKindSummariesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOMAINKINDSUMMARY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DomainKindSummary>();
    }

    public static DomainKindSummariesFetcher getDomainKindSummariesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOMAINKINDSUMMARIES_FETCHER, id);
        if (fetcher != null) {
            return (DomainKindSummariesFetcher) fetcher;
        }
        if ((fetcher = getDomainKindSummariesFetcherForEnterpriseId(id)) != null) {
            return (DomainKindSummariesFetcher) addFetcher(Constants.DOMAINKINDSUMMARIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DomainKindSummary> getAllDomainKindSummaries() throws RestException {
        java.util.List<DomainKindSummary> allObjs = new ArrayList<DomainKindSummary>();

        return allObjs;
    }

    public static java.util.List<DomainKindSummariesFetcher> getAllDomainKindSummariesFetchers() throws RestException {
        java.util.List<DomainKindSummariesFetcher> allObjs = new ArrayList<DomainKindSummariesFetcher>();
        return allObjs;
    }
    public static DomainTemplate getDomainTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainTemplate obj = null;
            obj = new DomainTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOMAINTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DomainsFetcher getDomainsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            EgressAdvFwdTemplatesFetcher fetcher = obj.getEgressAdvFwdTemplates();
            return addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainFIPAclTemplatesFetcher getDomainFIPAclTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            DomainFIPAclTemplatesFetcher fetcher = obj.getDomainFIPAclTemplates();
            return addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            IngressAdvFwdTemplatesFetcher fetcher = obj.getIngressAdvFwdTemplates();
            return addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PGExpressionTemplatesFetcher getPGExpressionTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            PGExpressionTemplatesFetcher fetcher = obj.getPGExpressionTemplates();
            return addFetcher(Constants.PGEXPRESSIONTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupTemplatesFetcher getPolicyGroupTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            PolicyGroupTemplatesFetcher fetcher = obj.getPolicyGroupTemplates();
            return addFetcher(Constants.POLICYGROUPTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetTemplatesFetcher getRedirectionTargetTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            RedirectionTargetTemplatesFetcher fetcher = obj.getRedirectionTargetTemplates();
            return addFetcher(Constants.REDIRECTIONTARGETTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetTemplatesFetcher getSubnetTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            SubnetTemplatesFetcher fetcher = obj.getSubnetTemplates();
            return addFetcher(Constants.SUBNETTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZoneTemplatesFetcher getZoneTemplatesFetcherForDomainTemplateId(String id) throws RestException {
        DomainTemplate obj = getObject(Constants.DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getDomainTemplateById(id);
        }

        if (obj != null) {
            ZoneTemplatesFetcher fetcher = obj.getZoneTemplates();
            return addFetcher(Constants.ZONETEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DomainTemplate> getDomainTemplatesForFetcherId(String id) throws RestException {
        DomainTemplatesFetcher fetcher = getDomainTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOMAINTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DomainTemplate>();
    }

    public static DomainTemplatesFetcher getDomainTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOMAINTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (DomainTemplatesFetcher) fetcher;
        }
        if ((fetcher = getDomainTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (DomainTemplatesFetcher) addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainTemplatesFetcherForDomainId(id)) != null) {
            return (DomainTemplatesFetcher) addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainTemplatesFetcherForEnterpriseId(id)) != null) {
            return (DomainTemplatesFetcher) addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DomainTemplate> getAllDomainTemplates() throws RestException {
        java.util.List<DomainTemplate> allObjs = new ArrayList<DomainTemplate>();

        return allObjs;
    }

    public static java.util.List<DomainTemplatesFetcher> getAllDomainTemplatesFetchers() throws RestException {
        java.util.List<DomainTemplatesFetcher> allObjs = new ArrayList<DomainTemplatesFetcher>();
        return allObjs;
    }
    public static DSCPForwardingClassMapping getDSCPForwardingClassMappingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DSCPForwardingClassMapping obj = null;
            obj = new DSCPForwardingClassMapping();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DSCPFORWARDINGCLASSMAPPING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDSCPForwardingClassMappingId(String id) throws RestException {
        DSCPForwardingClassMapping obj = getObject(Constants.DSCPFORWARDINGCLASSMAPPING, id);
        if (obj == null) {
            obj = getDSCPForwardingClassMappingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDSCPForwardingClassMappingId(String id) throws RestException {
        DSCPForwardingClassMapping obj = getObject(Constants.DSCPFORWARDINGCLASSMAPPING, id);
        if (obj == null) {
            obj = getDSCPForwardingClassMappingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDSCPForwardingClassMappingId(String id) throws RestException {
        DSCPForwardingClassMapping obj = getObject(Constants.DSCPFORWARDINGCLASSMAPPING, id);
        if (obj == null) {
            obj = getDSCPForwardingClassMappingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DSCPForwardingClassMapping> getDSCPForwardingClassMappingsForFetcherId(String id) throws RestException {
        DSCPForwardingClassMappingsFetcher fetcher = getDSCPForwardingClassMappingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DSCPFORWARDINGCLASSMAPPING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DSCPForwardingClassMapping>();
    }

    public static DSCPForwardingClassMappingsFetcher getDSCPForwardingClassMappingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DSCPFORWARDINGCLASSMAPPINGS_FETCHER, id);
        if (fetcher != null) {
            return (DSCPForwardingClassMappingsFetcher) fetcher;
        }
        if ((fetcher = getDSCPForwardingClassMappingsFetcherForDSCPForwardingClassTableId(id)) != null) {
            return (DSCPForwardingClassMappingsFetcher) addFetcher(Constants.DSCPFORWARDINGCLASSMAPPINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DSCPForwardingClassMapping> getAllDSCPForwardingClassMappings() throws RestException {
        java.util.List<DSCPForwardingClassMapping> allObjs = new ArrayList<DSCPForwardingClassMapping>();

        return allObjs;
    }

    public static java.util.List<DSCPForwardingClassMappingsFetcher> getAllDSCPForwardingClassMappingsFetchers() throws RestException {
        java.util.List<DSCPForwardingClassMappingsFetcher> allObjs = new ArrayList<DSCPForwardingClassMappingsFetcher>();
        return allObjs;
    }
    public static DSCPForwardingClassTable getDSCPForwardingClassTableById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DSCPForwardingClassTable obj = null;
            obj = new DSCPForwardingClassTable();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DSCPFORWARDINGCLASSTABLE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DSCPForwardingClassMappingsFetcher getDSCPForwardingClassMappingsFetcherForDSCPForwardingClassTableId(String id) throws RestException {
        DSCPForwardingClassTable obj = getObject(Constants.DSCPFORWARDINGCLASSTABLE, id);
        if (obj == null) {
            obj = getDSCPForwardingClassTableById(id);
        }

        if (obj != null) {
            DSCPForwardingClassMappingsFetcher fetcher = obj.getDSCPForwardingClassMappings();
            return addFetcher(Constants.DSCPFORWARDINGCLASSMAPPINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDSCPForwardingClassTableId(String id) throws RestException {
        DSCPForwardingClassTable obj = getObject(Constants.DSCPFORWARDINGCLASSTABLE, id);
        if (obj == null) {
            obj = getDSCPForwardingClassTableById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDSCPForwardingClassTableId(String id) throws RestException {
        DSCPForwardingClassTable obj = getObject(Constants.DSCPFORWARDINGCLASSTABLE, id);
        if (obj == null) {
            obj = getDSCPForwardingClassTableById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDSCPForwardingClassTableId(String id) throws RestException {
        DSCPForwardingClassTable obj = getObject(Constants.DSCPFORWARDINGCLASSTABLE, id);
        if (obj == null) {
            obj = getDSCPForwardingClassTableById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DSCPForwardingClassTable> getDSCPForwardingClassTablesForFetcherId(String id) throws RestException {
        DSCPForwardingClassTablesFetcher fetcher = getDSCPForwardingClassTablesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DSCPFORWARDINGCLASSTABLE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DSCPForwardingClassTable>();
    }

    public static DSCPForwardingClassTablesFetcher getDSCPForwardingClassTablesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DSCPFORWARDINGCLASSTABLES_FETCHER, id);
        if (fetcher != null) {
            return (DSCPForwardingClassTablesFetcher) fetcher;
        }
        if ((fetcher = getDSCPForwardingClassTablesFetcherForEnterpriseId(id)) != null) {
            return (DSCPForwardingClassTablesFetcher) addFetcher(Constants.DSCPFORWARDINGCLASSTABLES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DSCPForwardingClassTable> getAllDSCPForwardingClassTables() throws RestException {
        java.util.List<DSCPForwardingClassTable> allObjs = new ArrayList<DSCPForwardingClassTable>();

        return allObjs;
    }

    public static java.util.List<DSCPForwardingClassTablesFetcher> getAllDSCPForwardingClassTablesFetchers() throws RestException {
        java.util.List<DSCPForwardingClassTablesFetcher> allObjs = new ArrayList<DSCPForwardingClassTablesFetcher>();
        return allObjs;
    }
    public static DSCPRemarkingPolicy getDSCPRemarkingPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DSCPRemarkingPolicy obj = null;
            obj = new DSCPRemarkingPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DSCPREMARKINGPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDSCPRemarkingPolicyId(String id) throws RestException {
        DSCPRemarkingPolicy obj = getObject(Constants.DSCPREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDSCPRemarkingPolicyId(String id) throws RestException {
        DSCPRemarkingPolicy obj = getObject(Constants.DSCPREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDSCPRemarkingPolicyId(String id) throws RestException {
        DSCPRemarkingPolicy obj = getObject(Constants.DSCPREMARKINGPOLICY, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DSCPRemarkingPolicy> getDSCPRemarkingPoliciesForFetcherId(String id) throws RestException {
        DSCPRemarkingPoliciesFetcher fetcher = getDSCPRemarkingPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DSCPREMARKINGPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DSCPRemarkingPolicy>();
    }

    public static DSCPRemarkingPoliciesFetcher getDSCPRemarkingPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DSCPREMARKINGPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (DSCPRemarkingPoliciesFetcher) fetcher;
        }
        if ((fetcher = getDSCPRemarkingPoliciesFetcherForDSCPRemarkingPolicyTableId(id)) != null) {
            return (DSCPRemarkingPoliciesFetcher) addFetcher(Constants.DSCPREMARKINGPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DSCPRemarkingPolicy> getAllDSCPRemarkingPolicies() throws RestException {
        java.util.List<DSCPRemarkingPolicy> allObjs = new ArrayList<DSCPRemarkingPolicy>();

        return allObjs;
    }

    public static java.util.List<DSCPRemarkingPoliciesFetcher> getAllDSCPRemarkingPoliciesFetchers() throws RestException {
        java.util.List<DSCPRemarkingPoliciesFetcher> allObjs = new ArrayList<DSCPRemarkingPoliciesFetcher>();
        return allObjs;
    }
    public static DSCPRemarkingPolicyTable getDSCPRemarkingPolicyTableById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DSCPRemarkingPolicyTable obj = null;
            obj = new DSCPRemarkingPolicyTable();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DSCPREMARKINGPOLICYTABLE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DSCPRemarkingPoliciesFetcher getDSCPRemarkingPoliciesFetcherForDSCPRemarkingPolicyTableId(String id) throws RestException {
        DSCPRemarkingPolicyTable obj = getObject(Constants.DSCPREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            DSCPRemarkingPoliciesFetcher fetcher = obj.getDSCPRemarkingPolicies();
            return addFetcher(Constants.DSCPREMARKINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDSCPRemarkingPolicyTableId(String id) throws RestException {
        DSCPRemarkingPolicyTable obj = getObject(Constants.DSCPREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDSCPRemarkingPolicyTableId(String id) throws RestException {
        DSCPRemarkingPolicyTable obj = getObject(Constants.DSCPREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDSCPRemarkingPolicyTableId(String id) throws RestException {
        DSCPRemarkingPolicyTable obj = getObject(Constants.DSCPREMARKINGPOLICYTABLE, id);
        if (obj == null) {
            obj = getDSCPRemarkingPolicyTableById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DSCPRemarkingPolicyTable> getDSCPRemarkingPolicyTablesForFetcherId(String id) throws RestException {
        DSCPRemarkingPolicyTablesFetcher fetcher = getDSCPRemarkingPolicyTablesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DSCPREMARKINGPOLICYTABLE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DSCPRemarkingPolicyTable>();
    }

    public static DSCPRemarkingPolicyTablesFetcher getDSCPRemarkingPolicyTablesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DSCPREMARKINGPOLICYTABLES_FETCHER, id);
        if (fetcher != null) {
            return (DSCPRemarkingPolicyTablesFetcher) fetcher;
        }
        if ((fetcher = getDSCPRemarkingPolicyTablesFetcherForEnterpriseId(id)) != null) {
            return (DSCPRemarkingPolicyTablesFetcher) addFetcher(Constants.DSCPREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDSCPRemarkingPolicyTablesFetcherForMeId(id)) != null) {
            return (DSCPRemarkingPolicyTablesFetcher) addFetcher(Constants.DSCPREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DSCPRemarkingPolicyTable> getAllDSCPRemarkingPolicyTables() throws RestException {
        java.util.List<DSCPRemarkingPolicyTable> allObjs = new ArrayList<DSCPRemarkingPolicyTable>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            DSCPRemarkingPolicyTablesFetcher fetcher = getDSCPRemarkingPolicyTablesFetcherForMeId(session.getId());
            java.util.List<DSCPRemarkingPolicyTable> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<DSCPRemarkingPolicyTablesFetcher> getAllDSCPRemarkingPolicyTablesFetchers() throws RestException {
        java.util.List<DSCPRemarkingPolicyTablesFetcher> allObjs = new ArrayList<DSCPRemarkingPolicyTablesFetcher>();
        return allObjs;
    }
    public static DUCGroup getDUCGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DUCGroup obj = null;
            obj = new DUCGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DUCGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDUCGroupId(String id) throws RestException {
        DUCGroup obj = getObject(Constants.DUCGROUP, id);
        if (obj == null) {
            obj = getDUCGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDUCGroupId(String id) throws RestException {
        DUCGroup obj = getObject(Constants.DUCGROUP, id);
        if (obj == null) {
            obj = getDUCGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForDUCGroupId(String id) throws RestException {
        DUCGroup obj = getObject(Constants.DUCGROUP, id);
        if (obj == null) {
            obj = getDUCGroupById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDUCGroupId(String id) throws RestException {
        DUCGroup obj = getObject(Constants.DUCGROUP, id);
        if (obj == null) {
            obj = getDUCGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DUCGroup> getDUCGroupsForFetcherId(String id) throws RestException {
        DUCGroupsFetcher fetcher = getDUCGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DUCGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DUCGroup>();
    }

    public static DUCGroupsFetcher getDUCGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DUCGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (DUCGroupsFetcher) fetcher;
        }
        if ((fetcher = getDUCGroupsFetcherForMeId(id)) != null) {
            return (DUCGroupsFetcher) addFetcher(Constants.DUCGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DUCGroup> getAllDUCGroups() throws RestException {
        java.util.List<DUCGroup> allObjs = new ArrayList<DUCGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            DUCGroupsFetcher fetcher = getDUCGroupsFetcherForMeId(session.getId());
            java.util.List<DUCGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<DUCGroupsFetcher> getAllDUCGroupsFetchers() throws RestException {
        java.util.List<DUCGroupsFetcher> allObjs = new ArrayList<DUCGroupsFetcher>();
        return allObjs;
    }
    public static DUCGroupBinding getDUCGroupBindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DUCGroupBinding obj = null;
            obj = new DUCGroupBinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DUCGROUPBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDUCGroupBindingId(String id) throws RestException {
        DUCGroupBinding obj = getObject(Constants.DUCGROUPBINDING, id);
        if (obj == null) {
            obj = getDUCGroupBindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDUCGroupBindingId(String id) throws RestException {
        DUCGroupBinding obj = getObject(Constants.DUCGROUPBINDING, id);
        if (obj == null) {
            obj = getDUCGroupBindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDUCGroupBindingId(String id) throws RestException {
        DUCGroupBinding obj = getObject(Constants.DUCGROUPBINDING, id);
        if (obj == null) {
            obj = getDUCGroupBindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DUCGroupBinding> getDUCGroupBindingsForFetcherId(String id) throws RestException {
        DUCGroupBindingsFetcher fetcher = getDUCGroupBindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DUCGROUPBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DUCGroupBinding>();
    }

    public static DUCGroupBindingsFetcher getDUCGroupBindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DUCGROUPBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (DUCGroupBindingsFetcher) fetcher;
        }
        if ((fetcher = getDUCGroupBindingsFetcherForNSGGroupId(id)) != null) {
            return (DUCGroupBindingsFetcher) addFetcher(Constants.DUCGROUPBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DUCGroupBinding> getAllDUCGroupBindings() throws RestException {
        java.util.List<DUCGroupBinding> allObjs = new ArrayList<DUCGroupBinding>();

        return allObjs;
    }

    public static java.util.List<DUCGroupBindingsFetcher> getAllDUCGroupBindingsFetchers() throws RestException {
        java.util.List<DUCGroupBindingsFetcher> allObjs = new ArrayList<DUCGroupBindingsFetcher>();
        return allObjs;
    }
    public static VCenterEAMConfig getVCenterEAMConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterEAMConfig obj = null;
            obj = new VCenterEAMConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTEREAMCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterEAMConfigId(String id) throws RestException {
        VCenterEAMConfig obj = getObject(Constants.VCENTEREAMCONFIG, id);
        if (obj == null) {
            obj = getVCenterEAMConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterEAMConfigId(String id) throws RestException {
        VCenterEAMConfig obj = getObject(Constants.VCENTEREAMCONFIG, id);
        if (obj == null) {
            obj = getVCenterEAMConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterEAMConfigId(String id) throws RestException {
        VCenterEAMConfig obj = getObject(Constants.VCENTEREAMCONFIG, id);
        if (obj == null) {
            obj = getVCenterEAMConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenterEAMConfig> getVCenterEAMConfigsForFetcherId(String id) throws RestException {
        VCenterEAMConfigsFetcher fetcher = getVCenterEAMConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTEREAMCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenterEAMConfig>();
    }

    public static VCenterEAMConfigsFetcher getVCenterEAMConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTEREAMCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (VCenterEAMConfigsFetcher) fetcher;
        }
        if ((fetcher = getVCenterEAMConfigsFetcherForMeId(id)) != null) {
            return (VCenterEAMConfigsFetcher) addFetcher(Constants.VCENTEREAMCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenterEAMConfig> getAllVCenterEAMConfigs() throws RestException {
        java.util.List<VCenterEAMConfig> allObjs = new ArrayList<VCenterEAMConfig>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterEAMConfigsFetcher fetcher = getVCenterEAMConfigsFetcherForMeId(session.getId());
            java.util.List<VCenterEAMConfig> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VCenterEAMConfigsFetcher> getAllVCenterEAMConfigsFetchers() throws RestException {
        java.util.List<VCenterEAMConfigsFetcher> allObjs = new ArrayList<VCenterEAMConfigsFetcher>();
        return allObjs;
    }
    public static EgressACLEntryTemplate getEgressACLEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressACLEntryTemplate obj = null;
            obj = new EgressACLEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSACLENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressACLEntryTemplateId(String id) throws RestException {
        EgressACLEntryTemplate obj = getObject(Constants.EGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressACLEntryTemplateId(String id) throws RestException {
        EgressACLEntryTemplate obj = getObject(Constants.EGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressACLEntryTemplateId(String id) throws RestException {
        EgressACLEntryTemplate obj = getObject(Constants.EGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForEgressACLEntryTemplateId(String id) throws RestException {
        EgressACLEntryTemplate obj = getObject(Constants.EGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLEntryTemplateById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressACLEntryTemplate> getEgressACLEntryTemplatesForFetcherId(String id) throws RestException {
        EgressACLEntryTemplatesFetcher fetcher = getEgressACLEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSACLENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressACLEntryTemplate>();
    }

    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressACLEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressACLEntryTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForDomainId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForEgressACLTemplateId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForL2DomainId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForMeId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForMirrorDestinationId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLEntryTemplatesFetcherForVPortId(id)) != null) {
            return (EgressACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressACLEntryTemplate> getAllEgressACLEntryTemplates() throws RestException {
        java.util.List<EgressACLEntryTemplate> allObjs = new ArrayList<EgressACLEntryTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressACLEntryTemplatesFetcher fetcher = getEgressACLEntryTemplatesFetcherForMeId(session.getId());
            java.util.List<EgressACLEntryTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EgressACLEntryTemplatesFetcher> getAllEgressACLEntryTemplatesFetchers() throws RestException {
        java.util.List<EgressACLEntryTemplatesFetcher> allObjs = new ArrayList<EgressACLEntryTemplatesFetcher>();
        return allObjs;
    }
    public static EgressACLTemplate getEgressACLTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressACLTemplate obj = null;
            obj = new EgressACLTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSACLTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ContainersFetcher getContainersFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForEgressACLTemplateId(String id) throws RestException {
        EgressACLTemplate obj = getObject(Constants.EGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressACLTemplateById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressACLTemplate> getEgressACLTemplatesForFetcherId(String id) throws RestException {
        EgressACLTemplatesFetcher fetcher = getEgressACLTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSACLTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressACLTemplate>();
    }

    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressACLTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressACLTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLTemplatesFetcherForDomainId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLTemplatesFetcherForL2DomainId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressACLTemplatesFetcherForMeId(id)) != null) {
            return (EgressACLTemplatesFetcher) addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressACLTemplate> getAllEgressACLTemplates() throws RestException {
        java.util.List<EgressACLTemplate> allObjs = new ArrayList<EgressACLTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressACLTemplatesFetcher fetcher = getEgressACLTemplatesFetcherForMeId(session.getId());
            java.util.List<EgressACLTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EgressACLTemplatesFetcher> getAllEgressACLTemplatesFetchers() throws RestException {
        java.util.List<EgressACLTemplatesFetcher> allObjs = new ArrayList<EgressACLTemplatesFetcher>();
        return allObjs;
    }
    public static EgressAdvFwdEntryTemplate getEgressAdvFwdEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressAdvFwdEntryTemplate obj = null;
            obj = new EgressAdvFwdEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSADVFWDENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressAdvFwdEntryTemplateId(String id) throws RestException {
        EgressAdvFwdEntryTemplate obj = getObject(Constants.EGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressAdvFwdEntryTemplateId(String id) throws RestException {
        EgressAdvFwdEntryTemplate obj = getObject(Constants.EGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressAdvFwdEntryTemplateId(String id) throws RestException {
        EgressAdvFwdEntryTemplate obj = getObject(Constants.EGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressAdvFwdEntryTemplate> getEgressAdvFwdEntryTemplatesForFetcherId(String id) throws RestException {
        EgressAdvFwdEntryTemplatesFetcher fetcher = getEgressAdvFwdEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSADVFWDENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressAdvFwdEntryTemplate>();
    }

    public static EgressAdvFwdEntryTemplatesFetcher getEgressAdvFwdEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSADVFWDENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressAdvFwdEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressAdvFwdEntryTemplatesFetcherForEgressAdvFwdTemplateId(id)) != null) {
            return (EgressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAdvFwdEntryTemplatesFetcherForMeId(id)) != null) {
            return (EgressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressAdvFwdEntryTemplate> getAllEgressAdvFwdEntryTemplates() throws RestException {
        java.util.List<EgressAdvFwdEntryTemplate> allObjs = new ArrayList<EgressAdvFwdEntryTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressAdvFwdEntryTemplatesFetcher fetcher = getEgressAdvFwdEntryTemplatesFetcherForMeId(session.getId());
            java.util.List<EgressAdvFwdEntryTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EgressAdvFwdEntryTemplatesFetcher> getAllEgressAdvFwdEntryTemplatesFetchers() throws RestException {
        java.util.List<EgressAdvFwdEntryTemplatesFetcher> allObjs = new ArrayList<EgressAdvFwdEntryTemplatesFetcher>();
        return allObjs;
    }
    public static EgressAdvFwdTemplate getEgressAdvFwdTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressAdvFwdTemplate obj = null;
            obj = new EgressAdvFwdTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSADVFWDTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EgressAdvFwdEntryTemplatesFetcher getEgressAdvFwdEntryTemplatesFetcherForEgressAdvFwdTemplateId(String id) throws RestException {
        EgressAdvFwdTemplate obj = getObject(Constants.EGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            EgressAdvFwdEntryTemplatesFetcher fetcher = obj.getEgressAdvFwdEntryTemplates();
            return addFetcher(Constants.EGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressAdvFwdTemplateId(String id) throws RestException {
        EgressAdvFwdTemplate obj = getObject(Constants.EGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressAdvFwdTemplateId(String id) throws RestException {
        EgressAdvFwdTemplate obj = getObject(Constants.EGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressAdvFwdTemplateId(String id) throws RestException {
        EgressAdvFwdTemplate obj = getObject(Constants.EGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressAdvFwdTemplate> getEgressAdvFwdTemplatesForFetcherId(String id) throws RestException {
        EgressAdvFwdTemplatesFetcher fetcher = getEgressAdvFwdTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSADVFWDTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressAdvFwdTemplate>();
    }

    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressAdvFwdTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressAdvFwdTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (EgressAdvFwdTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAdvFwdTemplatesFetcherForDomainId(id)) != null) {
            return (EgressAdvFwdTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAdvFwdTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (EgressAdvFwdTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAdvFwdTemplatesFetcherForL2DomainId(id)) != null) {
            return (EgressAdvFwdTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAdvFwdTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (EgressAdvFwdTemplatesFetcher) addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressAdvFwdTemplate> getAllEgressAdvFwdTemplates() throws RestException {
        java.util.List<EgressAdvFwdTemplate> allObjs = new ArrayList<EgressAdvFwdTemplate>();

        return allObjs;
    }

    public static java.util.List<EgressAdvFwdTemplatesFetcher> getAllEgressAdvFwdTemplatesFetchers() throws RestException {
        java.util.List<EgressAdvFwdTemplatesFetcher> allObjs = new ArrayList<EgressAdvFwdTemplatesFetcher>();
        return allObjs;
    }
    public static EgressAuditACLEntryTemplate getEgressAuditACLEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressAuditACLEntryTemplate obj = null;
            obj = new EgressAuditACLEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSAUDITACLENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressAuditACLEntryTemplateId(String id) throws RestException {
        EgressAuditACLEntryTemplate obj = getObject(Constants.EGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressAuditACLEntryTemplateId(String id) throws RestException {
        EgressAuditACLEntryTemplate obj = getObject(Constants.EGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressAuditACLEntryTemplateId(String id) throws RestException {
        EgressAuditACLEntryTemplate obj = getObject(Constants.EGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressAuditACLEntryTemplate> getEgressAuditACLEntryTemplatesForFetcherId(String id) throws RestException {
        EgressAuditACLEntryTemplatesFetcher fetcher = getEgressAuditACLEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSAUDITACLENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressAuditACLEntryTemplate>();
    }

    public static EgressAuditACLEntryTemplatesFetcher getEgressAuditACLEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressAuditACLEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressAuditACLEntryTemplatesFetcherForDomainId(id)) != null) {
            return (EgressAuditACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAuditACLEntryTemplatesFetcherForEgressAuditACLTemplateId(id)) != null) {
            return (EgressAuditACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAuditACLEntryTemplatesFetcherForL2DomainId(id)) != null) {
            return (EgressAuditACLEntryTemplatesFetcher) addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressAuditACLEntryTemplate> getAllEgressAuditACLEntryTemplates() throws RestException {
        java.util.List<EgressAuditACLEntryTemplate> allObjs = new ArrayList<EgressAuditACLEntryTemplate>();

        return allObjs;
    }

    public static java.util.List<EgressAuditACLEntryTemplatesFetcher> getAllEgressAuditACLEntryTemplatesFetchers() throws RestException {
        java.util.List<EgressAuditACLEntryTemplatesFetcher> allObjs = new ArrayList<EgressAuditACLEntryTemplatesFetcher>();
        return allObjs;
    }
    public static EgressAuditACLTemplate getEgressAuditACLTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressAuditACLTemplate obj = null;
            obj = new EgressAuditACLTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSAUDITACLTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EgressAuditACLEntryTemplatesFetcher getEgressAuditACLEntryTemplatesFetcherForEgressAuditACLTemplateId(String id) throws RestException {
        EgressAuditACLTemplate obj = getObject(Constants.EGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLTemplateById(id);
        }

        if (obj != null) {
            EgressAuditACLEntryTemplatesFetcher fetcher = obj.getEgressAuditACLEntryTemplates();
            return addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressAuditACLTemplateId(String id) throws RestException {
        EgressAuditACLTemplate obj = getObject(Constants.EGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressAuditACLTemplateId(String id) throws RestException {
        EgressAuditACLTemplate obj = getObject(Constants.EGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressAuditACLTemplateId(String id) throws RestException {
        EgressAuditACLTemplate obj = getObject(Constants.EGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getEgressAuditACLTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressAuditACLTemplate> getEgressAuditACLTemplatesForFetcherId(String id) throws RestException {
        EgressAuditACLTemplatesFetcher fetcher = getEgressAuditACLTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSAUDITACLTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressAuditACLTemplate>();
    }

    public static EgressAuditACLTemplatesFetcher getEgressAuditACLTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSAUDITACLTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (EgressAuditACLTemplatesFetcher) fetcher;
        }
        if ((fetcher = getEgressAuditACLTemplatesFetcherForDomainId(id)) != null) {
            return (EgressAuditACLTemplatesFetcher) addFetcher(Constants.EGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressAuditACLTemplatesFetcherForL2DomainId(id)) != null) {
            return (EgressAuditACLTemplatesFetcher) addFetcher(Constants.EGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressAuditACLTemplate> getAllEgressAuditACLTemplates() throws RestException {
        java.util.List<EgressAuditACLTemplate> allObjs = new ArrayList<EgressAuditACLTemplate>();

        return allObjs;
    }

    public static java.util.List<EgressAuditACLTemplatesFetcher> getAllEgressAuditACLTemplatesFetchers() throws RestException {
        java.util.List<EgressAuditACLTemplatesFetcher> allObjs = new ArrayList<EgressAuditACLTemplatesFetcher>();
        return allObjs;
    }
    public static DomainFIPAclTemplateEntry getDomainFIPAclTemplateEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainFIPAclTemplateEntry obj = null;
            obj = new DomainFIPAclTemplateEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOMAINFIPACLTEMPLATEENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDomainFIPAclTemplateEntryId(String id) throws RestException {
        DomainFIPAclTemplateEntry obj = getObject(Constants.DOMAINFIPACLTEMPLATEENTRY, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateEntryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDomainFIPAclTemplateEntryId(String id) throws RestException {
        DomainFIPAclTemplateEntry obj = getObject(Constants.DOMAINFIPACLTEMPLATEENTRY, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateEntryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDomainFIPAclTemplateEntryId(String id) throws RestException {
        DomainFIPAclTemplateEntry obj = getObject(Constants.DOMAINFIPACLTEMPLATEENTRY, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateEntryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DomainFIPAclTemplateEntry> getDomainFIPAclTemplateEntriesForFetcherId(String id) throws RestException {
        DomainFIPAclTemplateEntriesFetcher fetcher = getDomainFIPAclTemplateEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOMAINFIPACLTEMPLATEENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DomainFIPAclTemplateEntry>();
    }

    public static DomainFIPAclTemplateEntriesFetcher getDomainFIPAclTemplateEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOMAINFIPACLTEMPLATEENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (DomainFIPAclTemplateEntriesFetcher) fetcher;
        }
        if ((fetcher = getDomainFIPAclTemplateEntriesFetcherForDomainFIPAclTemplateId(id)) != null) {
            return (DomainFIPAclTemplateEntriesFetcher) addFetcher(Constants.DOMAINFIPACLTEMPLATEENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DomainFIPAclTemplateEntry> getAllDomainFIPAclTemplateEntries() throws RestException {
        java.util.List<DomainFIPAclTemplateEntry> allObjs = new ArrayList<DomainFIPAclTemplateEntry>();

        return allObjs;
    }

    public static java.util.List<DomainFIPAclTemplateEntriesFetcher> getAllDomainFIPAclTemplateEntriesFetchers() throws RestException {
        java.util.List<DomainFIPAclTemplateEntriesFetcher> allObjs = new ArrayList<DomainFIPAclTemplateEntriesFetcher>();
        return allObjs;
    }
    public static DomainFIPAclTemplate getDomainFIPAclTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainFIPAclTemplate obj = null;
            obj = new DomainFIPAclTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.DOMAINFIPACLTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DomainFIPAclTemplateEntriesFetcher getDomainFIPAclTemplateEntriesFetcherForDomainFIPAclTemplateId(String id) throws RestException {
        DomainFIPAclTemplate obj = getObject(Constants.DOMAINFIPACLTEMPLATE, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateById(id);
        }

        if (obj != null) {
            DomainFIPAclTemplateEntriesFetcher fetcher = obj.getDomainFIPAclTemplateEntries();
            return addFetcher(Constants.DOMAINFIPACLTEMPLATEENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForDomainFIPAclTemplateId(String id) throws RestException {
        DomainFIPAclTemplate obj = getObject(Constants.DOMAINFIPACLTEMPLATE, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForDomainFIPAclTemplateId(String id) throws RestException {
        DomainFIPAclTemplate obj = getObject(Constants.DOMAINFIPACLTEMPLATE, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForDomainFIPAclTemplateId(String id) throws RestException {
        DomainFIPAclTemplate obj = getObject(Constants.DOMAINFIPACLTEMPLATE, id);
        if (obj == null) {
            obj = getDomainFIPAclTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<DomainFIPAclTemplate> getDomainFIPAclTemplatesForFetcherId(String id) throws RestException {
        DomainFIPAclTemplatesFetcher fetcher = getDomainFIPAclTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.DOMAINFIPACLTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<DomainFIPAclTemplate>();
    }

    public static DomainFIPAclTemplatesFetcher getDomainFIPAclTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (DomainFIPAclTemplatesFetcher) fetcher;
        }
        if ((fetcher = getDomainFIPAclTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (DomainFIPAclTemplatesFetcher) addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainFIPAclTemplatesFetcherForDomainId(id)) != null) {
            return (DomainFIPAclTemplatesFetcher) addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainFIPAclTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (DomainFIPAclTemplatesFetcher) addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getDomainFIPAclTemplatesFetcherForMeId(id)) != null) {
            return (DomainFIPAclTemplatesFetcher) addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<DomainFIPAclTemplate> getAllDomainFIPAclTemplates() throws RestException {
        java.util.List<DomainFIPAclTemplate> allObjs = new ArrayList<DomainFIPAclTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            DomainFIPAclTemplatesFetcher fetcher = getDomainFIPAclTemplatesFetcherForMeId(session.getId());
            java.util.List<DomainFIPAclTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<DomainFIPAclTemplatesFetcher> getAllDomainFIPAclTemplatesFetchers() throws RestException {
        java.util.List<DomainFIPAclTemplatesFetcher> allObjs = new ArrayList<DomainFIPAclTemplatesFetcher>();
        return allObjs;
    }
    public static EgressProfile getEgressProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressProfile obj = null;
            obj = new EgressProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForEgressProfileId(String id) throws RestException {
        EgressProfile obj = getObject(Constants.EGRESSPROFILE, id);
        if (obj == null) {
            obj = getEgressProfileById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressProfileId(String id) throws RestException {
        EgressProfile obj = getObject(Constants.EGRESSPROFILE, id);
        if (obj == null) {
            obj = getEgressProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressProfileId(String id) throws RestException {
        EgressProfile obj = getObject(Constants.EGRESSPROFILE, id);
        if (obj == null) {
            obj = getEgressProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressProfileId(String id) throws RestException {
        EgressProfile obj = getObject(Constants.EGRESSPROFILE, id);
        if (obj == null) {
            obj = getEgressProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForEgressProfileId(String id) throws RestException {
        EgressProfile obj = getObject(Constants.EGRESSPROFILE, id);
        if (obj == null) {
            obj = getEgressProfileById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressProfile> getEgressProfilesForFetcherId(String id) throws RestException {
        EgressProfilesFetcher fetcher = getEgressProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressProfile>();
    }

    public static EgressProfilesFetcher getEgressProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (EgressProfilesFetcher) fetcher;
        }
        if ((fetcher = getEgressProfilesFetcherForEnterpriseId(id)) != null) {
            return (EgressProfilesFetcher) addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (EgressProfilesFetcher) addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressProfilesFetcherForGatewayId(id)) != null) {
            return (EgressProfilesFetcher) addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (EgressProfilesFetcher) addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (EgressProfilesFetcher) addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressProfile> getAllEgressProfiles() throws RestException {
        java.util.List<EgressProfile> allObjs = new ArrayList<EgressProfile>();

        return allObjs;
    }

    public static java.util.List<EgressProfilesFetcher> getAllEgressProfilesFetchers() throws RestException {
        java.util.List<EgressProfilesFetcher> allObjs = new ArrayList<EgressProfilesFetcher>();
        return allObjs;
    }
    public static EgressQOSPolicy getEgressQOSPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressQOSPolicy obj = null;
            obj = new EgressQOSPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EGRESSQOSPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEgressQOSPolicyId(String id) throws RestException {
        EgressQOSPolicy obj = getObject(Constants.EGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getEgressQOSPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEgressQOSPolicyId(String id) throws RestException {
        EgressQOSPolicy obj = getObject(Constants.EGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getEgressQOSPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEgressQOSPolicyId(String id) throws RestException {
        EgressQOSPolicy obj = getObject(Constants.EGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getEgressQOSPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EgressQOSPolicy> getEgressQOSPoliciesForFetcherId(String id) throws RestException {
        EgressQOSPoliciesFetcher fetcher = getEgressQOSPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EGRESSQOSPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EgressQOSPolicy>();
    }

    public static EgressQOSPoliciesFetcher getEgressQOSPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EGRESSQOSPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (EgressQOSPoliciesFetcher) fetcher;
        }
        if ((fetcher = getEgressQOSPoliciesFetcherForEnterpriseId(id)) != null) {
            return (EgressQOSPoliciesFetcher) addFetcher(Constants.EGRESSQOSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEgressQOSPoliciesFetcherForMeId(id)) != null) {
            return (EgressQOSPoliciesFetcher) addFetcher(Constants.EGRESSQOSPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EgressQOSPolicy> getAllEgressQOSPolicies() throws RestException {
        java.util.List<EgressQOSPolicy> allObjs = new ArrayList<EgressQOSPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EgressQOSPoliciesFetcher fetcher = getEgressQOSPoliciesFetcherForMeId(session.getId());
            java.util.List<EgressQOSPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EgressQOSPoliciesFetcher> getAllEgressQOSPoliciesFetchers() throws RestException {
        java.util.List<EgressQOSPoliciesFetcher> allObjs = new ArrayList<EgressQOSPoliciesFetcher>();
        return allObjs;
    }
    public static Enterprise getEnterpriseById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Enterprise obj = null;
            obj = new Enterprise();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AllAlarmsFetcher getAllAlarmsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            AllAlarmsFetcher fetcher = obj.getAllAlarms();
            return addFetcher(Constants.ALLALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationsFetcher getApplicationsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementsFetcher getApplicationperformancemanagementsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementsFetcher fetcher = obj.getApplicationperformancemanagements();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AvatarsFetcher getAvatarsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            AvatarsFetcher fetcher = obj.getAvatars();
            return addFetcher(Constants.AVATARS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AzureCloudsFetcher getAzureCloudsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            AzureCloudsFetcher fetcher = obj.getAzureClouds();
            return addFetcher(Constants.AZURECLOUDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPProfilesFetcher getBGPProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            BGPProfilesFetcher fetcher = obj.getBGPProfiles();
            return addFetcher(Constants.BGPPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CaptivePortalProfilesFetcher getCaptivePortalProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            CaptivePortalProfilesFetcher fetcher = obj.getCaptivePortalProfiles();
            return addFetcher(Constants.CAPTIVEPORTALPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static COSRemarkingPolicyTablesFetcher getCOSRemarkingPolicyTablesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            COSRemarkingPolicyTablesFetcher fetcher = obj.getCOSRemarkingPolicyTables();
            return addFetcher(Constants.COSREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainKindSummariesFetcher getDomainKindSummariesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DomainKindSummariesFetcher fetcher = obj.getDomainKindSummaries();
            return addFetcher(Constants.DOMAINKINDSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainTemplatesFetcher getDomainTemplatesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DomainTemplatesFetcher fetcher = obj.getDomainTemplates();
            return addFetcher(Constants.DOMAINTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DSCPForwardingClassTablesFetcher getDSCPForwardingClassTablesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DSCPForwardingClassTablesFetcher fetcher = obj.getDSCPForwardingClassTables();
            return addFetcher(Constants.DSCPFORWARDINGCLASSTABLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DSCPRemarkingPolicyTablesFetcher getDSCPRemarkingPolicyTablesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            DSCPRemarkingPolicyTablesFetcher fetcher = obj.getDSCPRemarkingPolicyTables();
            return addFetcher(Constants.DSCPREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressProfilesFetcher getEgressProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            EgressProfilesFetcher fetcher = obj.getEgressProfiles();
            return addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressQOSPoliciesFetcher getEgressQOSPoliciesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            EgressQOSPoliciesFetcher fetcher = obj.getEgressQOSPolicies();
            return addFetcher(Constants.EGRESSQOSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterpriseNetworksFetcher getEnterpriseNetworksFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            EnterpriseNetworksFetcher fetcher = obj.getEnterpriseNetworks();
            return addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterpriseSecuritiesFetcher getEnterpriseSecuritiesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            EnterpriseSecuritiesFetcher fetcher = obj.getEnterpriseSecurities();
            return addFetcher(Constants.ENTERPRISESECURITIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FirewallAclsFetcher getFirewallAclsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            FirewallAclsFetcher fetcher = obj.getFirewallAcls();
            return addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FirewallRulesFetcher getFirewallRulesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            FirewallRulesFetcher fetcher = obj.getFirewallRules();
            return addFetcher(Constants.FIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysLocationsFetcher getGatewaysLocationsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GatewaysLocationsFetcher fetcher = obj.getGatewaysLocations();
            return addFetcher(Constants.GATEWAYSLOCATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewayTemplatesFetcher getGatewayTemplatesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GatewayTemplatesFetcher fetcher = obj.getGatewayTemplates();
            return addFetcher(Constants.GATEWAYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GNMIProfilesFetcher getGNMIProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GNMIProfilesFetcher fetcher = obj.getGNMIProfiles();
            return addFetcher(Constants.GNMIPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupKeyEncryptionProfilesFetcher getGroupKeyEncryptionProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            GroupKeyEncryptionProfilesFetcher fetcher = obj.getGroupKeyEncryptionProfiles();
            return addFetcher(Constants.GROUPKEYENCRYPTIONPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ICMPEchoTestDefinitionsFetcher getICMPEchoTestDefinitionsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ICMPEchoTestDefinitionsFetcher fetcher = obj.getICMPEchoTestDefinitions();
            return addFetcher(Constants.ICMPECHOTESTDEFINITIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IDPProfilesFetcher getIDPProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IDPProfilesFetcher fetcher = obj.getIDPProfiles();
            return addFetcher(Constants.IDPPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKECertificatesFetcher getIKECertificatesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IKECertificatesFetcher fetcher = obj.getIKECertificates();
            return addFetcher(Constants.IKECERTIFICATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEEncryptionprofilesFetcher getIKEEncryptionprofilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IKEEncryptionprofilesFetcher fetcher = obj.getIKEEncryptionprofiles();
            return addFetcher(Constants.IKEENCRYPTIONPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewaysFetcher getIKEGatewaysFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IKEGatewaysFetcher fetcher = obj.getIKEGateways();
            return addFetcher(Constants.IKEGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewayProfilesFetcher getIKEGatewayProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IKEGatewayProfilesFetcher fetcher = obj.getIKEGatewayProfiles();
            return addFetcher(Constants.IKEGATEWAYPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEPSKsFetcher getIKEPSKsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IKEPSKsFetcher fetcher = obj.getIKEPSKs();
            return addFetcher(Constants.IKEPSKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressProfilesFetcher getIngressProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IngressProfilesFetcher fetcher = obj.getIngressProfiles();
            return addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressQOSPoliciesFetcher getIngressQOSPoliciesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IngressQOSPoliciesFetcher fetcher = obj.getIngressQOSPolicies();
            return addFetcher(Constants.INGRESSQOSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IPFilterProfilesFetcher fetcher = obj.getIPFilterProfiles();
            return addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            IPv6FilterProfilesFetcher fetcher = obj.getIPv6FilterProfiles();
            return addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMonitorsFetcher getKeyServerMonitorsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            KeyServerMonitorsFetcher fetcher = obj.getKeyServerMonitors();
            return addFetcher(Constants.KEYSERVERMONITORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainTemplatesFetcher getL2DomainTemplatesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            L2DomainTemplatesFetcher fetcher = obj.getL2DomainTemplates();
            return addFetcher(Constants.L2DOMAINTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L4ServicesFetcher getL4ServicesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            L4ServicesFetcher fetcher = obj.getL4Services();
            return addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L4ServiceGroupsFetcher getL4ServiceGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            L4ServiceGroupsFetcher fetcher = obj.getL4ServiceGroups();
            return addFetcher(Constants.L4SERVICEGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L7applicationsignaturesFetcher getL7applicationsignaturesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            L7applicationsignaturesFetcher fetcher = obj.getL7applicationsignatures();
            return addFetcher(Constants.L7APPLICATIONSIGNATURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LDAPConfigurationsFetcher getLDAPConfigurationsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            LDAPConfigurationsFetcher fetcher = obj.getLDAPConfigurations();
            return addFetcher(Constants.LDAPCONFIGURATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastListsFetcher getMultiCastListsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            MultiCastListsFetcher fetcher = obj.getMultiCastLists();
            return addFetcher(Constants.MULTICASTLISTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetconfProfilesFetcher getNetconfProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NetconfProfilesFetcher fetcher = obj.getNetconfProfiles();
            return addFetcher(Constants.NETCONFPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkMacroGroupsFetcher getNetworkMacroGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NetworkMacroGroupsFetcher fetcher = obj.getNetworkMacroGroups();
            return addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceMeasurementsFetcher getNetworkPerformanceMeasurementsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NetworkPerformanceMeasurementsFetcher fetcher = obj.getNetworkPerformanceMeasurements();
            return addFetcher(Constants.NETWORKPERFORMANCEMEASUREMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysCountsFetcher getNSGatewaysCountsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSGatewaysCountsFetcher fetcher = obj.getNSGatewaysCounts();
            return addFetcher(Constants.NSGATEWAYSCOUNTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSGatewaySummariesFetcher fetcher = obj.getNSGatewaySummaries();
            return addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewayTemplatesFetcher getNSGatewayTemplatesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSGatewayTemplatesFetcher fetcher = obj.getNSGatewayTemplates();
            return addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGGroupsFetcher getNSGGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSGGroupsFetcher fetcher = obj.getNSGGroups();
            return addFetcher(Constants.NSGGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSRedundantGatewayGroupsFetcher getNSRedundantGatewayGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            NSRedundantGatewayGroupsFetcher fetcher = obj.getNSRedundantGatewayGroups();
            return addFetcher(Constants.NSREDUNDANTGATEWAYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayManagementProfilesFetcher getOverlayManagementProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            OverlayManagementProfilesFetcher fetcher = obj.getOverlayManagementProfiles();
            return addFetcher(Constants.OVERLAYMANAGEMENTPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PerformanceMonitorsFetcher getPerformanceMonitorsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PerformanceMonitorsFetcher fetcher = obj.getPerformanceMonitors();
            return addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupCategoriesFetcher getPolicyGroupCategoriesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PolicyGroupCategoriesFetcher fetcher = obj.getPolicyGroupCategories();
            return addFetcher(Constants.POLICYGROUPCATEGORIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyObjectGroupsFetcher getPolicyObjectGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PolicyObjectGroupsFetcher fetcher = obj.getPolicyObjectGroups();
            return addFetcher(Constants.POLICYOBJECTGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PublicNetworkMacrosFetcher getPublicNetworkMacrosFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            PublicNetworkMacrosFetcher fetcher = obj.getPublicNetworkMacros();
            return addFetcher(Constants.PUBLICNETWORKMACROS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RateLimitersFetcher getRateLimitersFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            RateLimitersFetcher fetcher = obj.getRateLimiters();
            return addFetcher(Constants.RATELIMITERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedundancyGroupsFetcher getRedundancyGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            RedundancyGroupsFetcher fetcher = obj.getRedundancyGroups();
            return addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RolesFetcher getRolesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            RolesFetcher fetcher = obj.getRoles();
            return addFetcher(Constants.ROLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            RoutingPoliciesFetcher fetcher = obj.getRoutingPolicies();
            return addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SaaSApplicationGroupsFetcher getSaaSApplicationGroupsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SaaSApplicationGroupsFetcher fetcher = obj.getSaaSApplicationGroups();
            return addFetcher(Constants.SAASAPPLICATIONGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SaaSApplicationTypesFetcher getSaaSApplicationTypesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SaaSApplicationTypesFetcher fetcher = obj.getSaaSApplicationTypes();
            return addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SAPEgressQoSProfilesFetcher fetcher = obj.getSAPEgressQoSProfiles();
            return addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SAPIngressQoSProfilesFetcher fetcher = obj.getSAPIngressQoSProfiles();
            return addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ScheduledTestSuitesFetcher getScheduledTestSuitesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ScheduledTestSuitesFetcher fetcher = obj.getScheduledTestSuites();
            return addFetcher(Constants.SCHEDULEDTESTSUITES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SharedNetworkResourcesFetcher getSharedNetworkResourcesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SharedNetworkResourcesFetcher fetcher = obj.getSharedNetworkResources();
            return addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SyslogDestinationsFetcher getSyslogDestinationsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            SyslogDestinationsFetcher fetcher = obj.getSyslogDestinations();
            return addFetcher(Constants.SYSLOGDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestDefinitionsFetcher getTestDefinitionsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            TestDefinitionsFetcher fetcher = obj.getTestDefinitions();
            return addFetcher(Constants.TESTDEFINITIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestSuitesFetcher getTestSuitesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            TestSuitesFetcher fetcher = obj.getTestSuites();
            return addFetcher(Constants.TESTSUITES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TrunksFetcher getTrunksFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            TrunksFetcher fetcher = obj.getTrunks();
            return addFetcher(Constants.TRUNKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UsersFetcher getUsersFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            UsersFetcher fetcher = obj.getUsers();
            return addFetcher(Constants.USERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFsFetcher getVNFsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            VNFsFetcher fetcher = obj.getVNFs();
            return addFetcher(Constants.VNFS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFMetadatasFetcher getVNFMetadatasFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            VNFMetadatasFetcher fetcher = obj.getVNFMetadatas();
            return addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFThresholdPoliciesFetcher getVNFThresholdPoliciesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            VNFThresholdPoliciesFetcher fetcher = obj.getVNFThresholdPolicies();
            return addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WebCategoriesFetcher getWebCategoriesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            WebCategoriesFetcher fetcher = obj.getWebCategories();
            return addFetcher(Constants.WEBCATEGORIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WebDomainNamesFetcher getWebDomainNamesFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            WebDomainNamesFetcher fetcher = obj.getWebDomainNames();
            return addFetcher(Constants.WEBDOMAINNAMES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZFBRequestsFetcher getZFBRequestsFetcherForEnterpriseId(String id) throws RestException {
        Enterprise obj = getObject(Constants.ENTERPRISE, id);
        if (obj == null) {
            obj = getEnterpriseById(id);
        }

        if (obj != null) {
            ZFBRequestsFetcher fetcher = obj.getZFBRequests();
            return addFetcher(Constants.ZFBREQUESTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Enterprise> getEnterprisesForFetcherId(String id) throws RestException {
        EnterprisesFetcher fetcher = getEnterprisesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Enterprise>();
    }

    public static EnterprisesFetcher getEnterprisesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISES_FETCHER, id);
        if (fetcher != null) {
            return (EnterprisesFetcher) fetcher;
        }
        if ((fetcher = getEnterprisesFetcherForEnterpriseProfileId(id)) != null) {
            return (EnterprisesFetcher) addFetcher(Constants.ENTERPRISES_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisesFetcherForMeId(id)) != null) {
            return (EnterprisesFetcher) addFetcher(Constants.ENTERPRISES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Enterprise> getAllEnterprises() throws RestException {
        java.util.List<Enterprise> allObjs = new ArrayList<Enterprise>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterprisesFetcher fetcher = getEnterprisesFetcherForMeId(session.getId());
            java.util.List<Enterprise> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EnterprisesFetcher> getAllEnterprisesFetchers() throws RestException {
        java.util.List<EnterprisesFetcher> allObjs = new ArrayList<EnterprisesFetcher>();
        return allObjs;
    }
    public static EnterpriseNetwork getEnterpriseNetworkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterpriseNetwork obj = null;
            obj = new EnterpriseNetwork();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISENETWORK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForEnterpriseNetworkId(String id) throws RestException {
        EnterpriseNetwork obj = getObject(Constants.ENTERPRISENETWORK, id);
        if (obj == null) {
            obj = getEnterpriseNetworkById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterpriseNetworkId(String id) throws RestException {
        EnterpriseNetwork obj = getObject(Constants.ENTERPRISENETWORK, id);
        if (obj == null) {
            obj = getEnterpriseNetworkById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterpriseNetworkId(String id) throws RestException {
        EnterpriseNetwork obj = getObject(Constants.ENTERPRISENETWORK, id);
        if (obj == null) {
            obj = getEnterpriseNetworkById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkMacroGroupsFetcher getNetworkMacroGroupsFetcherForEnterpriseNetworkId(String id) throws RestException {
        EnterpriseNetwork obj = getObject(Constants.ENTERPRISENETWORK, id);
        if (obj == null) {
            obj = getEnterpriseNetworkById(id);
        }

        if (obj != null) {
            NetworkMacroGroupsFetcher fetcher = obj.getNetworkMacroGroups();
            return addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterpriseNetworkId(String id) throws RestException {
        EnterpriseNetwork obj = getObject(Constants.ENTERPRISENETWORK, id);
        if (obj == null) {
            obj = getEnterpriseNetworkById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EnterpriseNetwork> getEnterpriseNetworksForFetcherId(String id) throws RestException {
        EnterpriseNetworksFetcher fetcher = getEnterpriseNetworksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISENETWORK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EnterpriseNetwork>();
    }

    public static EnterpriseNetworksFetcher getEnterpriseNetworksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISENETWORKS_FETCHER, id);
        if (fetcher != null) {
            return (EnterpriseNetworksFetcher) fetcher;
        }
        if ((fetcher = getEnterpriseNetworksFetcherForEnterpriseId(id)) != null) {
            return (EnterpriseNetworksFetcher) addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterpriseNetworksFetcherForNetworkMacroGroupId(id)) != null) {
            return (EnterpriseNetworksFetcher) addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterpriseNetworksFetcherForSaaSApplicationTypeId(id)) != null) {
            return (EnterpriseNetworksFetcher) addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EnterpriseNetwork> getAllEnterpriseNetworks() throws RestException {
        java.util.List<EnterpriseNetwork> allObjs = new ArrayList<EnterpriseNetwork>();

        return allObjs;
    }

    public static java.util.List<EnterpriseNetworksFetcher> getAllEnterpriseNetworksFetchers() throws RestException {
        java.util.List<EnterpriseNetworksFetcher> allObjs = new ArrayList<EnterpriseNetworksFetcher>();
        return allObjs;
    }
    public static EnterprisePermission getEnterprisePermissionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterprisePermission obj = null;
            obj = new EnterprisePermission();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISEPERMISSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterprisePermissionId(String id) throws RestException {
        EnterprisePermission obj = getObject(Constants.ENTERPRISEPERMISSION, id);
        if (obj == null) {
            obj = getEnterprisePermissionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterprisePermissionId(String id) throws RestException {
        EnterprisePermission obj = getObject(Constants.ENTERPRISEPERMISSION, id);
        if (obj == null) {
            obj = getEnterprisePermissionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterprisePermissionId(String id) throws RestException {
        EnterprisePermission obj = getObject(Constants.ENTERPRISEPERMISSION, id);
        if (obj == null) {
            obj = getEnterprisePermissionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EnterprisePermission> getEnterprisePermissionsForFetcherId(String id) throws RestException {
        EnterprisePermissionsFetcher fetcher = getEnterprisePermissionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISEPERMISSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EnterprisePermission>();
    }

    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, id);
        if (fetcher != null) {
            return (EnterprisePermissionsFetcher) fetcher;
        }
        if ((fetcher = getEnterprisePermissionsFetcherForEthernetSegmentGroupId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForGatewayId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForGatewayRedundantPortId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForNetconfGatewayId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForNSGatewayId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForNSPortId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForRedundantPortId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForPATNATPoolId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForPortId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForRedundancyGroupId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForWANServiceId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForSharedNetworkResourceId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForSubnetId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForVLANId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEnterprisePermissionsFetcherForVsgRedundantPortId(id)) != null) {
            return (EnterprisePermissionsFetcher) addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EnterprisePermission> getAllEnterprisePermissions() throws RestException {
        java.util.List<EnterprisePermission> allObjs = new ArrayList<EnterprisePermission>();

        return allObjs;
    }

    public static java.util.List<EnterprisePermissionsFetcher> getAllEnterprisePermissionsFetchers() throws RestException {
        java.util.List<EnterprisePermissionsFetcher> allObjs = new ArrayList<EnterprisePermissionsFetcher>();
        return allObjs;
    }
    public static EnterpriseProfile getEnterpriseProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterpriseProfile obj = null;
            obj = new EnterpriseProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISEPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EnterprisesFetcher getEnterprisesFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            EnterprisesFetcher fetcher = obj.getEnterprises();
            return addFetcher(Constants.ENTERPRISES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastListsFetcher getMultiCastListsFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            MultiCastListsFetcher fetcher = obj.getMultiCastLists();
            return addFetcher(Constants.MULTICASTLISTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterpriseProfileId(String id) throws RestException {
        EnterpriseProfile obj = getObject(Constants.ENTERPRISEPROFILE, id);
        if (obj == null) {
            obj = getEnterpriseProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EnterpriseProfile> getEnterpriseProfilesForFetcherId(String id) throws RestException {
        EnterpriseProfilesFetcher fetcher = getEnterpriseProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISEPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EnterpriseProfile>();
    }

    public static EnterpriseProfilesFetcher getEnterpriseProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISEPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (EnterpriseProfilesFetcher) fetcher;
        }
        if ((fetcher = getEnterpriseProfilesFetcherForMeId(id)) != null) {
            return (EnterpriseProfilesFetcher) addFetcher(Constants.ENTERPRISEPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EnterpriseProfile> getAllEnterpriseProfiles() throws RestException {
        java.util.List<EnterpriseProfile> allObjs = new ArrayList<EnterpriseProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterpriseProfilesFetcher fetcher = getEnterpriseProfilesFetcherForMeId(session.getId());
            java.util.List<EnterpriseProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EnterpriseProfilesFetcher> getAllEnterpriseProfilesFetchers() throws RestException {
        java.util.List<EnterpriseProfilesFetcher> allObjs = new ArrayList<EnterpriseProfilesFetcher>();
        return allObjs;
    }
    public static EnterpriseSecuredData getEnterpriseSecuredDataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterpriseSecuredData obj = null;
            obj = new EnterpriseSecuredData();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISESECUREDDATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterpriseSecuredDataId(String id) throws RestException {
        EnterpriseSecuredData obj = getObject(Constants.ENTERPRISESECUREDDATA, id);
        if (obj == null) {
            obj = getEnterpriseSecuredDataById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterpriseSecuredDataId(String id) throws RestException {
        EnterpriseSecuredData obj = getObject(Constants.ENTERPRISESECUREDDATA, id);
        if (obj == null) {
            obj = getEnterpriseSecuredDataById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterpriseSecuredDataId(String id) throws RestException {
        EnterpriseSecuredData obj = getObject(Constants.ENTERPRISESECUREDDATA, id);
        if (obj == null) {
            obj = getEnterpriseSecuredDataById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EnterpriseSecuredData> getEnterpriseSecuredDatasForFetcherId(String id) throws RestException {
        EnterpriseSecuredDatasFetcher fetcher = getEnterpriseSecuredDatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISESECUREDDATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EnterpriseSecuredData>();
    }

    public static EnterpriseSecuredDatasFetcher getEnterpriseSecuredDatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISESECUREDDATAS_FETCHER, id);
        if (fetcher != null) {
            return (EnterpriseSecuredDatasFetcher) fetcher;
        }
        if ((fetcher = getEnterpriseSecuredDatasFetcherForEnterpriseSecurityId(id)) != null) {
            return (EnterpriseSecuredDatasFetcher) addFetcher(Constants.ENTERPRISESECUREDDATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EnterpriseSecuredData> getAllEnterpriseSecuredDatas() throws RestException {
        java.util.List<EnterpriseSecuredData> allObjs = new ArrayList<EnterpriseSecuredData>();

        return allObjs;
    }

    public static java.util.List<EnterpriseSecuredDatasFetcher> getAllEnterpriseSecuredDatasFetchers() throws RestException {
        java.util.List<EnterpriseSecuredDatasFetcher> allObjs = new ArrayList<EnterpriseSecuredDatasFetcher>();
        return allObjs;
    }
    public static EnterpriseSecurity getEnterpriseSecurityById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EnterpriseSecurity obj = null;
            obj = new EnterpriseSecurity();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ENTERPRISESECURITY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EnterpriseSecuredDatasFetcher getEnterpriseSecuredDatasFetcherForEnterpriseSecurityId(String id) throws RestException {
        EnterpriseSecurity obj = getObject(Constants.ENTERPRISESECURITY, id);
        if (obj == null) {
            obj = getEnterpriseSecurityById(id);
        }

        if (obj != null) {
            EnterpriseSecuredDatasFetcher fetcher = obj.getEnterpriseSecuredDatas();
            return addFetcher(Constants.ENTERPRISESECUREDDATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEnterpriseSecurityId(String id) throws RestException {
        EnterpriseSecurity obj = getObject(Constants.ENTERPRISESECURITY, id);
        if (obj == null) {
            obj = getEnterpriseSecurityById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEnterpriseSecurityId(String id) throws RestException {
        EnterpriseSecurity obj = getObject(Constants.ENTERPRISESECURITY, id);
        if (obj == null) {
            obj = getEnterpriseSecurityById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEnterpriseSecurityId(String id) throws RestException {
        EnterpriseSecurity obj = getObject(Constants.ENTERPRISESECURITY, id);
        if (obj == null) {
            obj = getEnterpriseSecurityById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EnterpriseSecurity> getEnterpriseSecuritiesForFetcherId(String id) throws RestException {
        EnterpriseSecuritiesFetcher fetcher = getEnterpriseSecuritiesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ENTERPRISESECURITY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EnterpriseSecurity>();
    }

    public static EnterpriseSecuritiesFetcher getEnterpriseSecuritiesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ENTERPRISESECURITIES_FETCHER, id);
        if (fetcher != null) {
            return (EnterpriseSecuritiesFetcher) fetcher;
        }
        if ((fetcher = getEnterpriseSecuritiesFetcherForEnterpriseId(id)) != null) {
            return (EnterpriseSecuritiesFetcher) addFetcher(Constants.ENTERPRISESECURITIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EnterpriseSecurity> getAllEnterpriseSecurities() throws RestException {
        java.util.List<EnterpriseSecurity> allObjs = new ArrayList<EnterpriseSecurity>();

        return allObjs;
    }

    public static java.util.List<EnterpriseSecuritiesFetcher> getAllEnterpriseSecuritiesFetchers() throws RestException {
        java.util.List<EnterpriseSecuritiesFetcher> allObjs = new ArrayList<EnterpriseSecuritiesFetcher>();
        return allObjs;
    }
    public static EsIlmPolicy getEsIlmPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EsIlmPolicy obj = null;
            obj = new EsIlmPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ESILMPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEsIlmPolicyId(String id) throws RestException {
        EsIlmPolicy obj = getObject(Constants.ESILMPOLICY, id);
        if (obj == null) {
            obj = getEsIlmPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEsIlmPolicyId(String id) throws RestException {
        EsIlmPolicy obj = getObject(Constants.ESILMPOLICY, id);
        if (obj == null) {
            obj = getEsIlmPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEsIlmPolicyId(String id) throws RestException {
        EsIlmPolicy obj = getObject(Constants.ESILMPOLICY, id);
        if (obj == null) {
            obj = getEsIlmPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EsIlmPolicy> getEsIlmPoliciesForFetcherId(String id) throws RestException {
        EsIlmPoliciesFetcher fetcher = getEsIlmPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ESILMPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EsIlmPolicy>();
    }

    public static EsIlmPoliciesFetcher getEsIlmPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ESILMPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (EsIlmPoliciesFetcher) fetcher;
        }
        if ((fetcher = getEsIlmPoliciesFetcherForMeId(id)) != null) {
            return (EsIlmPoliciesFetcher) addFetcher(Constants.ESILMPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EsIlmPolicy> getAllEsIlmPolicies() throws RestException {
        java.util.List<EsIlmPolicy> allObjs = new ArrayList<EsIlmPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EsIlmPoliciesFetcher fetcher = getEsIlmPoliciesFetcherForMeId(session.getId());
            java.util.List<EsIlmPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EsIlmPoliciesFetcher> getAllEsIlmPoliciesFetchers() throws RestException {
        java.util.List<EsIlmPoliciesFetcher> allObjs = new ArrayList<EsIlmPoliciesFetcher>();
        return allObjs;
    }
    public static EsIndexConfig getEsIndexConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EsIndexConfig obj = null;
            obj = new EsIndexConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ESINDEXCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEsIndexConfigId(String id) throws RestException {
        EsIndexConfig obj = getObject(Constants.ESINDEXCONFIG, id);
        if (obj == null) {
            obj = getEsIndexConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEsIndexConfigId(String id) throws RestException {
        EsIndexConfig obj = getObject(Constants.ESINDEXCONFIG, id);
        if (obj == null) {
            obj = getEsIndexConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEsIndexConfigId(String id) throws RestException {
        EsIndexConfig obj = getObject(Constants.ESINDEXCONFIG, id);
        if (obj == null) {
            obj = getEsIndexConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EsIndexConfig> getEsIndexConfigsForFetcherId(String id) throws RestException {
        EsIndexConfigsFetcher fetcher = getEsIndexConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ESINDEXCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EsIndexConfig>();
    }

    public static EsIndexConfigsFetcher getEsIndexConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ESINDEXCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (EsIndexConfigsFetcher) fetcher;
        }
        if ((fetcher = getEsIndexConfigsFetcherForMeId(id)) != null) {
            return (EsIndexConfigsFetcher) addFetcher(Constants.ESINDEXCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EsIndexConfig> getAllEsIndexConfigs() throws RestException {
        java.util.List<EsIndexConfig> allObjs = new ArrayList<EsIndexConfig>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EsIndexConfigsFetcher fetcher = getEsIndexConfigsFetcherForMeId(session.getId());
            java.util.List<EsIndexConfig> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EsIndexConfigsFetcher> getAllEsIndexConfigsFetchers() throws RestException {
        java.util.List<EsIndexConfigsFetcher> allObjs = new ArrayList<EsIndexConfigsFetcher>();
        return allObjs;
    }
    public static EthernetSegmentGroup getEthernetSegmentGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EthernetSegmentGroup obj = null;
            obj = new EthernetSegmentGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ETHERNETSEGMENTGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForEthernetSegmentGroupId(String id) throws RestException {
        EthernetSegmentGroup obj = getObject(Constants.ETHERNETSEGMENTGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGroupById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForEthernetSegmentGroupId(String id) throws RestException {
        EthernetSegmentGroup obj = getObject(Constants.ETHERNETSEGMENTGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGroupById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEthernetSegmentGroupId(String id) throws RestException {
        EthernetSegmentGroup obj = getObject(Constants.ETHERNETSEGMENTGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForEthernetSegmentGroupId(String id) throws RestException {
        EthernetSegmentGroup obj = getObject(Constants.ETHERNETSEGMENTGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGroupById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EthernetSegmentGroup> getEthernetSegmentGroupsForFetcherId(String id) throws RestException {
        EthernetSegmentGroupsFetcher fetcher = getEthernetSegmentGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ETHERNETSEGMENTGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EthernetSegmentGroup>();
    }

    public static EthernetSegmentGroupsFetcher getEthernetSegmentGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ETHERNETSEGMENTGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (EthernetSegmentGroupsFetcher) fetcher;
        }
        if ((fetcher = getEthernetSegmentGroupsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (EthernetSegmentGroupsFetcher) addFetcher(Constants.ETHERNETSEGMENTGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EthernetSegmentGroup> getAllEthernetSegmentGroups() throws RestException {
        java.util.List<EthernetSegmentGroup> allObjs = new ArrayList<EthernetSegmentGroup>();

        return allObjs;
    }

    public static java.util.List<EthernetSegmentGroupsFetcher> getAllEthernetSegmentGroupsFetchers() throws RestException {
        java.util.List<EthernetSegmentGroupsFetcher> allObjs = new ArrayList<EthernetSegmentGroupsFetcher>();
        return allObjs;
    }
    public static EthernetSegmentGWGroup getEthernetSegmentGWGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EthernetSegmentGWGroup obj = null;
            obj = new EthernetSegmentGWGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ETHERNETSEGMENTGWGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressProfilesFetcher getEgressProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            EgressProfilesFetcher fetcher = obj.getEgressProfiles();
            return addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EthernetSegmentGroupsFetcher getEthernetSegmentGroupsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            EthernetSegmentGroupsFetcher fetcher = obj.getEthernetSegmentGroups();
            return addFetcher(Constants.ETHERNETSEGMENTGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressProfilesFetcher getIngressProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            IngressProfilesFetcher fetcher = obj.getIngressProfiles();
            return addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            IPFilterProfilesFetcher fetcher = obj.getIPFilterProfiles();
            return addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            IPv6FilterProfilesFetcher fetcher = obj.getIPv6FilterProfiles();
            return addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MACFilterProfilesFetcher getMACFilterProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            MACFilterProfilesFetcher fetcher = obj.getMACFilterProfiles();
            return addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            SAPEgressQoSProfilesFetcher fetcher = obj.getSAPEgressQoSProfiles();
            return addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherForEthernetSegmentGWGroupId(String id) throws RestException {
        EthernetSegmentGWGroup obj = getObject(Constants.ETHERNETSEGMENTGWGROUP, id);
        if (obj == null) {
            obj = getEthernetSegmentGWGroupById(id);
        }

        if (obj != null) {
            SAPIngressQoSProfilesFetcher fetcher = obj.getSAPIngressQoSProfiles();
            return addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EthernetSegmentGWGroup> getEthernetSegmentGWGroupsForFetcherId(String id) throws RestException {
        EthernetSegmentGWGroupsFetcher fetcher = getEthernetSegmentGWGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ETHERNETSEGMENTGWGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EthernetSegmentGWGroup>();
    }

    public static EthernetSegmentGWGroupsFetcher getEthernetSegmentGWGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ETHERNETSEGMENTGWGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (EthernetSegmentGWGroupsFetcher) fetcher;
        }
        if ((fetcher = getEthernetSegmentGWGroupsFetcherForMeId(id)) != null) {
            return (EthernetSegmentGWGroupsFetcher) addFetcher(Constants.ETHERNETSEGMENTGWGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EthernetSegmentGWGroup> getAllEthernetSegmentGWGroups() throws RestException {
        java.util.List<EthernetSegmentGWGroup> allObjs = new ArrayList<EthernetSegmentGWGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            EthernetSegmentGWGroupsFetcher fetcher = getEthernetSegmentGWGroupsFetcherForMeId(session.getId());
            java.util.List<EthernetSegmentGWGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<EthernetSegmentGWGroupsFetcher> getAllEthernetSegmentGWGroupsFetchers() throws RestException {
        java.util.List<EthernetSegmentGWGroupsFetcher> allObjs = new ArrayList<EthernetSegmentGWGroupsFetcher>();
        return allObjs;
    }
    public static EventLog getEventLogById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            EventLog obj = null;
            obj = new EventLog();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.EVENTLOG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForEventLogId(String id) throws RestException {
        EventLog obj = getObject(Constants.EVENTLOG, id);
        if (obj == null) {
            obj = getEventLogById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForEventLogId(String id) throws RestException {
        EventLog obj = getObject(Constants.EVENTLOG, id);
        if (obj == null) {
            obj = getEventLogById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForEventLogId(String id) throws RestException {
        EventLog obj = getObject(Constants.EVENTLOG, id);
        if (obj == null) {
            obj = getEventLogById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<EventLog> getEventLogsForFetcherId(String id) throws RestException {
        EventLogsFetcher fetcher = getEventLogsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.EVENTLOG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<EventLog>();
    }

    public static EventLogsFetcher getEventLogsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.EVENTLOGS_FETCHER, id);
        if (fetcher != null) {
            return (EventLogsFetcher) fetcher;
        }
        if ((fetcher = getEventLogsFetcherForAddressRangeId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForAggregatedDomainId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForBridgeInterfaceId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForContainerId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForContainerInterfaceId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForDHCPOptionId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForDHCPv6OptionId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForDomainId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForDomainTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForEgressACLTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForEnterpriseId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForEnterpriseNetworkId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForEnterpriseProfileId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForFloatingIpId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForGatewayId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForGroupId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForHostInterfaceId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForHSCId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForIngressACLTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForIPReservationId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForL2DomainId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForL2DomainTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForLicenseId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForMetadataId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForMultiCastChannelMapId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForMultiCastRangeId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForNetconfGatewayId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForNSGatewayId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForNSPortId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForPermissionId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForPolicyGroupId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForPolicyGroupTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForPortId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForPublicNetworkMacroId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForQOSId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForRedirectionTargetId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForRedirectionTargetTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForRedundancyGroupId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForWANServiceId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForSSIDConnectionId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForStaticRouteId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForSubnetId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForSubnetTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForTCAId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForUserId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVirtualIPId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVLANId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVMId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVMInterfaceId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVPortId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVRSId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVSCId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVSDId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForVSPId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForWirelessPortId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForZoneId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getEventLogsFetcherForZoneTemplateId(id)) != null) {
            return (EventLogsFetcher) addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<EventLog> getAllEventLogs() throws RestException {
        java.util.List<EventLog> allObjs = new ArrayList<EventLog>();

        return allObjs;
    }

    public static java.util.List<EventLogsFetcher> getAllEventLogsFetchers() throws RestException {
        java.util.List<EventLogsFetcher> allObjs = new ArrayList<EventLogsFetcher>();
        return allObjs;
    }
    public static FirewallAcl getFirewallAclById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            FirewallAcl obj = null;
            obj = new FirewallAcl();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FIREWALLACL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DomainsFetcher getDomainsFetcherForFirewallAclId(String id) throws RestException {
        FirewallAcl obj = getObject(Constants.FIREWALLACL, id);
        if (obj == null) {
            obj = getFirewallAclById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FirewallRulesFetcher getFirewallRulesFetcherForFirewallAclId(String id) throws RestException {
        FirewallAcl obj = getObject(Constants.FIREWALLACL, id);
        if (obj == null) {
            obj = getFirewallAclById(id);
        }

        if (obj != null) {
            FirewallRulesFetcher fetcher = obj.getFirewallRules();
            return addFetcher(Constants.FIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForFirewallAclId(String id) throws RestException {
        FirewallAcl obj = getObject(Constants.FIREWALLACL, id);
        if (obj == null) {
            obj = getFirewallAclById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForFirewallAclId(String id) throws RestException {
        FirewallAcl obj = getObject(Constants.FIREWALLACL, id);
        if (obj == null) {
            obj = getFirewallAclById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForFirewallAclId(String id) throws RestException {
        FirewallAcl obj = getObject(Constants.FIREWALLACL, id);
        if (obj == null) {
            obj = getFirewallAclById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<FirewallAcl> getFirewallAclsForFetcherId(String id) throws RestException {
        FirewallAclsFetcher fetcher = getFirewallAclsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FIREWALLACL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<FirewallAcl>();
    }

    public static FirewallAclsFetcher getFirewallAclsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FIREWALLACLS_FETCHER, id);
        if (fetcher != null) {
            return (FirewallAclsFetcher) fetcher;
        }
        if ((fetcher = getFirewallAclsFetcherForAggregatedDomainId(id)) != null) {
            return (FirewallAclsFetcher) addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getFirewallAclsFetcherForDomainId(id)) != null) {
            return (FirewallAclsFetcher) addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getFirewallAclsFetcherForEnterpriseId(id)) != null) {
            return (FirewallAclsFetcher) addFetcher(Constants.FIREWALLACLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<FirewallAcl> getAllFirewallAcls() throws RestException {
        java.util.List<FirewallAcl> allObjs = new ArrayList<FirewallAcl>();

        return allObjs;
    }

    public static java.util.List<FirewallAclsFetcher> getAllFirewallAclsFetchers() throws RestException {
        java.util.List<FirewallAclsFetcher> allObjs = new ArrayList<FirewallAclsFetcher>();
        return allObjs;
    }
    public static FirewallRule getFirewallRuleById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            FirewallRule obj = null;
            obj = new FirewallRule();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FIREWALLRULE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForFirewallRuleId(String id) throws RestException {
        FirewallRule obj = getObject(Constants.FIREWALLRULE, id);
        if (obj == null) {
            obj = getFirewallRuleById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForFirewallRuleId(String id) throws RestException {
        FirewallRule obj = getObject(Constants.FIREWALLRULE, id);
        if (obj == null) {
            obj = getFirewallRuleById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForFirewallRuleId(String id) throws RestException {
        FirewallRule obj = getObject(Constants.FIREWALLRULE, id);
        if (obj == null) {
            obj = getFirewallRuleById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<FirewallRule> getFirewallRulesForFetcherId(String id) throws RestException {
        FirewallRulesFetcher fetcher = getFirewallRulesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FIREWALLRULE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<FirewallRule>();
    }

    public static FirewallRulesFetcher getFirewallRulesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FIREWALLRULES_FETCHER, id);
        if (fetcher != null) {
            return (FirewallRulesFetcher) fetcher;
        }
        if ((fetcher = getFirewallRulesFetcherForEnterpriseId(id)) != null) {
            return (FirewallRulesFetcher) addFetcher(Constants.FIREWALLRULES_FETCHER, fetcher);
        }
        
        if ((fetcher = getFirewallRulesFetcherForFirewallAclId(id)) != null) {
            return (FirewallRulesFetcher) addFetcher(Constants.FIREWALLRULES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<FirewallRule> getAllFirewallRules() throws RestException {
        java.util.List<FirewallRule> allObjs = new ArrayList<FirewallRule>();

        return allObjs;
    }

    public static java.util.List<FirewallRulesFetcher> getAllFirewallRulesFetchers() throws RestException {
        java.util.List<FirewallRulesFetcher> allObjs = new ArrayList<FirewallRulesFetcher>();
        return allObjs;
    }
    public static FloatingIp getFloatingIpById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            FloatingIp obj = null;
            obj = new FloatingIp();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FLOATINGIP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForFloatingIpId(String id) throws RestException {
        FloatingIp obj = getObject(Constants.FLOATINGIP, id);
        if (obj == null) {
            obj = getFloatingIpById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForFloatingIpId(String id) throws RestException {
        FloatingIp obj = getObject(Constants.FLOATINGIP, id);
        if (obj == null) {
            obj = getFloatingIpById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForFloatingIpId(String id) throws RestException {
        FloatingIp obj = getObject(Constants.FLOATINGIP, id);
        if (obj == null) {
            obj = getFloatingIpById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForFloatingIpId(String id) throws RestException {
        FloatingIp obj = getObject(Constants.FLOATINGIP, id);
        if (obj == null) {
            obj = getFloatingIpById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForFloatingIpId(String id) throws RestException {
        FloatingIp obj = getObject(Constants.FLOATINGIP, id);
        if (obj == null) {
            obj = getFloatingIpById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<FloatingIp> getFloatingIpsForFetcherId(String id) throws RestException {
        FloatingIpsFetcher fetcher = getFloatingIpsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FLOATINGIP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<FloatingIp>();
    }

    public static FloatingIpsFetcher getFloatingIpsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FLOATINGIPS_FETCHER, id);
        if (fetcher != null) {
            return (FloatingIpsFetcher) fetcher;
        }
        if ((fetcher = getFloatingIpsFetcherForAggregatedDomainId(id)) != null) {
            return (FloatingIpsFetcher) addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getFloatingIpsFetcherForDomainId(id)) != null) {
            return (FloatingIpsFetcher) addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getFloatingIpsFetcherForMeId(id)) != null) {
            return (FloatingIpsFetcher) addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<FloatingIp> getAllFloatingIps() throws RestException {
        java.util.List<FloatingIp> allObjs = new ArrayList<FloatingIp>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            FloatingIpsFetcher fetcher = getFloatingIpsFetcherForMeId(session.getId());
            java.util.List<FloatingIp> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<FloatingIpsFetcher> getAllFloatingIpsFetchers() throws RestException {
        java.util.List<FloatingIpsFetcher> allObjs = new ArrayList<FloatingIpsFetcher>();
        return allObjs;
    }
    public static ForwardingPathList getForwardingPathListById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ForwardingPathList obj = null;
            obj = new ForwardingPathList();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FORWARDINGPATHLIST, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ForwardingPathListEntriesFetcher getForwardingPathListEntriesFetcherForForwardingPathListId(String id) throws RestException {
        ForwardingPathList obj = getObject(Constants.FORWARDINGPATHLIST, id);
        if (obj == null) {
            obj = getForwardingPathListById(id);
        }

        if (obj != null) {
            ForwardingPathListEntriesFetcher fetcher = obj.getForwardingPathListEntries();
            return addFetcher(Constants.FORWARDINGPATHLISTENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForForwardingPathListId(String id) throws RestException {
        ForwardingPathList obj = getObject(Constants.FORWARDINGPATHLIST, id);
        if (obj == null) {
            obj = getForwardingPathListById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForForwardingPathListId(String id) throws RestException {
        ForwardingPathList obj = getObject(Constants.FORWARDINGPATHLIST, id);
        if (obj == null) {
            obj = getForwardingPathListById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForForwardingPathListId(String id) throws RestException {
        ForwardingPathList obj = getObject(Constants.FORWARDINGPATHLIST, id);
        if (obj == null) {
            obj = getForwardingPathListById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ForwardingPathList> getForwardingPathListsForFetcherId(String id) throws RestException {
        ForwardingPathListsFetcher fetcher = getForwardingPathListsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FORWARDINGPATHLIST);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ForwardingPathList>();
    }

    public static ForwardingPathListsFetcher getForwardingPathListsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FORWARDINGPATHLISTS_FETCHER, id);
        if (fetcher != null) {
            return (ForwardingPathListsFetcher) fetcher;
        }
        if ((fetcher = getForwardingPathListsFetcherForAggregatedDomainId(id)) != null) {
            return (ForwardingPathListsFetcher) addFetcher(Constants.FORWARDINGPATHLISTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getForwardingPathListsFetcherForDomainId(id)) != null) {
            return (ForwardingPathListsFetcher) addFetcher(Constants.FORWARDINGPATHLISTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ForwardingPathList> getAllForwardingPathLists() throws RestException {
        java.util.List<ForwardingPathList> allObjs = new ArrayList<ForwardingPathList>();

        return allObjs;
    }

    public static java.util.List<ForwardingPathListsFetcher> getAllForwardingPathListsFetchers() throws RestException {
        java.util.List<ForwardingPathListsFetcher> allObjs = new ArrayList<ForwardingPathListsFetcher>();
        return allObjs;
    }
    public static ForwardingPathListEntry getForwardingPathListEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ForwardingPathListEntry obj = null;
            obj = new ForwardingPathListEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.FORWARDINGPATHLISTENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForForwardingPathListEntryId(String id) throws RestException {
        ForwardingPathListEntry obj = getObject(Constants.FORWARDINGPATHLISTENTRY, id);
        if (obj == null) {
            obj = getForwardingPathListEntryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForForwardingPathListEntryId(String id) throws RestException {
        ForwardingPathListEntry obj = getObject(Constants.FORWARDINGPATHLISTENTRY, id);
        if (obj == null) {
            obj = getForwardingPathListEntryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForForwardingPathListEntryId(String id) throws RestException {
        ForwardingPathListEntry obj = getObject(Constants.FORWARDINGPATHLISTENTRY, id);
        if (obj == null) {
            obj = getForwardingPathListEntryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ForwardingPathListEntry> getForwardingPathListEntriesForFetcherId(String id) throws RestException {
        ForwardingPathListEntriesFetcher fetcher = getForwardingPathListEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.FORWARDINGPATHLISTENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ForwardingPathListEntry>();
    }

    public static ForwardingPathListEntriesFetcher getForwardingPathListEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.FORWARDINGPATHLISTENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (ForwardingPathListEntriesFetcher) fetcher;
        }
        if ((fetcher = getForwardingPathListEntriesFetcherForForwardingPathListId(id)) != null) {
            return (ForwardingPathListEntriesFetcher) addFetcher(Constants.FORWARDINGPATHLISTENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ForwardingPathListEntry> getAllForwardingPathListEntries() throws RestException {
        java.util.List<ForwardingPathListEntry> allObjs = new ArrayList<ForwardingPathListEntry>();

        return allObjs;
    }

    public static java.util.List<ForwardingPathListEntriesFetcher> getAllForwardingPathListEntriesFetchers() throws RestException {
        java.util.List<ForwardingPathListEntriesFetcher> allObjs = new ArrayList<ForwardingPathListEntriesFetcher>();
        return allObjs;
    }
    public static Gateway getGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Gateway obj = null;
            obj = new Gateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapsFetcher getBootstrapsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            BootstrapsFetcher fetcher = obj.getBootstraps();
            return addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapActivationsFetcher getBootstrapActivationsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            BootstrapActivationsFetcher fetcher = obj.getBootstrapActivations();
            return addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressProfilesFetcher getEgressProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            EgressProfilesFetcher fetcher = obj.getEgressProfiles();
            return addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaySecuritiesFetcher getGatewaySecuritiesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            GatewaySecuritiesFetcher fetcher = obj.getGatewaySecurities();
            return addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureConfigsFetcher getInfrastructureConfigsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            InfrastructureConfigsFetcher fetcher = obj.getInfrastructureConfigs();
            return addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressProfilesFetcher getIngressProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            IngressProfilesFetcher fetcher = obj.getIngressProfiles();
            return addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            IPFilterProfilesFetcher fetcher = obj.getIPFilterProfiles();
            return addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            IPv6FilterProfilesFetcher fetcher = obj.getIPv6FilterProfiles();
            return addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LocationsFetcher getLocationsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            LocationsFetcher fetcher = obj.getLocations();
            return addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MACFilterProfilesFetcher getMACFilterProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            MACFilterProfilesFetcher fetcher = obj.getMACFilterProfiles();
            return addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortsFetcher getPortsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            PortsFetcher fetcher = obj.getPorts();
            return addFetcher(Constants.PORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            RoutingPoliciesFetcher fetcher = obj.getRoutingPolicies();
            return addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            SAPEgressQoSProfilesFetcher fetcher = obj.getSAPEgressQoSProfiles();
            return addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            SAPIngressQoSProfilesFetcher fetcher = obj.getSAPIngressQoSProfiles();
            return addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WANServicesFetcher getWANServicesFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            WANServicesFetcher fetcher = obj.getWANServices();
            return addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForGatewayId(String id) throws RestException {
        Gateway obj = getObject(Constants.GATEWAY, id);
        if (obj == null) {
            obj = getGatewayById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Gateway> getGatewaysForFetcherId(String id) throws RestException {
        GatewaysFetcher fetcher = getGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Gateway>();
    }

    public static GatewaysFetcher getGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (GatewaysFetcher) fetcher;
        }
        if ((fetcher = getGatewaysFetcherForAggregatedDomainId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForDomainId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForEnterpriseId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForL2DomainId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForMeId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForPolicyObjectGroupId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaysFetcherForRedundancyGroupId(id)) != null) {
            return (GatewaysFetcher) addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Gateway> getAllGateways() throws RestException {
        java.util.List<Gateway> allObjs = new ArrayList<Gateway>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewaysFetcher fetcher = getGatewaysFetcherForMeId(session.getId());
            java.util.List<Gateway> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<GatewaysFetcher> getAllGatewaysFetchers() throws RestException {
        java.util.List<GatewaysFetcher> allObjs = new ArrayList<GatewaysFetcher>();
        return allObjs;
    }
    public static GatewayRedundantPort getGatewayRedundantPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewayRedundantPort obj = null;
            obj = new GatewayRedundantPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAYREDUNDANTPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForGatewayRedundantPortId(String id) throws RestException {
        GatewayRedundantPort obj = getObject(Constants.GATEWAYREDUNDANTPORT, id);
        if (obj == null) {
            obj = getGatewayRedundantPortById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GatewayRedundantPort> getGatewayRedundantPortsForFetcherId(String id) throws RestException {
        GatewayRedundantPortsFetcher fetcher = getGatewayRedundantPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAYREDUNDANTPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GatewayRedundantPort>();
    }

    public static GatewayRedundantPortsFetcher getGatewayRedundantPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYREDUNDANTPORTS_FETCHER, id);
        if (fetcher != null) {
            return (GatewayRedundantPortsFetcher) fetcher;
        }
        if ((fetcher = getGatewayRedundantPortsFetcherForRedundancyGroupId(id)) != null) {
            return (GatewayRedundantPortsFetcher) addFetcher(Constants.GATEWAYREDUNDANTPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GatewayRedundantPort> getAllGatewayRedundantPorts() throws RestException {
        java.util.List<GatewayRedundantPort> allObjs = new ArrayList<GatewayRedundantPort>();

        return allObjs;
    }

    public static java.util.List<GatewayRedundantPortsFetcher> getAllGatewayRedundantPortsFetchers() throws RestException {
        java.util.List<GatewayRedundantPortsFetcher> allObjs = new ArrayList<GatewayRedundantPortsFetcher>();
        return allObjs;
    }
    public static GatewaySecuredData getGatewaySecuredDataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewaySecuredData obj = null;
            obj = new GatewaySecuredData();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAYSECUREDDATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewaySecuredDataId(String id) throws RestException {
        GatewaySecuredData obj = getObject(Constants.GATEWAYSECUREDDATA, id);
        if (obj == null) {
            obj = getGatewaySecuredDataById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewaySecuredDataId(String id) throws RestException {
        GatewaySecuredData obj = getObject(Constants.GATEWAYSECUREDDATA, id);
        if (obj == null) {
            obj = getGatewaySecuredDataById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewaySecuredDataId(String id) throws RestException {
        GatewaySecuredData obj = getObject(Constants.GATEWAYSECUREDDATA, id);
        if (obj == null) {
            obj = getGatewaySecuredDataById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GatewaySecuredData> getGatewaySecuredDatasForFetcherId(String id) throws RestException {
        GatewaySecuredDatasFetcher fetcher = getGatewaySecuredDatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAYSECUREDDATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GatewaySecuredData>();
    }

    public static GatewaySecuredDatasFetcher getGatewaySecuredDatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYSECUREDDATAS_FETCHER, id);
        if (fetcher != null) {
            return (GatewaySecuredDatasFetcher) fetcher;
        }
        if ((fetcher = getGatewaySecuredDatasFetcherForGatewaySecurityId(id)) != null) {
            return (GatewaySecuredDatasFetcher) addFetcher(Constants.GATEWAYSECUREDDATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GatewaySecuredData> getAllGatewaySecuredDatas() throws RestException {
        java.util.List<GatewaySecuredData> allObjs = new ArrayList<GatewaySecuredData>();

        return allObjs;
    }

    public static java.util.List<GatewaySecuredDatasFetcher> getAllGatewaySecuredDatasFetchers() throws RestException {
        java.util.List<GatewaySecuredDatasFetcher> allObjs = new ArrayList<GatewaySecuredDatasFetcher>();
        return allObjs;
    }
    public static GatewaySecurity getGatewaySecurityById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewaySecurity obj = null;
            obj = new GatewaySecurity();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAYSECURITY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GatewaySecuredDatasFetcher getGatewaySecuredDatasFetcherForGatewaySecurityId(String id) throws RestException {
        GatewaySecurity obj = getObject(Constants.GATEWAYSECURITY, id);
        if (obj == null) {
            obj = getGatewaySecurityById(id);
        }

        if (obj != null) {
            GatewaySecuredDatasFetcher fetcher = obj.getGatewaySecuredDatas();
            return addFetcher(Constants.GATEWAYSECUREDDATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewaySecurityId(String id) throws RestException {
        GatewaySecurity obj = getObject(Constants.GATEWAYSECURITY, id);
        if (obj == null) {
            obj = getGatewaySecurityById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewaySecurityId(String id) throws RestException {
        GatewaySecurity obj = getObject(Constants.GATEWAYSECURITY, id);
        if (obj == null) {
            obj = getGatewaySecurityById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewaySecurityId(String id) throws RestException {
        GatewaySecurity obj = getObject(Constants.GATEWAYSECURITY, id);
        if (obj == null) {
            obj = getGatewaySecurityById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GatewaySecurity> getGatewaySecuritiesForFetcherId(String id) throws RestException {
        GatewaySecuritiesFetcher fetcher = getGatewaySecuritiesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAYSECURITY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GatewaySecurity>();
    }

    public static GatewaySecuritiesFetcher getGatewaySecuritiesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYSECURITIES_FETCHER, id);
        if (fetcher != null) {
            return (GatewaySecuritiesFetcher) fetcher;
        }
        if ((fetcher = getGatewaySecuritiesFetcherForGatewayId(id)) != null) {
            return (GatewaySecuritiesFetcher) addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaySecuritiesFetcherForNetconfGatewayId(id)) != null) {
            return (GatewaySecuritiesFetcher) addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewaySecuritiesFetcherForNSGatewayId(id)) != null) {
            return (GatewaySecuritiesFetcher) addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GatewaySecurity> getAllGatewaySecurities() throws RestException {
        java.util.List<GatewaySecurity> allObjs = new ArrayList<GatewaySecurity>();

        return allObjs;
    }

    public static java.util.List<GatewaySecuritiesFetcher> getAllGatewaySecuritiesFetchers() throws RestException {
        java.util.List<GatewaySecuritiesFetcher> allObjs = new ArrayList<GatewaySecuritiesFetcher>();
        return allObjs;
    }
    public static GatewaysLocation getGatewaysLocationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewaysLocation obj = null;
            obj = new GatewaysLocation();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAYSLOCATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewaysLocationId(String id) throws RestException {
        GatewaysLocation obj = getObject(Constants.GATEWAYSLOCATION, id);
        if (obj == null) {
            obj = getGatewaysLocationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewaysLocationId(String id) throws RestException {
        GatewaysLocation obj = getObject(Constants.GATEWAYSLOCATION, id);
        if (obj == null) {
            obj = getGatewaysLocationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewaysLocationId(String id) throws RestException {
        GatewaysLocation obj = getObject(Constants.GATEWAYSLOCATION, id);
        if (obj == null) {
            obj = getGatewaysLocationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GatewaysLocation> getGatewaysLocationsForFetcherId(String id) throws RestException {
        GatewaysLocationsFetcher fetcher = getGatewaysLocationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAYSLOCATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GatewaysLocation>();
    }

    public static GatewaysLocationsFetcher getGatewaysLocationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYSLOCATIONS_FETCHER, id);
        if (fetcher != null) {
            return (GatewaysLocationsFetcher) fetcher;
        }
        if ((fetcher = getGatewaysLocationsFetcherForEnterpriseId(id)) != null) {
            return (GatewaysLocationsFetcher) addFetcher(Constants.GATEWAYSLOCATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GatewaysLocation> getAllGatewaysLocations() throws RestException {
        java.util.List<GatewaysLocation> allObjs = new ArrayList<GatewaysLocation>();

        return allObjs;
    }

    public static java.util.List<GatewaysLocationsFetcher> getAllGatewaysLocationsFetchers() throws RestException {
        java.util.List<GatewaysLocationsFetcher> allObjs = new ArrayList<GatewaysLocationsFetcher>();
        return allObjs;
    }
    public static GatewayTemplate getGatewayTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewayTemplate obj = null;
            obj = new GatewayTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GATEWAYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGatewayTemplateId(String id) throws RestException {
        GatewayTemplate obj = getObject(Constants.GATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getGatewayTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGatewayTemplateId(String id) throws RestException {
        GatewayTemplate obj = getObject(Constants.GATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getGatewayTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGatewayTemplateId(String id) throws RestException {
        GatewayTemplate obj = getObject(Constants.GATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getGatewayTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortTemplatesFetcher getPortTemplatesFetcherForGatewayTemplateId(String id) throws RestException {
        GatewayTemplate obj = getObject(Constants.GATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getGatewayTemplateById(id);
        }

        if (obj != null) {
            PortTemplatesFetcher fetcher = obj.getPortTemplates();
            return addFetcher(Constants.PORTTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GatewayTemplate> getGatewayTemplatesForFetcherId(String id) throws RestException {
        GatewayTemplatesFetcher fetcher = getGatewayTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GATEWAYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GatewayTemplate>();
    }

    public static GatewayTemplatesFetcher getGatewayTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GATEWAYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (GatewayTemplatesFetcher) fetcher;
        }
        if ((fetcher = getGatewayTemplatesFetcherForEnterpriseId(id)) != null) {
            return (GatewayTemplatesFetcher) addFetcher(Constants.GATEWAYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getGatewayTemplatesFetcherForMeId(id)) != null) {
            return (GatewayTemplatesFetcher) addFetcher(Constants.GATEWAYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GatewayTemplate> getAllGatewayTemplates() throws RestException {
        java.util.List<GatewayTemplate> allObjs = new ArrayList<GatewayTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            GatewayTemplatesFetcher fetcher = getGatewayTemplatesFetcherForMeId(session.getId());
            java.util.List<GatewayTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<GatewayTemplatesFetcher> getAllGatewayTemplatesFetchers() throws RestException {
        java.util.List<GatewayTemplatesFetcher> allObjs = new ArrayList<GatewayTemplatesFetcher>();
        return allObjs;
    }
    public static GlobalMetadata getGlobalMetadataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GlobalMetadata obj = null;
            obj = new GlobalMetadata();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GLOBALMETADATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGlobalMetadataId(String id) throws RestException {
        GlobalMetadata obj = getObject(Constants.GLOBALMETADATA, id);
        if (obj == null) {
            obj = getGlobalMetadataById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGlobalMetadataId(String id) throws RestException {
        GlobalMetadata obj = getObject(Constants.GLOBALMETADATA, id);
        if (obj == null) {
            obj = getGlobalMetadataById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGlobalMetadataId(String id) throws RestException {
        GlobalMetadata obj = getObject(Constants.GLOBALMETADATA, id);
        if (obj == null) {
            obj = getGlobalMetadataById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GlobalMetadata> getGlobalMetadatasForFetcherId(String id) throws RestException {
        GlobalMetadatasFetcher fetcher = getGlobalMetadatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GLOBALMETADATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GlobalMetadata>();
    }

    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GLOBALMETADATAS_FETCHER, id);
        if (fetcher != null) {
            return (GlobalMetadatasFetcher) fetcher;
        }
        if ((fetcher = getGlobalMetadatasFetcherForAddressMapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAddressRangeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAggregatedDomainId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAlarmId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAllAlarmId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAllGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAllRedundancyGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForApplicationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForApplicationBindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForApplicationperformancemanagementId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForApplicationperformancemanagementbindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAvatarId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForAzureCloudId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBFDSessionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBGPNeighborId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBGPPeerId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBGPProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBootstrapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBootstrapActivationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBRConnectionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBridgeInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForBulkStatisticsId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCertificateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCloudMgmtSystemId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVSDComponentId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForConnectionendpointId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForContainerId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForContainerInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForContainerResyncId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForControllerVRSLinkId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCOSRemarkingPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCOSRemarkingPolicyTableId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCSNATPoolId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCTranslationMapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForCustomPropertyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDefaultGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDemarcationServiceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDeploymentFailureId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDestinationurlId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDHCPOptionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDHCPv6OptionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDiskStatId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDomainId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDomainKindSummaryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDomainTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDSCPForwardingClassMappingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDSCPForwardingClassTableId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDSCPRemarkingPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDSCPRemarkingPolicyTableId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDUCGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDUCGroupBindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterEAMConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressACLEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressACLTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressAdvFwdEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressAdvFwdTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressAuditACLEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressAuditACLTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDomainFIPAclTemplateEntryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForDomainFIPAclTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEgressQOSPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterpriseId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterpriseNetworkId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterprisePermissionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterpriseProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterpriseSecuredDataId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEnterpriseSecurityId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEsIlmPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEsIndexConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForEventLogId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForFirewallAclId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForFirewallRuleId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForFloatingIpId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForForwardingPathListId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForForwardingPathListEntryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewayRedundantPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewaySecuredDataId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewaySecurityId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewaysLocationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGatewayTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGlobalMetadataId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGNMIProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGNMISessionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForGroupKeyEncryptionProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForHostInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForHSCId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKECertificateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEEncryptionprofileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEGatewayConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEGatewayConnectionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEGatewayProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKEPSKId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIKESubnetId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForInfrastructureConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForInfrastructureEVDFProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForInfrastructureGatewayProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForInfrastructureVscProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressACLEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressACLTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressAdvFwdEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressAdvFwdTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressAuditACLEntryTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressAuditACLTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIngressQOSPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIPFilterProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIPReservationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForIPv6FilterProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForJobId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForKeyServerMemberId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForKeyServerMonitorId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForKeyServerMonitorEncryptedSeedId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForKeyServerMonitorSeedId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForKeyServerMonitorSEKId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForL2DomainId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForL2DomainTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForL7applicationsignatureId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLDAPConfigurationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLicenseId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLicenseStatusId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLinkId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLocationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLTEInformationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForLtestatisticsId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMACFilterProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMirrorDestinationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMirrorDestinationGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMonitoringPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMonitorscopeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMultiCastChannelMapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMultiCastListId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMultiCastRangeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForMultiNICVPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNATMapEntryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetconfGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetconfManagerId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetconfProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetconfSessionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetworkLayoutId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetworkMacroGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetworkPerformanceBindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNetworkPerformanceMeasurementId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNextHopId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGatewayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGatewaysCountId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGatewaySummaryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGatewayTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSGRoutingPolicyBindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForNSPortTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRedundantPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOSPFAreaId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOSPFInstanceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOSPFInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOverlayAddressPoolId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOverlayMirrorDestinationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOverlayMirrorDestinationTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForOverlayPATNATEntryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPatchId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPATNATPoolId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPermissionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyDecisionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyEntryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyGroupCategoryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyGroupTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyObjectGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPolicyStatementId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPortTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPSNATPoolId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPSPATMapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPTranslationMapId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForPublicNetworkMacroId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForQOSId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForQosPolicerId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRateLimiterId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRedirectionTargetId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRedirectionTargetTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRedundancyGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRemoteVrsInfoId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVMResyncId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRoleId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRoleentryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRoutingPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForRoutingPolicyBindingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSaaSApplicationGroupId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSaaSApplicationTypeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSAPEgressQoSProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSAPIngressQoSProfileId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForWANServiceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSharedNetworkResourceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForShuntLinkId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSiteInfoId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSPATSourcesPoolId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSSHKeyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSSIDConnectionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForStaticRouteId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForStatisticsId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForStatsCollectorInfoId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForStatisticsPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSubnetId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSubnetTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForSystemConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTCAId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTestId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTestDefinitionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTestRunId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTestSuiteId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTestSuiteRunId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTierId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForTrunkId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForUnderlayId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForUplinkConnectionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForUplinkRDId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForUserId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForUserContextId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterClusterId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterDataCenterId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterHypervisorId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVirtualFirewallPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVirtualFirewallRuleId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVirtualIPId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVLANId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVLANTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVMId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVMInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVMIPReservationId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFCatalogId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFDescriptorId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFDomainMappingId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFInterfaceId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFInterfaceDescriptorId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFMetadataId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVNFThresholdPolicyId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVPNConnectionId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVPortMirrorId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVRSId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVRSAddressRangeId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVCenterVRSConfigId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForvrsInfoId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVSCId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVSDId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVsgRedundantPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForVSPId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForWebCategoryId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForWebDomainNameId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForWirelessPortId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForZFBRequestId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForZoneId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGlobalMetadatasFetcherForZoneTemplateId(id)) != null) {
            return (GlobalMetadatasFetcher) addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GlobalMetadata> getAllGlobalMetadatas() throws RestException {
        java.util.List<GlobalMetadata> allObjs = new ArrayList<GlobalMetadata>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            GlobalMetadatasFetcher fetcher = getGlobalMetadatasFetcherForMeId(session.getId());
            java.util.List<GlobalMetadata> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<GlobalMetadatasFetcher> getAllGlobalMetadatasFetchers() throws RestException {
        java.util.List<GlobalMetadatasFetcher> allObjs = new ArrayList<GlobalMetadatasFetcher>();
        return allObjs;
    }
    public static GNMIProfile getGNMIProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GNMIProfile obj = null;
            obj = new GNMIProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GNMIPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGNMIProfileId(String id) throws RestException {
        GNMIProfile obj = getObject(Constants.GNMIPROFILE, id);
        if (obj == null) {
            obj = getGNMIProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGNMIProfileId(String id) throws RestException {
        GNMIProfile obj = getObject(Constants.GNMIPROFILE, id);
        if (obj == null) {
            obj = getGNMIProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GNMIProfile> getGNMIProfilesForFetcherId(String id) throws RestException {
        GNMIProfilesFetcher fetcher = getGNMIProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GNMIPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GNMIProfile>();
    }

    public static GNMIProfilesFetcher getGNMIProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GNMIPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (GNMIProfilesFetcher) fetcher;
        }
        if ((fetcher = getGNMIProfilesFetcherForEnterpriseId(id)) != null) {
            return (GNMIProfilesFetcher) addFetcher(Constants.GNMIPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GNMIProfile> getAllGNMIProfiles() throws RestException {
        java.util.List<GNMIProfile> allObjs = new ArrayList<GNMIProfile>();

        return allObjs;
    }

    public static java.util.List<GNMIProfilesFetcher> getAllGNMIProfilesFetchers() throws RestException {
        java.util.List<GNMIProfilesFetcher> allObjs = new ArrayList<GNMIProfilesFetcher>();
        return allObjs;
    }
    public static GNMISession getGNMISessionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GNMISession obj = null;
            obj = new GNMISession();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GNMISESSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGNMISessionId(String id) throws RestException {
        GNMISession obj = getObject(Constants.GNMISESSION, id);
        if (obj == null) {
            obj = getGNMISessionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGNMISessionId(String id) throws RestException {
        GNMISession obj = getObject(Constants.GNMISESSION, id);
        if (obj == null) {
            obj = getGNMISessionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GNMISession> getGNMISessionsForFetcherId(String id) throws RestException {
        GNMISessionsFetcher fetcher = getGNMISessionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GNMISESSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GNMISession>();
    }

    public static GNMISessionsFetcher getGNMISessionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GNMISESSIONS_FETCHER, id);
        if (fetcher != null) {
            return (GNMISessionsFetcher) fetcher;
        }
        if ((fetcher = getGNMISessionsFetcherForNetconfManagerId(id)) != null) {
            return (GNMISessionsFetcher) addFetcher(Constants.GNMISESSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GNMISession> getAllGNMISessions() throws RestException {
        java.util.List<GNMISession> allObjs = new ArrayList<GNMISession>();

        return allObjs;
    }

    public static java.util.List<GNMISessionsFetcher> getAllGNMISessionsFetchers() throws RestException {
        java.util.List<GNMISessionsFetcher> allObjs = new ArrayList<GNMISessionsFetcher>();
        return allObjs;
    }
    public static Group getGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Group obj = null;
            obj = new Group();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForGroupId(String id) throws RestException {
        Group obj = getObject(Constants.GROUP, id);
        if (obj == null) {
            obj = getGroupById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGroupId(String id) throws RestException {
        Group obj = getObject(Constants.GROUP, id);
        if (obj == null) {
            obj = getGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGroupId(String id) throws RestException {
        Group obj = getObject(Constants.GROUP, id);
        if (obj == null) {
            obj = getGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGroupId(String id) throws RestException {
        Group obj = getObject(Constants.GROUP, id);
        if (obj == null) {
            obj = getGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UsersFetcher getUsersFetcherForGroupId(String id) throws RestException {
        Group obj = getObject(Constants.GROUP, id);
        if (obj == null) {
            obj = getGroupById(id);
        }

        if (obj != null) {
            UsersFetcher fetcher = obj.getUsers();
            return addFetcher(Constants.USERS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Group> getGroupsForFetcherId(String id) throws RestException {
        GroupsFetcher fetcher = getGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Group>();
    }

    public static GroupsFetcher getGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GROUPS_FETCHER, id);
        if (fetcher != null) {
            return (GroupsFetcher) fetcher;
        }
        if ((fetcher = getGroupsFetcherForAggregatedDomainId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForDomainId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForDomainTemplateId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForEnterpriseId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForL2DomainId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForL2DomainTemplateId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForUserId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getGroupsFetcherForZoneId(id)) != null) {
            return (GroupsFetcher) addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Group> getAllGroups() throws RestException {
        java.util.List<Group> allObjs = new ArrayList<Group>();

        return allObjs;
    }

    public static java.util.List<GroupsFetcher> getAllGroupsFetchers() throws RestException {
        java.util.List<GroupsFetcher> allObjs = new ArrayList<GroupsFetcher>();
        return allObjs;
    }
    public static GroupKeyEncryptionProfile getGroupKeyEncryptionProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            GroupKeyEncryptionProfile obj = null;
            obj = new GroupKeyEncryptionProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.GROUPKEYENCRYPTIONPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForGroupKeyEncryptionProfileId(String id) throws RestException {
        GroupKeyEncryptionProfile obj = getObject(Constants.GROUPKEYENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getGroupKeyEncryptionProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForGroupKeyEncryptionProfileId(String id) throws RestException {
        GroupKeyEncryptionProfile obj = getObject(Constants.GROUPKEYENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getGroupKeyEncryptionProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForGroupKeyEncryptionProfileId(String id) throws RestException {
        GroupKeyEncryptionProfile obj = getObject(Constants.GROUPKEYENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getGroupKeyEncryptionProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<GroupKeyEncryptionProfile> getGroupKeyEncryptionProfilesForFetcherId(String id) throws RestException {
        GroupKeyEncryptionProfilesFetcher fetcher = getGroupKeyEncryptionProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.GROUPKEYENCRYPTIONPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<GroupKeyEncryptionProfile>();
    }

    public static GroupKeyEncryptionProfilesFetcher getGroupKeyEncryptionProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.GROUPKEYENCRYPTIONPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (GroupKeyEncryptionProfilesFetcher) fetcher;
        }
        if ((fetcher = getGroupKeyEncryptionProfilesFetcherForEnterpriseId(id)) != null) {
            return (GroupKeyEncryptionProfilesFetcher) addFetcher(Constants.GROUPKEYENCRYPTIONPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<GroupKeyEncryptionProfile> getAllGroupKeyEncryptionProfiles() throws RestException {
        java.util.List<GroupKeyEncryptionProfile> allObjs = new ArrayList<GroupKeyEncryptionProfile>();

        return allObjs;
    }

    public static java.util.List<GroupKeyEncryptionProfilesFetcher> getAllGroupKeyEncryptionProfilesFetchers() throws RestException {
        java.util.List<GroupKeyEncryptionProfilesFetcher> allObjs = new ArrayList<GroupKeyEncryptionProfilesFetcher>();
        return allObjs;
    }
    public static HostInterface getHostInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            HostInterface obj = null;
            obj = new HostInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.HOSTINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            MultiCastChannelMapsFetcher fetcher = obj.getMultiCastChannelMaps();
            return addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyDecisionsFetcher getPolicyDecisionsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            PolicyDecisionsFetcher fetcher = obj.getPolicyDecisions();
            return addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForHostInterfaceId(String id) throws RestException {
        HostInterface obj = getObject(Constants.HOSTINTERFACE, id);
        if (obj == null) {
            obj = getHostInterfaceById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<HostInterface> getHostInterfacesForFetcherId(String id) throws RestException {
        HostInterfacesFetcher fetcher = getHostInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.HOSTINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<HostInterface>();
    }

    public static HostInterfacesFetcher getHostInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.HOSTINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (HostInterfacesFetcher) fetcher;
        }
        if ((fetcher = getHostInterfacesFetcherForAggregatedDomainId(id)) != null) {
            return (HostInterfacesFetcher) addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getHostInterfacesFetcherForDomainId(id)) != null) {
            return (HostInterfacesFetcher) addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getHostInterfacesFetcherForL2DomainId(id)) != null) {
            return (HostInterfacesFetcher) addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getHostInterfacesFetcherForMeId(id)) != null) {
            return (HostInterfacesFetcher) addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getHostInterfacesFetcherForVPortId(id)) != null) {
            return (HostInterfacesFetcher) addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<HostInterface> getAllHostInterfaces() throws RestException {
        java.util.List<HostInterface> allObjs = new ArrayList<HostInterface>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            HostInterfacesFetcher fetcher = getHostInterfacesFetcherForMeId(session.getId());
            java.util.List<HostInterface> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<HostInterfacesFetcher> getAllHostInterfacesFetchers() throws RestException {
        java.util.List<HostInterfacesFetcher> allObjs = new ArrayList<HostInterfacesFetcher>();
        return allObjs;
    }
    public static HSC getHSCById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            HSC obj = null;
            obj = new HSC();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.HSC, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPPeersFetcher getBGPPeersFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            BGPPeersFetcher fetcher = obj.getBGPPeers();
            return addFetcher(Constants.BGPPEERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ControllerVRSLinksFetcher getControllerVRSLinksFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            ControllerVRSLinksFetcher fetcher = obj.getControllerVRSLinks();
            return addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MonitoringPortsFetcher getMonitoringPortsFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            MonitoringPortsFetcher fetcher = obj.getMonitoringPorts();
            return addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForHSCId(String id) throws RestException {
        HSC obj = getObject(Constants.HSC, id);
        if (obj == null) {
            obj = getHSCById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<HSC> getHSCsForFetcherId(String id) throws RestException {
        HSCsFetcher fetcher = getHSCsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.HSC);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<HSC>();
    }

    public static HSCsFetcher getHSCsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.HSCS_FETCHER, id);
        if (fetcher != null) {
            return (HSCsFetcher) fetcher;
        }
        if ((fetcher = getHSCsFetcherForControllerVRSLinkId(id)) != null) {
            return (HSCsFetcher) addFetcher(Constants.HSCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getHSCsFetcherForVRSId(id)) != null) {
            return (HSCsFetcher) addFetcher(Constants.HSCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getHSCsFetcherForVSPId(id)) != null) {
            return (HSCsFetcher) addFetcher(Constants.HSCS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<HSC> getAllHSCs() throws RestException {
        java.util.List<HSC> allObjs = new ArrayList<HSC>();

        return allObjs;
    }

    public static java.util.List<HSCsFetcher> getAllHSCsFetchers() throws RestException {
        java.util.List<HSCsFetcher> allObjs = new ArrayList<HSCsFetcher>();
        return allObjs;
    }
    public static ICMPEchoTestDefinition getICMPEchoTestDefinitionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ICMPEchoTestDefinition obj = null;
            obj = new ICMPEchoTestDefinition();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ICMPECHOTESTDEFINITION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ICMPEchoTestDefinition> getICMPEchoTestDefinitionsForFetcherId(String id) throws RestException {
        ICMPEchoTestDefinitionsFetcher fetcher = getICMPEchoTestDefinitionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ICMPECHOTESTDEFINITION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ICMPEchoTestDefinition>();
    }

    public static ICMPEchoTestDefinitionsFetcher getICMPEchoTestDefinitionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ICMPECHOTESTDEFINITIONS_FETCHER, id);
        if (fetcher != null) {
            return (ICMPEchoTestDefinitionsFetcher) fetcher;
        }
        if ((fetcher = getICMPEchoTestDefinitionsFetcherForEnterpriseId(id)) != null) {
            return (ICMPEchoTestDefinitionsFetcher) addFetcher(Constants.ICMPECHOTESTDEFINITIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ICMPEchoTestDefinition> getAllICMPEchoTestDefinitions() throws RestException {
        java.util.List<ICMPEchoTestDefinition> allObjs = new ArrayList<ICMPEchoTestDefinition>();

        return allObjs;
    }

    public static java.util.List<ICMPEchoTestDefinitionsFetcher> getAllICMPEchoTestDefinitionsFetchers() throws RestException {
        java.util.List<ICMPEchoTestDefinitionsFetcher> allObjs = new ArrayList<ICMPEchoTestDefinitionsFetcher>();
        return allObjs;
    }
    public static IDPProfile getIDPProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IDPProfile obj = null;
            obj = new IDPProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IDPPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static IDPProfileActionsFetcher getIDPProfileActionsFetcherForIDPProfileId(String id) throws RestException {
        IDPProfile obj = getObject(Constants.IDPPROFILE, id);
        if (obj == null) {
            obj = getIDPProfileById(id);
        }

        if (obj != null) {
            IDPProfileActionsFetcher fetcher = obj.getIDPProfileActions();
            return addFetcher(Constants.IDPPROFILEACTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IDPProfile> getIDPProfilesForFetcherId(String id) throws RestException {
        IDPProfilesFetcher fetcher = getIDPProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IDPPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IDPProfile>();
    }

    public static IDPProfilesFetcher getIDPProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IDPPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IDPProfilesFetcher) fetcher;
        }
        if ((fetcher = getIDPProfilesFetcherForEnterpriseId(id)) != null) {
            return (IDPProfilesFetcher) addFetcher(Constants.IDPPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IDPProfile> getAllIDPProfiles() throws RestException {
        java.util.List<IDPProfile> allObjs = new ArrayList<IDPProfile>();

        return allObjs;
    }

    public static java.util.List<IDPProfilesFetcher> getAllIDPProfilesFetchers() throws RestException {
        java.util.List<IDPProfilesFetcher> allObjs = new ArrayList<IDPProfilesFetcher>();
        return allObjs;
    }
    public static IDPProfileAction getIDPProfileActionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IDPProfileAction obj = null;
            obj = new IDPProfileAction();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IDPPROFILEACTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<IDPProfileAction> getIDPProfileActionsForFetcherId(String id) throws RestException {
        IDPProfileActionsFetcher fetcher = getIDPProfileActionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IDPPROFILEACTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IDPProfileAction>();
    }

    public static IDPProfileActionsFetcher getIDPProfileActionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IDPPROFILEACTIONS_FETCHER, id);
        if (fetcher != null) {
            return (IDPProfileActionsFetcher) fetcher;
        }
        if ((fetcher = getIDPProfileActionsFetcherForIDPProfileId(id)) != null) {
            return (IDPProfileActionsFetcher) addFetcher(Constants.IDPPROFILEACTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IDPProfileAction> getAllIDPProfileActions() throws RestException {
        java.util.List<IDPProfileAction> allObjs = new ArrayList<IDPProfileAction>();

        return allObjs;
    }

    public static java.util.List<IDPProfileActionsFetcher> getAllIDPProfileActionsFetchers() throws RestException {
        java.util.List<IDPProfileActionsFetcher> allObjs = new ArrayList<IDPProfileActionsFetcher>();
        return allObjs;
    }
    public static IDPSignature getIDPSignatureById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IDPSignature obj = null;
            obj = new IDPSignature();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IDPSIGNATURE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<IDPSignature> getIDPSignaturesForFetcherId(String id) throws RestException {
        IDPSignaturesFetcher fetcher = getIDPSignaturesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IDPSIGNATURE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IDPSignature>();
    }

    public static IDPSignaturesFetcher getIDPSignaturesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IDPSIGNATURES_FETCHER, id);
        if (fetcher != null) {
            return (IDPSignaturesFetcher) fetcher;
        }return null;
    }

    public static java.util.List<IDPSignature> getAllIDPSignatures() throws RestException {
        java.util.List<IDPSignature> allObjs = new ArrayList<IDPSignature>();

        return allObjs;
    }

    public static java.util.List<IDPSignaturesFetcher> getAllIDPSignaturesFetchers() throws RestException {
        java.util.List<IDPSignaturesFetcher> allObjs = new ArrayList<IDPSignaturesFetcher>();
        return allObjs;
    }
    public static IKECertificate getIKECertificateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKECertificate obj = null;
            obj = new IKECertificate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKECERTIFICATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKECertificateId(String id) throws RestException {
        IKECertificate obj = getObject(Constants.IKECERTIFICATE, id);
        if (obj == null) {
            obj = getIKECertificateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKECertificateId(String id) throws RestException {
        IKECertificate obj = getObject(Constants.IKECERTIFICATE, id);
        if (obj == null) {
            obj = getIKECertificateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKECertificateId(String id) throws RestException {
        IKECertificate obj = getObject(Constants.IKECERTIFICATE, id);
        if (obj == null) {
            obj = getIKECertificateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKECertificate> getIKECertificatesForFetcherId(String id) throws RestException {
        IKECertificatesFetcher fetcher = getIKECertificatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKECERTIFICATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKECertificate>();
    }

    public static IKECertificatesFetcher getIKECertificatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKECERTIFICATES_FETCHER, id);
        if (fetcher != null) {
            return (IKECertificatesFetcher) fetcher;
        }
        if ((fetcher = getIKECertificatesFetcherForEnterpriseId(id)) != null) {
            return (IKECertificatesFetcher) addFetcher(Constants.IKECERTIFICATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKECertificate> getAllIKECertificates() throws RestException {
        java.util.List<IKECertificate> allObjs = new ArrayList<IKECertificate>();

        return allObjs;
    }

    public static java.util.List<IKECertificatesFetcher> getAllIKECertificatesFetchers() throws RestException {
        java.util.List<IKECertificatesFetcher> allObjs = new ArrayList<IKECertificatesFetcher>();
        return allObjs;
    }
    public static IKEEncryptionprofile getIKEEncryptionprofileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEEncryptionprofile obj = null;
            obj = new IKEEncryptionprofile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEENCRYPTIONPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEEncryptionprofileId(String id) throws RestException {
        IKEEncryptionprofile obj = getObject(Constants.IKEENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getIKEEncryptionprofileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEEncryptionprofileId(String id) throws RestException {
        IKEEncryptionprofile obj = getObject(Constants.IKEENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getIKEEncryptionprofileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEEncryptionprofileId(String id) throws RestException {
        IKEEncryptionprofile obj = getObject(Constants.IKEENCRYPTIONPROFILE, id);
        if (obj == null) {
            obj = getIKEEncryptionprofileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEEncryptionprofile> getIKEEncryptionprofilesForFetcherId(String id) throws RestException {
        IKEEncryptionprofilesFetcher fetcher = getIKEEncryptionprofilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEENCRYPTIONPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEEncryptionprofile>();
    }

    public static IKEEncryptionprofilesFetcher getIKEEncryptionprofilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEENCRYPTIONPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IKEEncryptionprofilesFetcher) fetcher;
        }
        if ((fetcher = getIKEEncryptionprofilesFetcherForEnterpriseId(id)) != null) {
            return (IKEEncryptionprofilesFetcher) addFetcher(Constants.IKEENCRYPTIONPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEEncryptionprofile> getAllIKEEncryptionprofiles() throws RestException {
        java.util.List<IKEEncryptionprofile> allObjs = new ArrayList<IKEEncryptionprofile>();

        return allObjs;
    }

    public static java.util.List<IKEEncryptionprofilesFetcher> getAllIKEEncryptionprofilesFetchers() throws RestException {
        java.util.List<IKEEncryptionprofilesFetcher> allObjs = new ArrayList<IKEEncryptionprofilesFetcher>();
        return allObjs;
    }
    public static IKEGateway getIKEGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEGateway obj = null;
            obj = new IKEGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEGatewayId(String id) throws RestException {
        IKEGateway obj = getObject(Constants.IKEGATEWAY, id);
        if (obj == null) {
            obj = getIKEGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewayConfigsFetcher getIKEGatewayConfigsFetcherForIKEGatewayId(String id) throws RestException {
        IKEGateway obj = getObject(Constants.IKEGATEWAY, id);
        if (obj == null) {
            obj = getIKEGatewayById(id);
        }

        if (obj != null) {
            IKEGatewayConfigsFetcher fetcher = obj.getIKEGatewayConfigs();
            return addFetcher(Constants.IKEGATEWAYCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKESubnetsFetcher getIKESubnetsFetcherForIKEGatewayId(String id) throws RestException {
        IKEGateway obj = getObject(Constants.IKEGATEWAY, id);
        if (obj == null) {
            obj = getIKEGatewayById(id);
        }

        if (obj != null) {
            IKESubnetsFetcher fetcher = obj.getIKESubnets();
            return addFetcher(Constants.IKESUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEGatewayId(String id) throws RestException {
        IKEGateway obj = getObject(Constants.IKEGATEWAY, id);
        if (obj == null) {
            obj = getIKEGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEGatewayId(String id) throws RestException {
        IKEGateway obj = getObject(Constants.IKEGATEWAY, id);
        if (obj == null) {
            obj = getIKEGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEGateway> getIKEGatewaysForFetcherId(String id) throws RestException {
        IKEGatewaysFetcher fetcher = getIKEGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEGateway>();
    }

    public static IKEGatewaysFetcher getIKEGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (IKEGatewaysFetcher) fetcher;
        }
        if ((fetcher = getIKEGatewaysFetcherForEnterpriseId(id)) != null) {
            return (IKEGatewaysFetcher) addFetcher(Constants.IKEGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEGateway> getAllIKEGateways() throws RestException {
        java.util.List<IKEGateway> allObjs = new ArrayList<IKEGateway>();

        return allObjs;
    }

    public static java.util.List<IKEGatewaysFetcher> getAllIKEGatewaysFetchers() throws RestException {
        java.util.List<IKEGatewaysFetcher> allObjs = new ArrayList<IKEGatewaysFetcher>();
        return allObjs;
    }
    public static IKEGatewayConfig getIKEGatewayConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEGatewayConfig obj = null;
            obj = new IKEGatewayConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEGATEWAYCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEGatewayConfigId(String id) throws RestException {
        IKEGatewayConfig obj = getObject(Constants.IKEGATEWAYCONFIG, id);
        if (obj == null) {
            obj = getIKEGatewayConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEGatewayConfigId(String id) throws RestException {
        IKEGatewayConfig obj = getObject(Constants.IKEGATEWAYCONFIG, id);
        if (obj == null) {
            obj = getIKEGatewayConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEGatewayConfigId(String id) throws RestException {
        IKEGatewayConfig obj = getObject(Constants.IKEGATEWAYCONFIG, id);
        if (obj == null) {
            obj = getIKEGatewayConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEGatewayConfig> getIKEGatewayConfigsForFetcherId(String id) throws RestException {
        IKEGatewayConfigsFetcher fetcher = getIKEGatewayConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEGATEWAYCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEGatewayConfig>();
    }

    public static IKEGatewayConfigsFetcher getIKEGatewayConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEGATEWAYCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (IKEGatewayConfigsFetcher) fetcher;
        }
        if ((fetcher = getIKEGatewayConfigsFetcherForIKEGatewayId(id)) != null) {
            return (IKEGatewayConfigsFetcher) addFetcher(Constants.IKEGATEWAYCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEGatewayConfig> getAllIKEGatewayConfigs() throws RestException {
        java.util.List<IKEGatewayConfig> allObjs = new ArrayList<IKEGatewayConfig>();

        return allObjs;
    }

    public static java.util.List<IKEGatewayConfigsFetcher> getAllIKEGatewayConfigsFetchers() throws RestException {
        java.util.List<IKEGatewayConfigsFetcher> allObjs = new ArrayList<IKEGatewayConfigsFetcher>();
        return allObjs;
    }
    public static IKEGatewayConnection getIKEGatewayConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEGatewayConnection obj = null;
            obj = new IKEGatewayConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEGATEWAYCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PerformanceMonitorsFetcher getPerformanceMonitorsFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            PerformanceMonitorsFetcher fetcher = obj.getPerformanceMonitors();
            return addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForIKEGatewayConnectionId(String id) throws RestException {
        IKEGatewayConnection obj = getObject(Constants.IKEGATEWAYCONNECTION, id);
        if (obj == null) {
            obj = getIKEGatewayConnectionById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEGatewayConnection> getIKEGatewayConnectionsForFetcherId(String id) throws RestException {
        IKEGatewayConnectionsFetcher fetcher = getIKEGatewayConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEGATEWAYCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEGatewayConnection>();
    }

    public static IKEGatewayConnectionsFetcher getIKEGatewayConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (IKEGatewayConnectionsFetcher) fetcher;
        }
        if ((fetcher = getIKEGatewayConnectionsFetcherForSubnetId(id)) != null) {
            return (IKEGatewayConnectionsFetcher) addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getIKEGatewayConnectionsFetcherForVirtualUplinkId(id)) != null) {
            return (IKEGatewayConnectionsFetcher) addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getIKEGatewayConnectionsFetcherForVLANId(id)) != null) {
            return (IKEGatewayConnectionsFetcher) addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEGatewayConnection> getAllIKEGatewayConnections() throws RestException {
        java.util.List<IKEGatewayConnection> allObjs = new ArrayList<IKEGatewayConnection>();

        return allObjs;
    }

    public static java.util.List<IKEGatewayConnectionsFetcher> getAllIKEGatewayConnectionsFetchers() throws RestException {
        java.util.List<IKEGatewayConnectionsFetcher> allObjs = new ArrayList<IKEGatewayConnectionsFetcher>();
        return allObjs;
    }
    public static IKEGatewayProfile getIKEGatewayProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEGatewayProfile obj = null;
            obj = new IKEGatewayProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEGATEWAYPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEGatewayProfileId(String id) throws RestException {
        IKEGatewayProfile obj = getObject(Constants.IKEGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getIKEGatewayProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEGatewayProfileId(String id) throws RestException {
        IKEGatewayProfile obj = getObject(Constants.IKEGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getIKEGatewayProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEGatewayProfileId(String id) throws RestException {
        IKEGatewayProfile obj = getObject(Constants.IKEGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getIKEGatewayProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEGatewayProfile> getIKEGatewayProfilesForFetcherId(String id) throws RestException {
        IKEGatewayProfilesFetcher fetcher = getIKEGatewayProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEGATEWAYPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEGatewayProfile>();
    }

    public static IKEGatewayProfilesFetcher getIKEGatewayProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEGATEWAYPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IKEGatewayProfilesFetcher) fetcher;
        }
        if ((fetcher = getIKEGatewayProfilesFetcherForAzureCloudId(id)) != null) {
            return (IKEGatewayProfilesFetcher) addFetcher(Constants.IKEGATEWAYPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIKEGatewayProfilesFetcherForEnterpriseId(id)) != null) {
            return (IKEGatewayProfilesFetcher) addFetcher(Constants.IKEGATEWAYPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEGatewayProfile> getAllIKEGatewayProfiles() throws RestException {
        java.util.List<IKEGatewayProfile> allObjs = new ArrayList<IKEGatewayProfile>();

        return allObjs;
    }

    public static java.util.List<IKEGatewayProfilesFetcher> getAllIKEGatewayProfilesFetchers() throws RestException {
        java.util.List<IKEGatewayProfilesFetcher> allObjs = new ArrayList<IKEGatewayProfilesFetcher>();
        return allObjs;
    }
    public static IKEPSK getIKEPSKById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKEPSK obj = null;
            obj = new IKEPSK();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKEPSK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKEPSKId(String id) throws RestException {
        IKEPSK obj = getObject(Constants.IKEPSK, id);
        if (obj == null) {
            obj = getIKEPSKById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKEPSKId(String id) throws RestException {
        IKEPSK obj = getObject(Constants.IKEPSK, id);
        if (obj == null) {
            obj = getIKEPSKById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKEPSKId(String id) throws RestException {
        IKEPSK obj = getObject(Constants.IKEPSK, id);
        if (obj == null) {
            obj = getIKEPSKById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKEPSK> getIKEPSKsForFetcherId(String id) throws RestException {
        IKEPSKsFetcher fetcher = getIKEPSKsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKEPSK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKEPSK>();
    }

    public static IKEPSKsFetcher getIKEPSKsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKEPSKS_FETCHER, id);
        if (fetcher != null) {
            return (IKEPSKsFetcher) fetcher;
        }
        if ((fetcher = getIKEPSKsFetcherForEnterpriseId(id)) != null) {
            return (IKEPSKsFetcher) addFetcher(Constants.IKEPSKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKEPSK> getAllIKEPSKs() throws RestException {
        java.util.List<IKEPSK> allObjs = new ArrayList<IKEPSK>();

        return allObjs;
    }

    public static java.util.List<IKEPSKsFetcher> getAllIKEPSKsFetchers() throws RestException {
        java.util.List<IKEPSKsFetcher> allObjs = new ArrayList<IKEPSKsFetcher>();
        return allObjs;
    }
    public static IKESubnet getIKESubnetById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IKESubnet obj = null;
            obj = new IKESubnet();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IKESUBNET, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIKESubnetId(String id) throws RestException {
        IKESubnet obj = getObject(Constants.IKESUBNET, id);
        if (obj == null) {
            obj = getIKESubnetById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIKESubnetId(String id) throws RestException {
        IKESubnet obj = getObject(Constants.IKESUBNET, id);
        if (obj == null) {
            obj = getIKESubnetById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIKESubnetId(String id) throws RestException {
        IKESubnet obj = getObject(Constants.IKESUBNET, id);
        if (obj == null) {
            obj = getIKESubnetById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IKESubnet> getIKESubnetsForFetcherId(String id) throws RestException {
        IKESubnetsFetcher fetcher = getIKESubnetsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IKESUBNET);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IKESubnet>();
    }

    public static IKESubnetsFetcher getIKESubnetsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IKESUBNETS_FETCHER, id);
        if (fetcher != null) {
            return (IKESubnetsFetcher) fetcher;
        }
        if ((fetcher = getIKESubnetsFetcherForIKEGatewayId(id)) != null) {
            return (IKESubnetsFetcher) addFetcher(Constants.IKESUBNETS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IKESubnet> getAllIKESubnets() throws RestException {
        java.util.List<IKESubnet> allObjs = new ArrayList<IKESubnet>();

        return allObjs;
    }

    public static java.util.List<IKESubnetsFetcher> getAllIKESubnetsFetchers() throws RestException {
        java.util.List<IKESubnetsFetcher> allObjs = new ArrayList<IKESubnetsFetcher>();
        return allObjs;
    }
    public static InfrastructureConfig getInfrastructureConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureConfig obj = null;
            obj = new InfrastructureConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INFRASTRUCTURECONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForInfrastructureConfigId(String id) throws RestException {
        InfrastructureConfig obj = getObject(Constants.INFRASTRUCTURECONFIG, id);
        if (obj == null) {
            obj = getInfrastructureConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForInfrastructureConfigId(String id) throws RestException {
        InfrastructureConfig obj = getObject(Constants.INFRASTRUCTURECONFIG, id);
        if (obj == null) {
            obj = getInfrastructureConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForInfrastructureConfigId(String id) throws RestException {
        InfrastructureConfig obj = getObject(Constants.INFRASTRUCTURECONFIG, id);
        if (obj == null) {
            obj = getInfrastructureConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<InfrastructureConfig> getInfrastructureConfigsForFetcherId(String id) throws RestException {
        InfrastructureConfigsFetcher fetcher = getInfrastructureConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INFRASTRUCTURECONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<InfrastructureConfig>();
    }

    public static InfrastructureConfigsFetcher getInfrastructureConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (InfrastructureConfigsFetcher) fetcher;
        }
        if ((fetcher = getInfrastructureConfigsFetcherForGatewayId(id)) != null) {
            return (InfrastructureConfigsFetcher) addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getInfrastructureConfigsFetcherForNetconfGatewayId(id)) != null) {
            return (InfrastructureConfigsFetcher) addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getInfrastructureConfigsFetcherForNSGatewayId(id)) != null) {
            return (InfrastructureConfigsFetcher) addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<InfrastructureConfig> getAllInfrastructureConfigs() throws RestException {
        java.util.List<InfrastructureConfig> allObjs = new ArrayList<InfrastructureConfig>();

        return allObjs;
    }

    public static java.util.List<InfrastructureConfigsFetcher> getAllInfrastructureConfigsFetchers() throws RestException {
        java.util.List<InfrastructureConfigsFetcher> allObjs = new ArrayList<InfrastructureConfigsFetcher>();
        return allObjs;
    }
    public static InfrastructureAccessProfile getInfrastructureAccessProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureAccessProfile obj = null;
            obj = new InfrastructureAccessProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INFRASTRUCTUREACCESSPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ConnectionendpointsFetcher getConnectionendpointsFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            ConnectionendpointsFetcher fetcher = obj.getConnectionendpoints();
            return addFetcher(Constants.CONNECTIONENDPOINTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewayTemplatesFetcher getNSGatewayTemplatesFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            NSGatewayTemplatesFetcher fetcher = obj.getNSGatewayTemplates();
            return addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SSHKeysFetcher getSSHKeysFetcherForInfrastructureAccessProfileId(String id) throws RestException {
        InfrastructureAccessProfile obj = getObject(Constants.INFRASTRUCTUREACCESSPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureAccessProfileById(id);
        }

        if (obj != null) {
            SSHKeysFetcher fetcher = obj.getSSHKeys();
            return addFetcher(Constants.SSHKEYS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<InfrastructureAccessProfile> getInfrastructureAccessProfilesForFetcherId(String id) throws RestException {
        InfrastructureAccessProfilesFetcher fetcher = getInfrastructureAccessProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INFRASTRUCTUREACCESSPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<InfrastructureAccessProfile>();
    }

    public static InfrastructureAccessProfilesFetcher getInfrastructureAccessProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INFRASTRUCTUREACCESSPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (InfrastructureAccessProfilesFetcher) fetcher;
        }
        if ((fetcher = getInfrastructureAccessProfilesFetcherForMeId(id)) != null) {
            return (InfrastructureAccessProfilesFetcher) addFetcher(Constants.INFRASTRUCTUREACCESSPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<InfrastructureAccessProfile> getAllInfrastructureAccessProfiles() throws RestException {
        java.util.List<InfrastructureAccessProfile> allObjs = new ArrayList<InfrastructureAccessProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureAccessProfilesFetcher fetcher = getInfrastructureAccessProfilesFetcherForMeId(session.getId());
            java.util.List<InfrastructureAccessProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<InfrastructureAccessProfilesFetcher> getAllInfrastructureAccessProfilesFetchers() throws RestException {
        java.util.List<InfrastructureAccessProfilesFetcher> allObjs = new ArrayList<InfrastructureAccessProfilesFetcher>();
        return allObjs;
    }
    public static InfrastructureEVDFProfile getInfrastructureEVDFProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureEVDFProfile obj = null;
            obj = new InfrastructureEVDFProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INFRASTRUCTUREEVDFPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForInfrastructureEVDFProfileId(String id) throws RestException {
        InfrastructureEVDFProfile obj = getObject(Constants.INFRASTRUCTUREEVDFPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureEVDFProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForInfrastructureEVDFProfileId(String id) throws RestException {
        InfrastructureEVDFProfile obj = getObject(Constants.INFRASTRUCTUREEVDFPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureEVDFProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForInfrastructureEVDFProfileId(String id) throws RestException {
        InfrastructureEVDFProfile obj = getObject(Constants.INFRASTRUCTUREEVDFPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureEVDFProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<InfrastructureEVDFProfile> getInfrastructureEVDFProfilesForFetcherId(String id) throws RestException {
        InfrastructureEVDFProfilesFetcher fetcher = getInfrastructureEVDFProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INFRASTRUCTUREEVDFPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<InfrastructureEVDFProfile>();
    }

    public static InfrastructureEVDFProfilesFetcher getInfrastructureEVDFProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INFRASTRUCTUREEVDFPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (InfrastructureEVDFProfilesFetcher) fetcher;
        }
        if ((fetcher = getInfrastructureEVDFProfilesFetcherForMeId(id)) != null) {
            return (InfrastructureEVDFProfilesFetcher) addFetcher(Constants.INFRASTRUCTUREEVDFPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<InfrastructureEVDFProfile> getAllInfrastructureEVDFProfiles() throws RestException {
        java.util.List<InfrastructureEVDFProfile> allObjs = new ArrayList<InfrastructureEVDFProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureEVDFProfilesFetcher fetcher = getInfrastructureEVDFProfilesFetcherForMeId(session.getId());
            java.util.List<InfrastructureEVDFProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<InfrastructureEVDFProfilesFetcher> getAllInfrastructureEVDFProfilesFetchers() throws RestException {
        java.util.List<InfrastructureEVDFProfilesFetcher> allObjs = new ArrayList<InfrastructureEVDFProfilesFetcher>();
        return allObjs;
    }
    public static InfrastructureGatewayProfile getInfrastructureGatewayProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureGatewayProfile obj = null;
            obj = new InfrastructureGatewayProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INFRASTRUCTUREGATEWAYPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForInfrastructureGatewayProfileId(String id) throws RestException {
        InfrastructureGatewayProfile obj = getObject(Constants.INFRASTRUCTUREGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureGatewayProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForInfrastructureGatewayProfileId(String id) throws RestException {
        InfrastructureGatewayProfile obj = getObject(Constants.INFRASTRUCTUREGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureGatewayProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForInfrastructureGatewayProfileId(String id) throws RestException {
        InfrastructureGatewayProfile obj = getObject(Constants.INFRASTRUCTUREGATEWAYPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureGatewayProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<InfrastructureGatewayProfile> getInfrastructureGatewayProfilesForFetcherId(String id) throws RestException {
        InfrastructureGatewayProfilesFetcher fetcher = getInfrastructureGatewayProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INFRASTRUCTUREGATEWAYPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<InfrastructureGatewayProfile>();
    }

    public static InfrastructureGatewayProfilesFetcher getInfrastructureGatewayProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INFRASTRUCTUREGATEWAYPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (InfrastructureGatewayProfilesFetcher) fetcher;
        }
        if ((fetcher = getInfrastructureGatewayProfilesFetcherForMeId(id)) != null) {
            return (InfrastructureGatewayProfilesFetcher) addFetcher(Constants.INFRASTRUCTUREGATEWAYPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<InfrastructureGatewayProfile> getAllInfrastructureGatewayProfiles() throws RestException {
        java.util.List<InfrastructureGatewayProfile> allObjs = new ArrayList<InfrastructureGatewayProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureGatewayProfilesFetcher fetcher = getInfrastructureGatewayProfilesFetcherForMeId(session.getId());
            java.util.List<InfrastructureGatewayProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<InfrastructureGatewayProfilesFetcher> getAllInfrastructureGatewayProfilesFetchers() throws RestException {
        java.util.List<InfrastructureGatewayProfilesFetcher> allObjs = new ArrayList<InfrastructureGatewayProfilesFetcher>();
        return allObjs;
    }
    public static InfrastructureVscProfile getInfrastructureVscProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureVscProfile obj = null;
            obj = new InfrastructureVscProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INFRASTRUCTUREVSCPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForInfrastructureVscProfileId(String id) throws RestException {
        InfrastructureVscProfile obj = getObject(Constants.INFRASTRUCTUREVSCPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureVscProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForInfrastructureVscProfileId(String id) throws RestException {
        InfrastructureVscProfile obj = getObject(Constants.INFRASTRUCTUREVSCPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureVscProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForInfrastructureVscProfileId(String id) throws RestException {
        InfrastructureVscProfile obj = getObject(Constants.INFRASTRUCTUREVSCPROFILE, id);
        if (obj == null) {
            obj = getInfrastructureVscProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<InfrastructureVscProfile> getInfrastructureVscProfilesForFetcherId(String id) throws RestException {
        InfrastructureVscProfilesFetcher fetcher = getInfrastructureVscProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INFRASTRUCTUREVSCPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<InfrastructureVscProfile>();
    }

    public static InfrastructureVscProfilesFetcher getInfrastructureVscProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INFRASTRUCTUREVSCPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (InfrastructureVscProfilesFetcher) fetcher;
        }
        if ((fetcher = getInfrastructureVscProfilesFetcherForMeId(id)) != null) {
            return (InfrastructureVscProfilesFetcher) addFetcher(Constants.INFRASTRUCTUREVSCPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<InfrastructureVscProfile> getAllInfrastructureVscProfiles() throws RestException {
        java.util.List<InfrastructureVscProfile> allObjs = new ArrayList<InfrastructureVscProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            InfrastructureVscProfilesFetcher fetcher = getInfrastructureVscProfilesFetcherForMeId(session.getId());
            java.util.List<InfrastructureVscProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<InfrastructureVscProfilesFetcher> getAllInfrastructureVscProfilesFetchers() throws RestException {
        java.util.List<InfrastructureVscProfilesFetcher> allObjs = new ArrayList<InfrastructureVscProfilesFetcher>();
        return allObjs;
    }
    public static IngressACLEntryTemplate getIngressACLEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressACLEntryTemplate obj = null;
            obj = new IngressACLEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSACLENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressACLEntryTemplateId(String id) throws RestException {
        IngressACLEntryTemplate obj = getObject(Constants.INGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressACLEntryTemplateId(String id) throws RestException {
        IngressACLEntryTemplate obj = getObject(Constants.INGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressACLEntryTemplateId(String id) throws RestException {
        IngressACLEntryTemplate obj = getObject(Constants.INGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForIngressACLEntryTemplateId(String id) throws RestException {
        IngressACLEntryTemplate obj = getObject(Constants.INGRESSACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLEntryTemplateById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressACLEntryTemplate> getIngressACLEntryTemplatesForFetcherId(String id) throws RestException {
        IngressACLEntryTemplatesFetcher fetcher = getIngressACLEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSACLENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressACLEntryTemplate>();
    }

    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressACLEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressACLEntryTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForDomainId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForIngressACLTemplateId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForL2DomainId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForMeId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForMirrorDestinationId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLEntryTemplatesFetcherForVPortId(id)) != null) {
            return (IngressACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressACLEntryTemplate> getAllIngressACLEntryTemplates() throws RestException {
        java.util.List<IngressACLEntryTemplate> allObjs = new ArrayList<IngressACLEntryTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressACLEntryTemplatesFetcher fetcher = getIngressACLEntryTemplatesFetcherForMeId(session.getId());
            java.util.List<IngressACLEntryTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<IngressACLEntryTemplatesFetcher> getAllIngressACLEntryTemplatesFetchers() throws RestException {
        java.util.List<IngressACLEntryTemplatesFetcher> allObjs = new ArrayList<IngressACLEntryTemplatesFetcher>();
        return allObjs;
    }
    public static IngressACLTemplate getIngressACLTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressACLTemplate obj = null;
            obj = new IngressACLTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSACLTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ContainersFetcher getContainersFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForIngressACLTemplateId(String id) throws RestException {
        IngressACLTemplate obj = getObject(Constants.INGRESSACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressACLTemplateById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressACLTemplate> getIngressACLTemplatesForFetcherId(String id) throws RestException {
        IngressACLTemplatesFetcher fetcher = getIngressACLTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSACLTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressACLTemplate>();
    }

    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressACLTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressACLTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLTemplatesFetcherForDomainId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLTemplatesFetcherForL2DomainId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressACLTemplatesFetcherForMeId(id)) != null) {
            return (IngressACLTemplatesFetcher) addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressACLTemplate> getAllIngressACLTemplates() throws RestException {
        java.util.List<IngressACLTemplate> allObjs = new ArrayList<IngressACLTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressACLTemplatesFetcher fetcher = getIngressACLTemplatesFetcherForMeId(session.getId());
            java.util.List<IngressACLTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<IngressACLTemplatesFetcher> getAllIngressACLTemplatesFetchers() throws RestException {
        java.util.List<IngressACLTemplatesFetcher> allObjs = new ArrayList<IngressACLTemplatesFetcher>();
        return allObjs;
    }
    public static IngressAdvFwdEntryTemplate getIngressAdvFwdEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressAdvFwdEntryTemplate obj = null;
            obj = new IngressAdvFwdEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSADVFWDENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressAdvFwdEntryTemplateId(String id) throws RestException {
        IngressAdvFwdEntryTemplate obj = getObject(Constants.INGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressAdvFwdEntryTemplateId(String id) throws RestException {
        IngressAdvFwdEntryTemplate obj = getObject(Constants.INGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressAdvFwdEntryTemplateId(String id) throws RestException {
        IngressAdvFwdEntryTemplate obj = getObject(Constants.INGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForIngressAdvFwdEntryTemplateId(String id) throws RestException {
        IngressAdvFwdEntryTemplate obj = getObject(Constants.INGRESSADVFWDENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdEntryTemplateById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressAdvFwdEntryTemplate> getIngressAdvFwdEntryTemplatesForFetcherId(String id) throws RestException {
        IngressAdvFwdEntryTemplatesFetcher fetcher = getIngressAdvFwdEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSADVFWDENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressAdvFwdEntryTemplate>();
    }

    public static IngressAdvFwdEntryTemplatesFetcher getIngressAdvFwdEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressAdvFwdEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressAdvFwdEntryTemplatesFetcherForIngressAdvFwdTemplateId(id)) != null) {
            return (IngressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdEntryTemplatesFetcherForMeId(id)) != null) {
            return (IngressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdEntryTemplatesFetcherForMirrorDestinationId(id)) != null) {
            return (IngressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdEntryTemplatesFetcherForVPortId(id)) != null) {
            return (IngressAdvFwdEntryTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressAdvFwdEntryTemplate> getAllIngressAdvFwdEntryTemplates() throws RestException {
        java.util.List<IngressAdvFwdEntryTemplate> allObjs = new ArrayList<IngressAdvFwdEntryTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressAdvFwdEntryTemplatesFetcher fetcher = getIngressAdvFwdEntryTemplatesFetcherForMeId(session.getId());
            java.util.List<IngressAdvFwdEntryTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<IngressAdvFwdEntryTemplatesFetcher> getAllIngressAdvFwdEntryTemplatesFetchers() throws RestException {
        java.util.List<IngressAdvFwdEntryTemplatesFetcher> allObjs = new ArrayList<IngressAdvFwdEntryTemplatesFetcher>();
        return allObjs;
    }
    public static IngressAdvFwdTemplate getIngressAdvFwdTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressAdvFwdTemplate obj = null;
            obj = new IngressAdvFwdTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSADVFWDTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressAdvFwdTemplateId(String id) throws RestException {
        IngressAdvFwdTemplate obj = getObject(Constants.INGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdEntryTemplatesFetcher getIngressAdvFwdEntryTemplatesFetcherForIngressAdvFwdTemplateId(String id) throws RestException {
        IngressAdvFwdTemplate obj = getObject(Constants.INGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            IngressAdvFwdEntryTemplatesFetcher fetcher = obj.getIngressAdvFwdEntryTemplates();
            return addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForIngressAdvFwdTemplateId(String id) throws RestException {
        IngressAdvFwdTemplate obj = getObject(Constants.INGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressAdvFwdTemplateId(String id) throws RestException {
        IngressAdvFwdTemplate obj = getObject(Constants.INGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressAdvFwdTemplateId(String id) throws RestException {
        IngressAdvFwdTemplate obj = getObject(Constants.INGRESSADVFWDTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAdvFwdTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressAdvFwdTemplate> getIngressAdvFwdTemplatesForFetcherId(String id) throws RestException {
        IngressAdvFwdTemplatesFetcher fetcher = getIngressAdvFwdTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSADVFWDTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressAdvFwdTemplate>();
    }

    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressAdvFwdTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressAdvFwdTemplatesFetcherForAggregatedDomainId(id)) != null) {
            return (IngressAdvFwdTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdTemplatesFetcherForDomainId(id)) != null) {
            return (IngressAdvFwdTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (IngressAdvFwdTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdTemplatesFetcherForL2DomainId(id)) != null) {
            return (IngressAdvFwdTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAdvFwdTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (IngressAdvFwdTemplatesFetcher) addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressAdvFwdTemplate> getAllIngressAdvFwdTemplates() throws RestException {
        java.util.List<IngressAdvFwdTemplate> allObjs = new ArrayList<IngressAdvFwdTemplate>();

        return allObjs;
    }

    public static java.util.List<IngressAdvFwdTemplatesFetcher> getAllIngressAdvFwdTemplatesFetchers() throws RestException {
        java.util.List<IngressAdvFwdTemplatesFetcher> allObjs = new ArrayList<IngressAdvFwdTemplatesFetcher>();
        return allObjs;
    }
    public static IngressAuditACLEntryTemplate getIngressAuditACLEntryTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressAuditACLEntryTemplate obj = null;
            obj = new IngressAuditACLEntryTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSAUDITACLENTRYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressAuditACLEntryTemplateId(String id) throws RestException {
        IngressAuditACLEntryTemplate obj = getObject(Constants.INGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressAuditACLEntryTemplateId(String id) throws RestException {
        IngressAuditACLEntryTemplate obj = getObject(Constants.INGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressAuditACLEntryTemplateId(String id) throws RestException {
        IngressAuditACLEntryTemplate obj = getObject(Constants.INGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForIngressAuditACLEntryTemplateId(String id) throws RestException {
        IngressAuditACLEntryTemplate obj = getObject(Constants.INGRESSAUDITACLENTRYTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLEntryTemplateById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressAuditACLEntryTemplate> getIngressAuditACLEntryTemplatesForFetcherId(String id) throws RestException {
        IngressAuditACLEntryTemplatesFetcher fetcher = getIngressAuditACLEntryTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSAUDITACLENTRYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressAuditACLEntryTemplate>();
    }

    public static IngressAuditACLEntryTemplatesFetcher getIngressAuditACLEntryTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressAuditACLEntryTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressAuditACLEntryTemplatesFetcherForDomainId(id)) != null) {
            return (IngressAuditACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAuditACLEntryTemplatesFetcherForIngressAuditACLTemplateId(id)) != null) {
            return (IngressAuditACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAuditACLEntryTemplatesFetcherForL2DomainId(id)) != null) {
            return (IngressAuditACLEntryTemplatesFetcher) addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressAuditACLEntryTemplate> getAllIngressAuditACLEntryTemplates() throws RestException {
        java.util.List<IngressAuditACLEntryTemplate> allObjs = new ArrayList<IngressAuditACLEntryTemplate>();

        return allObjs;
    }

    public static java.util.List<IngressAuditACLEntryTemplatesFetcher> getAllIngressAuditACLEntryTemplatesFetchers() throws RestException {
        java.util.List<IngressAuditACLEntryTemplatesFetcher> allObjs = new ArrayList<IngressAuditACLEntryTemplatesFetcher>();
        return allObjs;
    }
    public static IngressAuditACLTemplate getIngressAuditACLTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressAuditACLTemplate obj = null;
            obj = new IngressAuditACLTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSAUDITACLTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressAuditACLTemplateId(String id) throws RestException {
        IngressAuditACLTemplate obj = getObject(Constants.INGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAuditACLEntryTemplatesFetcher getIngressAuditACLEntryTemplatesFetcherForIngressAuditACLTemplateId(String id) throws RestException {
        IngressAuditACLTemplate obj = getObject(Constants.INGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLTemplateById(id);
        }

        if (obj != null) {
            IngressAuditACLEntryTemplatesFetcher fetcher = obj.getIngressAuditACLEntryTemplates();
            return addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressAuditACLTemplateId(String id) throws RestException {
        IngressAuditACLTemplate obj = getObject(Constants.INGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressAuditACLTemplateId(String id) throws RestException {
        IngressAuditACLTemplate obj = getObject(Constants.INGRESSAUDITACLTEMPLATE, id);
        if (obj == null) {
            obj = getIngressAuditACLTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressAuditACLTemplate> getIngressAuditACLTemplatesForFetcherId(String id) throws RestException {
        IngressAuditACLTemplatesFetcher fetcher = getIngressAuditACLTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSAUDITACLTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressAuditACLTemplate>();
    }

    public static IngressAuditACLTemplatesFetcher getIngressAuditACLTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSAUDITACLTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (IngressAuditACLTemplatesFetcher) fetcher;
        }
        if ((fetcher = getIngressAuditACLTemplatesFetcherForDomainId(id)) != null) {
            return (IngressAuditACLTemplatesFetcher) addFetcher(Constants.INGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressAuditACLTemplatesFetcherForL2DomainId(id)) != null) {
            return (IngressAuditACLTemplatesFetcher) addFetcher(Constants.INGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressAuditACLTemplate> getAllIngressAuditACLTemplates() throws RestException {
        java.util.List<IngressAuditACLTemplate> allObjs = new ArrayList<IngressAuditACLTemplate>();

        return allObjs;
    }

    public static java.util.List<IngressAuditACLTemplatesFetcher> getAllIngressAuditACLTemplatesFetchers() throws RestException {
        java.util.List<IngressAuditACLTemplatesFetcher> allObjs = new ArrayList<IngressAuditACLTemplatesFetcher>();
        return allObjs;
    }
    public static IngressProfile getIngressProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressProfile obj = null;
            obj = new IngressProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForIngressProfileId(String id) throws RestException {
        IngressProfile obj = getObject(Constants.INGRESSPROFILE, id);
        if (obj == null) {
            obj = getIngressProfileById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressProfileId(String id) throws RestException {
        IngressProfile obj = getObject(Constants.INGRESSPROFILE, id);
        if (obj == null) {
            obj = getIngressProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressProfileId(String id) throws RestException {
        IngressProfile obj = getObject(Constants.INGRESSPROFILE, id);
        if (obj == null) {
            obj = getIngressProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressProfileId(String id) throws RestException {
        IngressProfile obj = getObject(Constants.INGRESSPROFILE, id);
        if (obj == null) {
            obj = getIngressProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForIngressProfileId(String id) throws RestException {
        IngressProfile obj = getObject(Constants.INGRESSPROFILE, id);
        if (obj == null) {
            obj = getIngressProfileById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressProfile> getIngressProfilesForFetcherId(String id) throws RestException {
        IngressProfilesFetcher fetcher = getIngressProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressProfile>();
    }

    public static IngressProfilesFetcher getIngressProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IngressProfilesFetcher) fetcher;
        }
        if ((fetcher = getIngressProfilesFetcherForEnterpriseId(id)) != null) {
            return (IngressProfilesFetcher) addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (IngressProfilesFetcher) addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressProfilesFetcherForGatewayId(id)) != null) {
            return (IngressProfilesFetcher) addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (IngressProfilesFetcher) addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (IngressProfilesFetcher) addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressProfile> getAllIngressProfiles() throws RestException {
        java.util.List<IngressProfile> allObjs = new ArrayList<IngressProfile>();

        return allObjs;
    }

    public static java.util.List<IngressProfilesFetcher> getAllIngressProfilesFetchers() throws RestException {
        java.util.List<IngressProfilesFetcher> allObjs = new ArrayList<IngressProfilesFetcher>();
        return allObjs;
    }
    public static IngressQOSPolicy getIngressQOSPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressQOSPolicy obj = null;
            obj = new IngressQOSPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.INGRESSQOSPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIngressQOSPolicyId(String id) throws RestException {
        IngressQOSPolicy obj = getObject(Constants.INGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getIngressQOSPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIngressQOSPolicyId(String id) throws RestException {
        IngressQOSPolicy obj = getObject(Constants.INGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getIngressQOSPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIngressQOSPolicyId(String id) throws RestException {
        IngressQOSPolicy obj = getObject(Constants.INGRESSQOSPOLICY, id);
        if (obj == null) {
            obj = getIngressQOSPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IngressQOSPolicy> getIngressQOSPoliciesForFetcherId(String id) throws RestException {
        IngressQOSPoliciesFetcher fetcher = getIngressQOSPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.INGRESSQOSPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IngressQOSPolicy>();
    }

    public static IngressQOSPoliciesFetcher getIngressQOSPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.INGRESSQOSPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (IngressQOSPoliciesFetcher) fetcher;
        }
        if ((fetcher = getIngressQOSPoliciesFetcherForEnterpriseId(id)) != null) {
            return (IngressQOSPoliciesFetcher) addFetcher(Constants.INGRESSQOSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIngressQOSPoliciesFetcherForMeId(id)) != null) {
            return (IngressQOSPoliciesFetcher) addFetcher(Constants.INGRESSQOSPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IngressQOSPolicy> getAllIngressQOSPolicies() throws RestException {
        java.util.List<IngressQOSPolicy> allObjs = new ArrayList<IngressQOSPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            IngressQOSPoliciesFetcher fetcher = getIngressQOSPoliciesFetcherForMeId(session.getId());
            java.util.List<IngressQOSPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<IngressQOSPoliciesFetcher> getAllIngressQOSPoliciesFetchers() throws RestException {
        java.util.List<IngressQOSPoliciesFetcher> allObjs = new ArrayList<IngressQOSPoliciesFetcher>();
        return allObjs;
    }
    public static IPFilterProfile getIPFilterProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IPFilterProfile obj = null;
            obj = new IPFilterProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IPFILTERPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIPFilterProfileId(String id) throws RestException {
        IPFilterProfile obj = getObject(Constants.IPFILTERPROFILE, id);
        if (obj == null) {
            obj = getIPFilterProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIPFilterProfileId(String id) throws RestException {
        IPFilterProfile obj = getObject(Constants.IPFILTERPROFILE, id);
        if (obj == null) {
            obj = getIPFilterProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIPFilterProfileId(String id) throws RestException {
        IPFilterProfile obj = getObject(Constants.IPFILTERPROFILE, id);
        if (obj == null) {
            obj = getIPFilterProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IPFilterProfile> getIPFilterProfilesForFetcherId(String id) throws RestException {
        IPFilterProfilesFetcher fetcher = getIPFilterProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IPFILTERPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IPFilterProfile>();
    }

    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IPFILTERPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IPFilterProfilesFetcher) fetcher;
        }
        if ((fetcher = getIPFilterProfilesFetcherForEnterpriseId(id)) != null) {
            return (IPFilterProfilesFetcher) addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPFilterProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (IPFilterProfilesFetcher) addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPFilterProfilesFetcherForGatewayId(id)) != null) {
            return (IPFilterProfilesFetcher) addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPFilterProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (IPFilterProfilesFetcher) addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPFilterProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (IPFilterProfilesFetcher) addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IPFilterProfile> getAllIPFilterProfiles() throws RestException {
        java.util.List<IPFilterProfile> allObjs = new ArrayList<IPFilterProfile>();

        return allObjs;
    }

    public static java.util.List<IPFilterProfilesFetcher> getAllIPFilterProfilesFetchers() throws RestException {
        java.util.List<IPFilterProfilesFetcher> allObjs = new ArrayList<IPFilterProfilesFetcher>();
        return allObjs;
    }
    public static IPReservation getIPReservationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IPReservation obj = null;
            obj = new IPReservation();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IPRESERVATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForIPReservationId(String id) throws RestException {
        IPReservation obj = getObject(Constants.IPRESERVATION, id);
        if (obj == null) {
            obj = getIPReservationById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIPReservationId(String id) throws RestException {
        IPReservation obj = getObject(Constants.IPRESERVATION, id);
        if (obj == null) {
            obj = getIPReservationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIPReservationId(String id) throws RestException {
        IPReservation obj = getObject(Constants.IPRESERVATION, id);
        if (obj == null) {
            obj = getIPReservationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIPReservationId(String id) throws RestException {
        IPReservation obj = getObject(Constants.IPRESERVATION, id);
        if (obj == null) {
            obj = getIPReservationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IPReservation> getIPReservationsForFetcherId(String id) throws RestException {
        IPReservationsFetcher fetcher = getIPReservationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IPRESERVATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IPReservation>();
    }

    public static IPReservationsFetcher getIPReservationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IPRESERVATIONS_FETCHER, id);
        if (fetcher != null) {
            return (IPReservationsFetcher) fetcher;
        }
        if ((fetcher = getIPReservationsFetcherForSubnetId(id)) != null) {
            return (IPReservationsFetcher) addFetcher(Constants.IPRESERVATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IPReservation> getAllIPReservations() throws RestException {
        java.util.List<IPReservation> allObjs = new ArrayList<IPReservation>();

        return allObjs;
    }

    public static java.util.List<IPReservationsFetcher> getAllIPReservationsFetchers() throws RestException {
        java.util.List<IPReservationsFetcher> allObjs = new ArrayList<IPReservationsFetcher>();
        return allObjs;
    }
    public static IPv6FilterProfile getIPv6FilterProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            IPv6FilterProfile obj = null;
            obj = new IPv6FilterProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.IPV6FILTERPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForIPv6FilterProfileId(String id) throws RestException {
        IPv6FilterProfile obj = getObject(Constants.IPV6FILTERPROFILE, id);
        if (obj == null) {
            obj = getIPv6FilterProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForIPv6FilterProfileId(String id) throws RestException {
        IPv6FilterProfile obj = getObject(Constants.IPV6FILTERPROFILE, id);
        if (obj == null) {
            obj = getIPv6FilterProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForIPv6FilterProfileId(String id) throws RestException {
        IPv6FilterProfile obj = getObject(Constants.IPV6FILTERPROFILE, id);
        if (obj == null) {
            obj = getIPv6FilterProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<IPv6FilterProfile> getIPv6FilterProfilesForFetcherId(String id) throws RestException {
        IPv6FilterProfilesFetcher fetcher = getIPv6FilterProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.IPV6FILTERPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<IPv6FilterProfile>();
    }

    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.IPV6FILTERPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (IPv6FilterProfilesFetcher) fetcher;
        }
        if ((fetcher = getIPv6FilterProfilesFetcherForEnterpriseId(id)) != null) {
            return (IPv6FilterProfilesFetcher) addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPv6FilterProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (IPv6FilterProfilesFetcher) addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPv6FilterProfilesFetcherForGatewayId(id)) != null) {
            return (IPv6FilterProfilesFetcher) addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPv6FilterProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (IPv6FilterProfilesFetcher) addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getIPv6FilterProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (IPv6FilterProfilesFetcher) addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<IPv6FilterProfile> getAllIPv6FilterProfiles() throws RestException {
        java.util.List<IPv6FilterProfile> allObjs = new ArrayList<IPv6FilterProfile>();

        return allObjs;
    }

    public static java.util.List<IPv6FilterProfilesFetcher> getAllIPv6FilterProfilesFetchers() throws RestException {
        java.util.List<IPv6FilterProfilesFetcher> allObjs = new ArrayList<IPv6FilterProfilesFetcher>();
        return allObjs;
    }
    public static Job getJobById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Job obj = null;
            obj = new Job();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.JOB, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForJobId(String id) throws RestException {
        Job obj = getObject(Constants.JOB, id);
        if (obj == null) {
            obj = getJobById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForJobId(String id) throws RestException {
        Job obj = getObject(Constants.JOB, id);
        if (obj == null) {
            obj = getJobById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForJobId(String id) throws RestException {
        Job obj = getObject(Constants.JOB, id);
        if (obj == null) {
            obj = getJobById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Job> getJobsForFetcherId(String id) throws RestException {
        JobsFetcher fetcher = getJobsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.JOB);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Job>();
    }

    public static JobsFetcher getJobsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.JOBS_FETCHER, id);
        if (fetcher != null) {
            return (JobsFetcher) fetcher;
        }
        if ((fetcher = getJobsFetcherForAggregatedDomainId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForAzureCloudId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForDomainId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForDomainTemplateId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForEgressACLTemplateId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForEnterpriseId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForGatewayId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForHSCId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForIKEGatewayConnectionId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForIngressACLTemplateId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForIngressAdvFwdTemplateId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForL2DomainId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForL2DomainTemplateId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForMeId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForNetconfGatewayId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForNSGatewayId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForRedundancyGroupId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVCenterId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVCenterClusterId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVCenterHypervisorId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVNFId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVPortId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVRSId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVSCId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForVSDId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        
        if ((fetcher = getJobsFetcherForZFBRequestId(id)) != null) {
            return (JobsFetcher) addFetcher(Constants.JOBS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Job> getAllJobs() throws RestException {
        java.util.List<Job> allObjs = new ArrayList<Job>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            JobsFetcher fetcher = getJobsFetcherForMeId(session.getId());
            java.util.List<Job> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<JobsFetcher> getAllJobsFetchers() throws RestException {
        java.util.List<JobsFetcher> allObjs = new ArrayList<JobsFetcher>();
        return allObjs;
    }
    public static KeyServerMember getKeyServerMemberById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMember obj = null;
            obj = new KeyServerMember();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.KEYSERVERMEMBER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForKeyServerMemberId(String id) throws RestException {
        KeyServerMember obj = getObject(Constants.KEYSERVERMEMBER, id);
        if (obj == null) {
            obj = getKeyServerMemberById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForKeyServerMemberId(String id) throws RestException {
        KeyServerMember obj = getObject(Constants.KEYSERVERMEMBER, id);
        if (obj == null) {
            obj = getKeyServerMemberById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForKeyServerMemberId(String id) throws RestException {
        KeyServerMember obj = getObject(Constants.KEYSERVERMEMBER, id);
        if (obj == null) {
            obj = getKeyServerMemberById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<KeyServerMember> getKeyServerMembersForFetcherId(String id) throws RestException {
        KeyServerMembersFetcher fetcher = getKeyServerMembersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.KEYSERVERMEMBER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<KeyServerMember>();
    }

    public static KeyServerMembersFetcher getKeyServerMembersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.KEYSERVERMEMBERS_FETCHER, id);
        if (fetcher != null) {
            return (KeyServerMembersFetcher) fetcher;
        }
        if ((fetcher = getKeyServerMembersFetcherForMeId(id)) != null) {
            return (KeyServerMembersFetcher) addFetcher(Constants.KEYSERVERMEMBERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<KeyServerMember> getAllKeyServerMembers() throws RestException {
        java.util.List<KeyServerMember> allObjs = new ArrayList<KeyServerMember>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMembersFetcher fetcher = getKeyServerMembersFetcherForMeId(session.getId());
            java.util.List<KeyServerMember> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<KeyServerMembersFetcher> getAllKeyServerMembersFetchers() throws RestException {
        java.util.List<KeyServerMembersFetcher> allObjs = new ArrayList<KeyServerMembersFetcher>();
        return allObjs;
    }
    public static KeyServerMonitor getKeyServerMonitorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMonitor obj = null;
            obj = new KeyServerMonitor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.KEYSERVERMONITOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMonitorEncryptedSeedsFetcher getKeyServerMonitorEncryptedSeedsFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            KeyServerMonitorEncryptedSeedsFetcher fetcher = obj.getKeyServerMonitorEncryptedSeeds();
            return addFetcher(Constants.KEYSERVERMONITORENCRYPTEDSEEDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMonitorSeedsFetcher getKeyServerMonitorSeedsFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            KeyServerMonitorSeedsFetcher fetcher = obj.getKeyServerMonitorSeeds();
            return addFetcher(Constants.KEYSERVERMONITORSEEDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMonitorSEKsFetcher getKeyServerMonitorSEKsFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            KeyServerMonitorSEKsFetcher fetcher = obj.getKeyServerMonitorSEKs();
            return addFetcher(Constants.KEYSERVERMONITORSEKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForKeyServerMonitorId(String id) throws RestException {
        KeyServerMonitor obj = getObject(Constants.KEYSERVERMONITOR, id);
        if (obj == null) {
            obj = getKeyServerMonitorById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<KeyServerMonitor> getKeyServerMonitorsForFetcherId(String id) throws RestException {
        KeyServerMonitorsFetcher fetcher = getKeyServerMonitorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.KEYSERVERMONITOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<KeyServerMonitor>();
    }

    public static KeyServerMonitorsFetcher getKeyServerMonitorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.KEYSERVERMONITORS_FETCHER, id);
        if (fetcher != null) {
            return (KeyServerMonitorsFetcher) fetcher;
        }
        if ((fetcher = getKeyServerMonitorsFetcherForEnterpriseId(id)) != null) {
            return (KeyServerMonitorsFetcher) addFetcher(Constants.KEYSERVERMONITORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<KeyServerMonitor> getAllKeyServerMonitors() throws RestException {
        java.util.List<KeyServerMonitor> allObjs = new ArrayList<KeyServerMonitor>();

        return allObjs;
    }

    public static java.util.List<KeyServerMonitorsFetcher> getAllKeyServerMonitorsFetchers() throws RestException {
        java.util.List<KeyServerMonitorsFetcher> allObjs = new ArrayList<KeyServerMonitorsFetcher>();
        return allObjs;
    }
    public static KeyServerMonitorEncryptedSeed getKeyServerMonitorEncryptedSeedById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMonitorEncryptedSeed obj = null;
            obj = new KeyServerMonitorEncryptedSeed();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.KEYSERVERMONITORENCRYPTEDSEED, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForKeyServerMonitorEncryptedSeedId(String id) throws RestException {
        KeyServerMonitorEncryptedSeed obj = getObject(Constants.KEYSERVERMONITORENCRYPTEDSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorEncryptedSeedById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForKeyServerMonitorEncryptedSeedId(String id) throws RestException {
        KeyServerMonitorEncryptedSeed obj = getObject(Constants.KEYSERVERMONITORENCRYPTEDSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorEncryptedSeedById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForKeyServerMonitorEncryptedSeedId(String id) throws RestException {
        KeyServerMonitorEncryptedSeed obj = getObject(Constants.KEYSERVERMONITORENCRYPTEDSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorEncryptedSeedById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<KeyServerMonitorEncryptedSeed> getKeyServerMonitorEncryptedSeedsForFetcherId(String id) throws RestException {
        KeyServerMonitorEncryptedSeedsFetcher fetcher = getKeyServerMonitorEncryptedSeedsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.KEYSERVERMONITORENCRYPTEDSEED);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<KeyServerMonitorEncryptedSeed>();
    }

    public static KeyServerMonitorEncryptedSeedsFetcher getKeyServerMonitorEncryptedSeedsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.KEYSERVERMONITORENCRYPTEDSEEDS_FETCHER, id);
        if (fetcher != null) {
            return (KeyServerMonitorEncryptedSeedsFetcher) fetcher;
        }
        if ((fetcher = getKeyServerMonitorEncryptedSeedsFetcherForKeyServerMonitorId(id)) != null) {
            return (KeyServerMonitorEncryptedSeedsFetcher) addFetcher(Constants.KEYSERVERMONITORENCRYPTEDSEEDS_FETCHER, fetcher);
        }
        
        if ((fetcher = getKeyServerMonitorEncryptedSeedsFetcherForKeyServerMonitorSeedId(id)) != null) {
            return (KeyServerMonitorEncryptedSeedsFetcher) addFetcher(Constants.KEYSERVERMONITORENCRYPTEDSEEDS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<KeyServerMonitorEncryptedSeed> getAllKeyServerMonitorEncryptedSeeds() throws RestException {
        java.util.List<KeyServerMonitorEncryptedSeed> allObjs = new ArrayList<KeyServerMonitorEncryptedSeed>();

        return allObjs;
    }

    public static java.util.List<KeyServerMonitorEncryptedSeedsFetcher> getAllKeyServerMonitorEncryptedSeedsFetchers() throws RestException {
        java.util.List<KeyServerMonitorEncryptedSeedsFetcher> allObjs = new ArrayList<KeyServerMonitorEncryptedSeedsFetcher>();
        return allObjs;
    }
    public static KeyServerMonitorSeed getKeyServerMonitorSeedById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMonitorSeed obj = null;
            obj = new KeyServerMonitorSeed();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.KEYSERVERMONITORSEED, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForKeyServerMonitorSeedId(String id) throws RestException {
        KeyServerMonitorSeed obj = getObject(Constants.KEYSERVERMONITORSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorSeedById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMonitorEncryptedSeedsFetcher getKeyServerMonitorEncryptedSeedsFetcherForKeyServerMonitorSeedId(String id) throws RestException {
        KeyServerMonitorSeed obj = getObject(Constants.KEYSERVERMONITORSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorSeedById(id);
        }

        if (obj != null) {
            KeyServerMonitorEncryptedSeedsFetcher fetcher = obj.getKeyServerMonitorEncryptedSeeds();
            return addFetcher(Constants.KEYSERVERMONITORENCRYPTEDSEEDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForKeyServerMonitorSeedId(String id) throws RestException {
        KeyServerMonitorSeed obj = getObject(Constants.KEYSERVERMONITORSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorSeedById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForKeyServerMonitorSeedId(String id) throws RestException {
        KeyServerMonitorSeed obj = getObject(Constants.KEYSERVERMONITORSEED, id);
        if (obj == null) {
            obj = getKeyServerMonitorSeedById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<KeyServerMonitorSeed> getKeyServerMonitorSeedsForFetcherId(String id) throws RestException {
        KeyServerMonitorSeedsFetcher fetcher = getKeyServerMonitorSeedsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.KEYSERVERMONITORSEED);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<KeyServerMonitorSeed>();
    }

    public static KeyServerMonitorSeedsFetcher getKeyServerMonitorSeedsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.KEYSERVERMONITORSEEDS_FETCHER, id);
        if (fetcher != null) {
            return (KeyServerMonitorSeedsFetcher) fetcher;
        }
        if ((fetcher = getKeyServerMonitorSeedsFetcherForKeyServerMonitorId(id)) != null) {
            return (KeyServerMonitorSeedsFetcher) addFetcher(Constants.KEYSERVERMONITORSEEDS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<KeyServerMonitorSeed> getAllKeyServerMonitorSeeds() throws RestException {
        java.util.List<KeyServerMonitorSeed> allObjs = new ArrayList<KeyServerMonitorSeed>();

        return allObjs;
    }

    public static java.util.List<KeyServerMonitorSeedsFetcher> getAllKeyServerMonitorSeedsFetchers() throws RestException {
        java.util.List<KeyServerMonitorSeedsFetcher> allObjs = new ArrayList<KeyServerMonitorSeedsFetcher>();
        return allObjs;
    }
    public static KeyServerMonitorSEK getKeyServerMonitorSEKById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            KeyServerMonitorSEK obj = null;
            obj = new KeyServerMonitorSEK();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.KEYSERVERMONITORSEK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForKeyServerMonitorSEKId(String id) throws RestException {
        KeyServerMonitorSEK obj = getObject(Constants.KEYSERVERMONITORSEK, id);
        if (obj == null) {
            obj = getKeyServerMonitorSEKById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForKeyServerMonitorSEKId(String id) throws RestException {
        KeyServerMonitorSEK obj = getObject(Constants.KEYSERVERMONITORSEK, id);
        if (obj == null) {
            obj = getKeyServerMonitorSEKById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForKeyServerMonitorSEKId(String id) throws RestException {
        KeyServerMonitorSEK obj = getObject(Constants.KEYSERVERMONITORSEK, id);
        if (obj == null) {
            obj = getKeyServerMonitorSEKById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<KeyServerMonitorSEK> getKeyServerMonitorSEKsForFetcherId(String id) throws RestException {
        KeyServerMonitorSEKsFetcher fetcher = getKeyServerMonitorSEKsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.KEYSERVERMONITORSEK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<KeyServerMonitorSEK>();
    }

    public static KeyServerMonitorSEKsFetcher getKeyServerMonitorSEKsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.KEYSERVERMONITORSEKS_FETCHER, id);
        if (fetcher != null) {
            return (KeyServerMonitorSEKsFetcher) fetcher;
        }
        if ((fetcher = getKeyServerMonitorSEKsFetcherForKeyServerMonitorId(id)) != null) {
            return (KeyServerMonitorSEKsFetcher) addFetcher(Constants.KEYSERVERMONITORSEKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<KeyServerMonitorSEK> getAllKeyServerMonitorSEKs() throws RestException {
        java.util.List<KeyServerMonitorSEK> allObjs = new ArrayList<KeyServerMonitorSEK>();

        return allObjs;
    }

    public static java.util.List<KeyServerMonitorSEKsFetcher> getAllKeyServerMonitorSEKsFetchers() throws RestException {
        java.util.List<KeyServerMonitorSEKsFetcher> allObjs = new ArrayList<KeyServerMonitorSEKsFetcher>();
        return allObjs;
    }
    public static L2Domain getL2DomainById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            L2Domain obj = null;
            obj = new L2Domain();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.L2DOMAIN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressRangesFetcher getAddressRangesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            AddressRangesFetcher fetcher = obj.getAddressRanges();
            return addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AlarmsFetcher getAlarmsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationsFetcher getApplicationsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementbindingsFetcher getApplicationperformancemanagementbindingsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementbindingsFetcher fetcher = obj.getApplicationperformancemanagementbindings();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BridgeInterfacesFetcher getBridgeInterfacesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            BridgeInterfacesFetcher fetcher = obj.getBridgeInterfaces();
            return addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EgressAdvFwdTemplatesFetcher fetcher = obj.getEgressAdvFwdTemplates();
            return addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAuditACLEntryTemplatesFetcher getEgressAuditACLEntryTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EgressAuditACLEntryTemplatesFetcher fetcher = obj.getEgressAuditACLEntryTemplates();
            return addFetcher(Constants.EGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAuditACLTemplatesFetcher getEgressAuditACLTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EgressAuditACLTemplatesFetcher fetcher = obj.getEgressAuditACLTemplates();
            return addFetcher(Constants.EGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HostInterfacesFetcher getHostInterfacesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            HostInterfacesFetcher fetcher = obj.getHostInterfaces();
            return addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            IngressAdvFwdTemplatesFetcher fetcher = obj.getIngressAdvFwdTemplates();
            return addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAuditACLEntryTemplatesFetcher getIngressAuditACLEntryTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            IngressAuditACLEntryTemplatesFetcher fetcher = obj.getIngressAuditACLEntryTemplates();
            return addFetcher(Constants.INGRESSAUDITACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAuditACLTemplatesFetcher getIngressAuditACLTemplatesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            IngressAuditACLTemplatesFetcher fetcher = obj.getIngressAuditACLTemplates();
            return addFetcher(Constants.INGRESSAUDITACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MirrorDestinationGroupsFetcher getMirrorDestinationGroupsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            MirrorDestinationGroupsFetcher fetcher = obj.getMirrorDestinationGroups();
            return addFetcher(Constants.MIRRORDESTINATIONGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceBindingsFetcher getNetworkPerformanceBindingsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            NetworkPerformanceBindingsFetcher fetcher = obj.getNetworkPerformanceBindings();
            return addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            NSGatewaySummariesFetcher fetcher = obj.getNSGatewaySummaries();
            return addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayMirrorDestinationsFetcher getOverlayMirrorDestinationsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            OverlayMirrorDestinationsFetcher fetcher = obj.getOverlayMirrorDestinations();
            return addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PGExpressionsFetcher getPGExpressionsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            PGExpressionsFetcher fetcher = obj.getPGExpressions();
            return addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ProxyARPFiltersFetcher getProxyARPFiltersFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            ProxyARPFiltersFetcher fetcher = obj.getProxyARPFilters();
            return addFetcher(Constants.PROXYARPFILTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedundancyGroupsFetcher getRedundancyGroupsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            RedundancyGroupsFetcher fetcher = obj.getRedundancyGroups();
            return addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkRDsFetcher getUplinkRDsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            UplinkRDsFetcher fetcher = obj.getUplinkRDs();
            return addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VirtualFirewallRulesFetcher fetcher = obj.getVirtualFirewallRules();
            return addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMIPReservationsFetcher getVMIPReservationsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VMIPReservationsFetcher fetcher = obj.getVMIPReservations();
            return addFetcher(Constants.VMIPRESERVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPNConnectionsFetcher getVPNConnectionsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VPNConnectionsFetcher fetcher = obj.getVPNConnections();
            return addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForL2DomainId(String id) throws RestException {
        L2Domain obj = getObject(Constants.L2DOMAIN, id);
        if (obj == null) {
            obj = getL2DomainById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<L2Domain> getL2DomainsForFetcherId(String id) throws RestException {
        L2DomainsFetcher fetcher = getL2DomainsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.L2DOMAIN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<L2Domain>();
    }

    public static L2DomainsFetcher getL2DomainsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.L2DOMAINS_FETCHER, id);
        if (fetcher != null) {
            return (L2DomainsFetcher) fetcher;
        }
        if ((fetcher = getL2DomainsFetcherForEnterpriseId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForGatewayId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForL2DomainTemplateId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForMeId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForNetconfGatewayId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL2DomainsFetcherForRedundancyGroupId(id)) != null) {
            return (L2DomainsFetcher) addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<L2Domain> getAllL2Domains() throws RestException {
        java.util.List<L2Domain> allObjs = new ArrayList<L2Domain>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            L2DomainsFetcher fetcher = getL2DomainsFetcherForMeId(session.getId());
            java.util.List<L2Domain> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<L2DomainsFetcher> getAllL2DomainsFetchers() throws RestException {
        java.util.List<L2DomainsFetcher> allObjs = new ArrayList<L2DomainsFetcher>();
        return allObjs;
    }
    public static L2DomainTemplate getL2DomainTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            L2DomainTemplate obj = null;
            obj = new L2DomainTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.L2DOMAINTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressRangesFetcher getAddressRangesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            AddressRangesFetcher fetcher = obj.getAddressRanges();
            return addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdTemplatesFetcher getEgressAdvFwdTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            EgressAdvFwdTemplatesFetcher fetcher = obj.getEgressAdvFwdTemplates();
            return addFetcher(Constants.EGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdTemplatesFetcher getIngressAdvFwdTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            IngressAdvFwdTemplatesFetcher fetcher = obj.getIngressAdvFwdTemplates();
            return addFetcher(Constants.INGRESSADVFWDTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayMirrorDestinationTemplatesFetcher getOverlayMirrorDestinationTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            OverlayMirrorDestinationTemplatesFetcher fetcher = obj.getOverlayMirrorDestinationTemplates();
            return addFetcher(Constants.OVERLAYMIRRORDESTINATIONTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PGExpressionTemplatesFetcher getPGExpressionTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            PGExpressionTemplatesFetcher fetcher = obj.getPGExpressionTemplates();
            return addFetcher(Constants.PGEXPRESSIONTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupTemplatesFetcher getPolicyGroupTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            PolicyGroupTemplatesFetcher fetcher = obj.getPolicyGroupTemplates();
            return addFetcher(Constants.POLICYGROUPTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetTemplatesFetcher getRedirectionTargetTemplatesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            RedirectionTargetTemplatesFetcher fetcher = obj.getRedirectionTargetTemplates();
            return addFetcher(Constants.REDIRECTIONTARGETTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForL2DomainTemplateId(String id) throws RestException {
        L2DomainTemplate obj = getObject(Constants.L2DOMAINTEMPLATE, id);
        if (obj == null) {
            obj = getL2DomainTemplateById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<L2DomainTemplate> getL2DomainTemplatesForFetcherId(String id) throws RestException {
        L2DomainTemplatesFetcher fetcher = getL2DomainTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.L2DOMAINTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<L2DomainTemplate>();
    }

    public static L2DomainTemplatesFetcher getL2DomainTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.L2DOMAINTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (L2DomainTemplatesFetcher) fetcher;
        }
        if ((fetcher = getL2DomainTemplatesFetcherForEnterpriseId(id)) != null) {
            return (L2DomainTemplatesFetcher) addFetcher(Constants.L2DOMAINTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<L2DomainTemplate> getAllL2DomainTemplates() throws RestException {
        java.util.List<L2DomainTemplate> allObjs = new ArrayList<L2DomainTemplate>();

        return allObjs;
    }

    public static java.util.List<L2DomainTemplatesFetcher> getAllL2DomainTemplatesFetchers() throws RestException {
        java.util.List<L2DomainTemplatesFetcher> allObjs = new ArrayList<L2DomainTemplatesFetcher>();
        return allObjs;
    }
    public static L4Service getL4ServiceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            L4Service obj = null;
            obj = new L4Service();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.L4SERVICE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static L4ServiceGroupsFetcher getL4ServiceGroupsFetcherForL4ServiceId(String id) throws RestException {
        L4Service obj = getObject(Constants.L4SERVICE, id);
        if (obj == null) {
            obj = getL4ServiceById(id);
        }

        if (obj != null) {
            L4ServiceGroupsFetcher fetcher = obj.getL4ServiceGroups();
            return addFetcher(Constants.L4SERVICEGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<L4Service> getL4ServicesForFetcherId(String id) throws RestException {
        L4ServicesFetcher fetcher = getL4ServicesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.L4SERVICE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<L4Service>();
    }

    public static L4ServicesFetcher getL4ServicesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.L4SERVICES_FETCHER, id);
        if (fetcher != null) {
            return (L4ServicesFetcher) fetcher;
        }
        if ((fetcher = getL4ServicesFetcherForEnterpriseId(id)) != null) {
            return (L4ServicesFetcher) addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }
        
        if ((fetcher = getL4ServicesFetcherForL4ServiceGroupId(id)) != null) {
            return (L4ServicesFetcher) addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }
        
        if ((fetcher = getL4ServicesFetcherForMeId(id)) != null) {
            return (L4ServicesFetcher) addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<L4Service> getAllL4Services() throws RestException {
        java.util.List<L4Service> allObjs = new ArrayList<L4Service>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            L4ServicesFetcher fetcher = getL4ServicesFetcherForMeId(session.getId());
            java.util.List<L4Service> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<L4ServicesFetcher> getAllL4ServicesFetchers() throws RestException {
        java.util.List<L4ServicesFetcher> allObjs = new ArrayList<L4ServicesFetcher>();
        return allObjs;
    }
    public static L4ServiceGroup getL4ServiceGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            L4ServiceGroup obj = null;
            obj = new L4ServiceGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.L4SERVICEGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static L4ServicesFetcher getL4ServicesFetcherForL4ServiceGroupId(String id) throws RestException {
        L4ServiceGroup obj = getObject(Constants.L4SERVICEGROUP, id);
        if (obj == null) {
            obj = getL4ServiceGroupById(id);
        }

        if (obj != null) {
            L4ServicesFetcher fetcher = obj.getL4Services();
            return addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<L4ServiceGroup> getL4ServiceGroupsForFetcherId(String id) throws RestException {
        L4ServiceGroupsFetcher fetcher = getL4ServiceGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.L4SERVICEGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<L4ServiceGroup>();
    }

    public static L4ServiceGroupsFetcher getL4ServiceGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.L4SERVICEGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (L4ServiceGroupsFetcher) fetcher;
        }
        if ((fetcher = getL4ServiceGroupsFetcherForEnterpriseId(id)) != null) {
            return (L4ServiceGroupsFetcher) addFetcher(Constants.L4SERVICEGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getL4ServiceGroupsFetcherForL4ServiceId(id)) != null) {
            return (L4ServiceGroupsFetcher) addFetcher(Constants.L4SERVICEGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<L4ServiceGroup> getAllL4ServiceGroups() throws RestException {
        java.util.List<L4ServiceGroup> allObjs = new ArrayList<L4ServiceGroup>();

        return allObjs;
    }

    public static java.util.List<L4ServiceGroupsFetcher> getAllL4ServiceGroupsFetchers() throws RestException {
        java.util.List<L4ServiceGroupsFetcher> allObjs = new ArrayList<L4ServiceGroupsFetcher>();
        return allObjs;
    }
    public static L7applicationsignature getL7applicationsignatureById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            L7applicationsignature obj = null;
            obj = new L7applicationsignature();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.L7APPLICATIONSIGNATURE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ApplicationsFetcher getApplicationsFetcherForL7applicationsignatureId(String id) throws RestException {
        L7applicationsignature obj = getObject(Constants.L7APPLICATIONSIGNATURE, id);
        if (obj == null) {
            obj = getL7applicationsignatureById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForL7applicationsignatureId(String id) throws RestException {
        L7applicationsignature obj = getObject(Constants.L7APPLICATIONSIGNATURE, id);
        if (obj == null) {
            obj = getL7applicationsignatureById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForL7applicationsignatureId(String id) throws RestException {
        L7applicationsignature obj = getObject(Constants.L7APPLICATIONSIGNATURE, id);
        if (obj == null) {
            obj = getL7applicationsignatureById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForL7applicationsignatureId(String id) throws RestException {
        L7applicationsignature obj = getObject(Constants.L7APPLICATIONSIGNATURE, id);
        if (obj == null) {
            obj = getL7applicationsignatureById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<L7applicationsignature> getL7applicationsignaturesForFetcherId(String id) throws RestException {
        L7applicationsignaturesFetcher fetcher = getL7applicationsignaturesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.L7APPLICATIONSIGNATURE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<L7applicationsignature>();
    }

    public static L7applicationsignaturesFetcher getL7applicationsignaturesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.L7APPLICATIONSIGNATURES_FETCHER, id);
        if (fetcher != null) {
            return (L7applicationsignaturesFetcher) fetcher;
        }
        if ((fetcher = getL7applicationsignaturesFetcherForEnterpriseId(id)) != null) {
            return (L7applicationsignaturesFetcher) addFetcher(Constants.L7APPLICATIONSIGNATURES_FETCHER, fetcher);
        }
        
        if ((fetcher = getL7applicationsignaturesFetcherForMeId(id)) != null) {
            return (L7applicationsignaturesFetcher) addFetcher(Constants.L7APPLICATIONSIGNATURES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<L7applicationsignature> getAllL7applicationsignatures() throws RestException {
        java.util.List<L7applicationsignature> allObjs = new ArrayList<L7applicationsignature>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            L7applicationsignaturesFetcher fetcher = getL7applicationsignaturesFetcherForMeId(session.getId());
            java.util.List<L7applicationsignature> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<L7applicationsignaturesFetcher> getAllL7applicationsignaturesFetchers() throws RestException {
        java.util.List<L7applicationsignaturesFetcher> allObjs = new ArrayList<L7applicationsignaturesFetcher>();
        return allObjs;
    }
    public static LDAPConfiguration getLDAPConfigurationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            LDAPConfiguration obj = null;
            obj = new LDAPConfiguration();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LDAPCONFIGURATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLDAPConfigurationId(String id) throws RestException {
        LDAPConfiguration obj = getObject(Constants.LDAPCONFIGURATION, id);
        if (obj == null) {
            obj = getLDAPConfigurationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLDAPConfigurationId(String id) throws RestException {
        LDAPConfiguration obj = getObject(Constants.LDAPCONFIGURATION, id);
        if (obj == null) {
            obj = getLDAPConfigurationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLDAPConfigurationId(String id) throws RestException {
        LDAPConfiguration obj = getObject(Constants.LDAPCONFIGURATION, id);
        if (obj == null) {
            obj = getLDAPConfigurationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<LDAPConfiguration> getLDAPConfigurationsForFetcherId(String id) throws RestException {
        LDAPConfigurationsFetcher fetcher = getLDAPConfigurationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LDAPCONFIGURATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<LDAPConfiguration>();
    }

    public static LDAPConfigurationsFetcher getLDAPConfigurationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LDAPCONFIGURATIONS_FETCHER, id);
        if (fetcher != null) {
            return (LDAPConfigurationsFetcher) fetcher;
        }
        if ((fetcher = getLDAPConfigurationsFetcherForEnterpriseId(id)) != null) {
            return (LDAPConfigurationsFetcher) addFetcher(Constants.LDAPCONFIGURATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<LDAPConfiguration> getAllLDAPConfigurations() throws RestException {
        java.util.List<LDAPConfiguration> allObjs = new ArrayList<LDAPConfiguration>();

        return allObjs;
    }

    public static java.util.List<LDAPConfigurationsFetcher> getAllLDAPConfigurationsFetchers() throws RestException {
        java.util.List<LDAPConfigurationsFetcher> allObjs = new ArrayList<LDAPConfigurationsFetcher>();
        return allObjs;
    }
    public static License getLicenseById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            License obj = null;
            obj = new License();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LICENSE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForLicenseId(String id) throws RestException {
        License obj = getObject(Constants.LICENSE, id);
        if (obj == null) {
            obj = getLicenseById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLicenseId(String id) throws RestException {
        License obj = getObject(Constants.LICENSE, id);
        if (obj == null) {
            obj = getLicenseById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLicenseId(String id) throws RestException {
        License obj = getObject(Constants.LICENSE, id);
        if (obj == null) {
            obj = getLicenseById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLicenseId(String id) throws RestException {
        License obj = getObject(Constants.LICENSE, id);
        if (obj == null) {
            obj = getLicenseById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<License> getLicensesForFetcherId(String id) throws RestException {
        LicensesFetcher fetcher = getLicensesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LICENSE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<License>();
    }

    public static LicensesFetcher getLicensesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LICENSES_FETCHER, id);
        if (fetcher != null) {
            return (LicensesFetcher) fetcher;
        }
        if ((fetcher = getLicensesFetcherForMeId(id)) != null) {
            return (LicensesFetcher) addFetcher(Constants.LICENSES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<License> getAllLicenses() throws RestException {
        java.util.List<License> allObjs = new ArrayList<License>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            LicensesFetcher fetcher = getLicensesFetcherForMeId(session.getId());
            java.util.List<License> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<LicensesFetcher> getAllLicensesFetchers() throws RestException {
        java.util.List<LicensesFetcher> allObjs = new ArrayList<LicensesFetcher>();
        return allObjs;
    }
    public static LicenseStatus getLicenseStatusById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            LicenseStatus obj = null;
            obj = new LicenseStatus();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LICENSESTATUS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLicenseStatusId(String id) throws RestException {
        LicenseStatus obj = getObject(Constants.LICENSESTATUS, id);
        if (obj == null) {
            obj = getLicenseStatusById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLicenseStatusId(String id) throws RestException {
        LicenseStatus obj = getObject(Constants.LICENSESTATUS, id);
        if (obj == null) {
            obj = getLicenseStatusById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLicenseStatusId(String id) throws RestException {
        LicenseStatus obj = getObject(Constants.LICENSESTATUS, id);
        if (obj == null) {
            obj = getLicenseStatusById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<LicenseStatus> getLicenseStatusForFetcherId(String id) throws RestException {
        LicenseStatusFetcher fetcher = getLicenseStatusFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LICENSESTATUS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<LicenseStatus>();
    }

    public static LicenseStatusFetcher getLicenseStatusFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LICENSESTATUS_FETCHER, id);
        if (fetcher != null) {
            return (LicenseStatusFetcher) fetcher;
        }
        if ((fetcher = getLicenseStatusFetcherForMeId(id)) != null) {
            return (LicenseStatusFetcher) addFetcher(Constants.LICENSESTATUS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<LicenseStatus> getAllLicenseStatus() throws RestException {
        java.util.List<LicenseStatus> allObjs = new ArrayList<LicenseStatus>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            LicenseStatusFetcher fetcher = getLicenseStatusFetcherForMeId(session.getId());
            java.util.List<LicenseStatus> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<LicenseStatusFetcher> getAllLicenseStatusFetchers() throws RestException {
        java.util.List<LicenseStatusFetcher> allObjs = new ArrayList<LicenseStatusFetcher>();
        return allObjs;
    }
    public static Link getLinkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Link obj = null;
            obj = new Link();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LINK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static CSNATPoolsFetcher getCSNATPoolsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            CSNATPoolsFetcher fetcher = obj.getCSNATPools();
            return addFetcher(Constants.CSNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DemarcationServicesFetcher getDemarcationServicesFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            DemarcationServicesFetcher fetcher = obj.getDemarcationServices();
            return addFetcher(Constants.DEMARCATIONSERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NextHopsFetcher getNextHopsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            NextHopsFetcher fetcher = obj.getNextHops();
            return addFetcher(Constants.NEXTHOPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayAddressPoolsFetcher getOverlayAddressPoolsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            OverlayAddressPoolsFetcher fetcher = obj.getOverlayAddressPools();
            return addFetcher(Constants.OVERLAYADDRESSPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyStatementsFetcher getPolicyStatementsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            PolicyStatementsFetcher fetcher = obj.getPolicyStatements();
            return addFetcher(Constants.POLICYSTATEMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PSNATPoolsFetcher getPSNATPoolsFetcherForLinkId(String id) throws RestException {
        Link obj = getObject(Constants.LINK, id);
        if (obj == null) {
            obj = getLinkById(id);
        }

        if (obj != null) {
            PSNATPoolsFetcher fetcher = obj.getPSNATPools();
            return addFetcher(Constants.PSNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Link> getLinksForFetcherId(String id) throws RestException {
        LinksFetcher fetcher = getLinksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LINK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Link>();
    }

    public static LinksFetcher getLinksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LINKS_FETCHER, id);
        if (fetcher != null) {
            return (LinksFetcher) fetcher;
        }
        if ((fetcher = getLinksFetcherForAggregatedDomainId(id)) != null) {
            return (LinksFetcher) addFetcher(Constants.LINKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getLinksFetcherForDomainId(id)) != null) {
            return (LinksFetcher) addFetcher(Constants.LINKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Link> getAllLinks() throws RestException {
        java.util.List<Link> allObjs = new ArrayList<Link>();

        return allObjs;
    }

    public static java.util.List<LinksFetcher> getAllLinksFetchers() throws RestException {
        java.util.List<LinksFetcher> allObjs = new ArrayList<LinksFetcher>();
        return allObjs;
    }
    public static Location getLocationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Location obj = null;
            obj = new Location();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LOCATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLocationId(String id) throws RestException {
        Location obj = getObject(Constants.LOCATION, id);
        if (obj == null) {
            obj = getLocationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLocationId(String id) throws RestException {
        Location obj = getObject(Constants.LOCATION, id);
        if (obj == null) {
            obj = getLocationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLocationId(String id) throws RestException {
        Location obj = getObject(Constants.LOCATION, id);
        if (obj == null) {
            obj = getLocationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Location> getLocationsForFetcherId(String id) throws RestException {
        LocationsFetcher fetcher = getLocationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LOCATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Location>();
    }

    public static LocationsFetcher getLocationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LOCATIONS_FETCHER, id);
        if (fetcher != null) {
            return (LocationsFetcher) fetcher;
        }
        if ((fetcher = getLocationsFetcherForGatewayId(id)) != null) {
            return (LocationsFetcher) addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getLocationsFetcherForNetconfGatewayId(id)) != null) {
            return (LocationsFetcher) addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getLocationsFetcherForNSGatewayId(id)) != null) {
            return (LocationsFetcher) addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Location> getAllLocations() throws RestException {
        java.util.List<Location> allObjs = new ArrayList<Location>();

        return allObjs;
    }

    public static java.util.List<LocationsFetcher> getAllLocationsFetchers() throws RestException {
        java.util.List<LocationsFetcher> allObjs = new ArrayList<LocationsFetcher>();
        return allObjs;
    }
    public static LTEInformation getLTEInformationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            LTEInformation obj = null;
            obj = new LTEInformation();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LTEINFORMATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLTEInformationId(String id) throws RestException {
        LTEInformation obj = getObject(Constants.LTEINFORMATION, id);
        if (obj == null) {
            obj = getLTEInformationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLTEInformationId(String id) throws RestException {
        LTEInformation obj = getObject(Constants.LTEINFORMATION, id);
        if (obj == null) {
            obj = getLTEInformationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLTEInformationId(String id) throws RestException {
        LTEInformation obj = getObject(Constants.LTEINFORMATION, id);
        if (obj == null) {
            obj = getLTEInformationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<LTEInformation> getLTEInformationsForFetcherId(String id) throws RestException {
        LTEInformationsFetcher fetcher = getLTEInformationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LTEINFORMATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<LTEInformation>();
    }

    public static LTEInformationsFetcher getLTEInformationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LTEINFORMATIONS_FETCHER, id);
        if (fetcher != null) {
            return (LTEInformationsFetcher) fetcher;
        }
        if ((fetcher = getLTEInformationsFetcherForNSPortId(id)) != null) {
            return (LTEInformationsFetcher) addFetcher(Constants.LTEINFORMATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<LTEInformation> getAllLTEInformations() throws RestException {
        java.util.List<LTEInformation> allObjs = new ArrayList<LTEInformation>();

        return allObjs;
    }

    public static java.util.List<LTEInformationsFetcher> getAllLTEInformationsFetchers() throws RestException {
        java.util.List<LTEInformationsFetcher> allObjs = new ArrayList<LTEInformationsFetcher>();
        return allObjs;
    }
    public static Ltestatistics getLtestatisticsById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Ltestatistics obj = null;
            obj = new Ltestatistics();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.LTESTATISTICS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForLtestatisticsId(String id) throws RestException {
        Ltestatistics obj = getObject(Constants.LTESTATISTICS, id);
        if (obj == null) {
            obj = getLtestatisticsById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForLtestatisticsId(String id) throws RestException {
        Ltestatistics obj = getObject(Constants.LTESTATISTICS, id);
        if (obj == null) {
            obj = getLtestatisticsById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForLtestatisticsId(String id) throws RestException {
        Ltestatistics obj = getObject(Constants.LTESTATISTICS, id);
        if (obj == null) {
            obj = getLtestatisticsById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Ltestatistics> getLtestatisticsForFetcherId(String id) throws RestException {
        LtestatisticsFetcher fetcher = getLtestatisticsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.LTESTATISTICS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Ltestatistics>();
    }

    public static LtestatisticsFetcher getLtestatisticsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.LTESTATISTICS_FETCHER, id);
        if (fetcher != null) {
            return (LtestatisticsFetcher) fetcher;
        }
        if ((fetcher = getLtestatisticsFetcherForVLANId(id)) != null) {
            return (LtestatisticsFetcher) addFetcher(Constants.LTESTATISTICS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Ltestatistics> getAllLtestatistics() throws RestException {
        java.util.List<Ltestatistics> allObjs = new ArrayList<Ltestatistics>();

        return allObjs;
    }

    public static java.util.List<LtestatisticsFetcher> getAllLtestatisticsFetchers() throws RestException {
        java.util.List<LtestatisticsFetcher> allObjs = new ArrayList<LtestatisticsFetcher>();
        return allObjs;
    }
    public static MACFilterProfile getMACFilterProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MACFilterProfile obj = null;
            obj = new MACFilterProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MACFILTERPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMACFilterProfileId(String id) throws RestException {
        MACFilterProfile obj = getObject(Constants.MACFILTERPROFILE, id);
        if (obj == null) {
            obj = getMACFilterProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMACFilterProfileId(String id) throws RestException {
        MACFilterProfile obj = getObject(Constants.MACFILTERPROFILE, id);
        if (obj == null) {
            obj = getMACFilterProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMACFilterProfileId(String id) throws RestException {
        MACFilterProfile obj = getObject(Constants.MACFILTERPROFILE, id);
        if (obj == null) {
            obj = getMACFilterProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MACFilterProfile> getMACFilterProfilesForFetcherId(String id) throws RestException {
        MACFilterProfilesFetcher fetcher = getMACFilterProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MACFILTERPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MACFilterProfile>();
    }

    public static MACFilterProfilesFetcher getMACFilterProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MACFILTERPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (MACFilterProfilesFetcher) fetcher;
        }
        if ((fetcher = getMACFilterProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (MACFilterProfilesFetcher) addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getMACFilterProfilesFetcherForGatewayId(id)) != null) {
            return (MACFilterProfilesFetcher) addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getMACFilterProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (MACFilterProfilesFetcher) addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getMACFilterProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (MACFilterProfilesFetcher) addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MACFilterProfile> getAllMACFilterProfiles() throws RestException {
        java.util.List<MACFilterProfile> allObjs = new ArrayList<MACFilterProfile>();

        return allObjs;
    }

    public static java.util.List<MACFilterProfilesFetcher> getAllMACFilterProfilesFetchers() throws RestException {
        java.util.List<MACFilterProfilesFetcher> allObjs = new ArrayList<MACFilterProfilesFetcher>();
        return allObjs;
    }
    public static Me getMeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Me obj = null;
            obj = session.getMe();
            if (obj.getId().equals(id)) {
                return addObject(Constants.ME, obj);
            }
            
        }

        return null;
    }
    public static AllGatewaysFetcher getAllGatewaysFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            AllGatewaysFetcher fetcher = obj.getAllGateways();
            return addFetcher(Constants.ALLGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AllRedundancyGroupsFetcher getAllRedundancyGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            AllRedundancyGroupsFetcher fetcher = obj.getAllRedundancyGroups();
            return addFetcher(Constants.ALLREDUNDANCYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationsFetcher getApplicationsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ApplicationsFetcher fetcher = obj.getApplications();
            return addFetcher(Constants.APPLICATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ApplicationperformancemanagementsFetcher getApplicationperformancemanagementsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementsFetcher fetcher = obj.getApplicationperformancemanagements();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AutoDiscoveredGatewaysFetcher getAutoDiscoveredGatewaysFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            AutoDiscoveredGatewaysFetcher fetcher = obj.getAutoDiscoveredGateways();
            return addFetcher(Constants.AUTODISCOVEREDGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPNeighborsFetcher getBGPNeighborsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            BGPNeighborsFetcher fetcher = obj.getBGPNeighbors();
            return addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPProfilesFetcher getBGPProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            BGPProfilesFetcher fetcher = obj.getBGPProfiles();
            return addFetcher(Constants.BGPPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CertificatesFetcher getCertificatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            CertificatesFetcher fetcher = obj.getCertificates();
            return addFetcher(Constants.CERTIFICATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CloudMgmtSystemsFetcher getCloudMgmtSystemsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            CloudMgmtSystemsFetcher fetcher = obj.getCloudMgmtSystems();
            return addFetcher(Constants.CLOUDMGMTSYSTEMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CommandsFetcher getCommandsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            CommandsFetcher fetcher = obj.getCommands();
            return addFetcher(Constants.COMMANDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static COSRemarkingPolicyTablesFetcher getCOSRemarkingPolicyTablesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            COSRemarkingPolicyTablesFetcher fetcher = obj.getCOSRemarkingPolicyTables();
            return addFetcher(Constants.COSREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DSCPRemarkingPolicyTablesFetcher getDSCPRemarkingPolicyTablesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            DSCPRemarkingPolicyTablesFetcher fetcher = obj.getDSCPRemarkingPolicyTables();
            return addFetcher(Constants.DSCPREMARKINGPOLICYTABLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DUCGroupsFetcher getDUCGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            DUCGroupsFetcher fetcher = obj.getDUCGroups();
            return addFetcher(Constants.DUCGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterEAMConfigsFetcher getVCenterEAMConfigsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VCenterEAMConfigsFetcher fetcher = obj.getVCenterEAMConfigs();
            return addFetcher(Constants.VCENTEREAMCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLTemplatesFetcher getEgressACLTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EgressACLTemplatesFetcher fetcher = obj.getEgressACLTemplates();
            return addFetcher(Constants.EGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressAdvFwdEntryTemplatesFetcher getEgressAdvFwdEntryTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EgressAdvFwdEntryTemplatesFetcher fetcher = obj.getEgressAdvFwdEntryTemplates();
            return addFetcher(Constants.EGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainFIPAclTemplatesFetcher getDomainFIPAclTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            DomainFIPAclTemplatesFetcher fetcher = obj.getDomainFIPAclTemplates();
            return addFetcher(Constants.DOMAINFIPACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressQOSPoliciesFetcher getEgressQOSPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EgressQOSPoliciesFetcher fetcher = obj.getEgressQOSPolicies();
            return addFetcher(Constants.EGRESSQOSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisesFetcher getEnterprisesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EnterprisesFetcher fetcher = obj.getEnterprises();
            return addFetcher(Constants.ENTERPRISES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterpriseProfilesFetcher getEnterpriseProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EnterpriseProfilesFetcher fetcher = obj.getEnterpriseProfiles();
            return addFetcher(Constants.ENTERPRISEPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EsIlmPoliciesFetcher getEsIlmPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EsIlmPoliciesFetcher fetcher = obj.getEsIlmPolicies();
            return addFetcher(Constants.ESILMPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EsIndexConfigsFetcher getEsIndexConfigsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EsIndexConfigsFetcher fetcher = obj.getEsIndexConfigs();
            return addFetcher(Constants.ESINDEXCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EthernetSegmentGWGroupsFetcher getEthernetSegmentGWGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            EthernetSegmentGWGroupsFetcher fetcher = obj.getEthernetSegmentGWGroups();
            return addFetcher(Constants.ETHERNETSEGMENTGWGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static FloatingIpsFetcher getFloatingIpsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            FloatingIpsFetcher fetcher = obj.getFloatingIps();
            return addFetcher(Constants.FLOATINGIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewayTemplatesFetcher getGatewayTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            GatewayTemplatesFetcher fetcher = obj.getGatewayTemplates();
            return addFetcher(Constants.GATEWAYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HostInterfacesFetcher getHostInterfacesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            HostInterfacesFetcher fetcher = obj.getHostInterfaces();
            return addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureAccessProfilesFetcher getInfrastructureAccessProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            InfrastructureAccessProfilesFetcher fetcher = obj.getInfrastructureAccessProfiles();
            return addFetcher(Constants.INFRASTRUCTUREACCESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureEVDFProfilesFetcher getInfrastructureEVDFProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            InfrastructureEVDFProfilesFetcher fetcher = obj.getInfrastructureEVDFProfiles();
            return addFetcher(Constants.INFRASTRUCTUREEVDFPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureGatewayProfilesFetcher getInfrastructureGatewayProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            InfrastructureGatewayProfilesFetcher fetcher = obj.getInfrastructureGatewayProfiles();
            return addFetcher(Constants.INFRASTRUCTUREGATEWAYPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureVscProfilesFetcher getInfrastructureVscProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            InfrastructureVscProfilesFetcher fetcher = obj.getInfrastructureVscProfiles();
            return addFetcher(Constants.INFRASTRUCTUREVSCPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLTemplatesFetcher getIngressACLTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            IngressACLTemplatesFetcher fetcher = obj.getIngressACLTemplates();
            return addFetcher(Constants.INGRESSACLTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdEntryTemplatesFetcher getIngressAdvFwdEntryTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            IngressAdvFwdEntryTemplatesFetcher fetcher = obj.getIngressAdvFwdEntryTemplates();
            return addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressQOSPoliciesFetcher getIngressQOSPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            IngressQOSPoliciesFetcher fetcher = obj.getIngressQOSPolicies();
            return addFetcher(Constants.INGRESSQOSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static KeyServerMembersFetcher getKeyServerMembersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            KeyServerMembersFetcher fetcher = obj.getKeyServerMembers();
            return addFetcher(Constants.KEYSERVERMEMBERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L4ServicesFetcher getL4ServicesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            L4ServicesFetcher fetcher = obj.getL4Services();
            return addFetcher(Constants.L4SERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L7applicationsignaturesFetcher getL7applicationsignaturesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            L7applicationsignaturesFetcher fetcher = obj.getL7applicationsignatures();
            return addFetcher(Constants.L7APPLICATIONSIGNATURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LicensesFetcher getLicensesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            LicensesFetcher fetcher = obj.getLicenses();
            return addFetcher(Constants.LICENSES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LicenseStatusFetcher getLicenseStatusFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            LicenseStatusFetcher fetcher = obj.getLicenseStatus();
            return addFetcher(Constants.LICENSESTATUS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MirrorDestinationsFetcher getMirrorDestinationsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            MirrorDestinationsFetcher fetcher = obj.getMirrorDestinations();
            return addFetcher(Constants.MIRRORDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            MultiCastChannelMapsFetcher fetcher = obj.getMultiCastChannelMaps();
            return addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetconfProfilesFetcher getNetconfProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NetconfProfilesFetcher fetcher = obj.getNetconfProfiles();
            return addFetcher(Constants.NETCONFPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkLayoutsFetcher getNetworkLayoutsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NetworkLayoutsFetcher fetcher = obj.getNetworkLayouts();
            return addFetcher(Constants.NETWORKLAYOUTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceMeasurementsFetcher getNetworkPerformanceMeasurementsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NetworkPerformanceMeasurementsFetcher fetcher = obj.getNetworkPerformanceMeasurements();
            return addFetcher(Constants.NETWORKPERFORMANCEMEASUREMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewayTemplatesFetcher getNSGatewayTemplatesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGatewayTemplatesFetcher fetcher = obj.getNSGatewayTemplates();
            return addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGGroupsFetcher getNSGGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGGroupsFetcher fetcher = obj.getNSGGroups();
            return addFetcher(Constants.NSGGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGInfosFetcher getNSGInfosFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGInfosFetcher fetcher = obj.getNSGInfos();
            return addFetcher(Constants.NSGINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGMigrationProfilesFetcher getNSGMigrationProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGMigrationProfilesFetcher fetcher = obj.getNSGMigrationProfiles();
            return addFetcher(Constants.NSGMIGRATIONPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGPatchProfilesFetcher getNSGPatchProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGPatchProfilesFetcher fetcher = obj.getNSGPatchProfiles();
            return addFetcher(Constants.NSGPATCHPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSRedundantGatewayGroupsFetcher getNSRedundantGatewayGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSRedundantGatewayGroupsFetcher fetcher = obj.getNSRedundantGatewayGroups();
            return addFetcher(Constants.NSREDUNDANTGATEWAYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGUpgradeProfilesFetcher getNSGUpgradeProfilesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            NSGUpgradeProfilesFetcher fetcher = obj.getNSGUpgradeProfiles();
            return addFetcher(Constants.NSGUPGRADEPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayMirrorDestinationsFetcher getOverlayMirrorDestinationsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            OverlayMirrorDestinationsFetcher fetcher = obj.getOverlayMirrorDestinations();
            return addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATMappersFetcher getPATMappersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            PATMappersFetcher fetcher = obj.getPATMappers();
            return addFetcher(Constants.PATMAPPERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PerformanceMonitorsFetcher getPerformanceMonitorsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            PerformanceMonitorsFetcher fetcher = obj.getPerformanceMonitors();
            return addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyObjectGroupsFetcher getPolicyObjectGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            PolicyObjectGroupsFetcher fetcher = obj.getPolicyObjectGroups();
            return addFetcher(Constants.POLICYOBJECTGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QosPolicersFetcher getQosPolicersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            QosPolicersFetcher fetcher = obj.getQosPolicers();
            return addFetcher(Constants.QOSPOLICERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RateLimitersFetcher getRateLimitersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RateLimitersFetcher fetcher = obj.getRateLimiters();
            return addFetcher(Constants.RATELIMITERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedundancyGroupsFetcher getRedundancyGroupsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RedundancyGroupsFetcher fetcher = obj.getRedundancyGroups();
            return addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RemoteVrsInfosFetcher getRemoteVrsInfosFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RemoteVrsInfosFetcher fetcher = obj.getRemoteVrsInfos();
            return addFetcher(Constants.REMOTEVRSINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RolesFetcher getRolesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RolesFetcher fetcher = obj.getRoles();
            return addFetcher(Constants.ROLES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            RoutingPoliciesFetcher fetcher = obj.getRoutingPolicies();
            return addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SaaSApplicationTypesFetcher getSaaSApplicationTypesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            SaaSApplicationTypesFetcher fetcher = obj.getSaaSApplicationTypes();
            return addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SharedNetworkResourcesFetcher getSharedNetworkResourcesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            SharedNetworkResourcesFetcher fetcher = obj.getSharedNetworkResources();
            return addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SiteInfosFetcher getSiteInfosFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            SiteInfosFetcher fetcher = obj.getSiteInfos();
            return addFetcher(Constants.SITEINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatsCollectorInfosFetcher getStatsCollectorInfosFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            StatsCollectorInfosFetcher fetcher = obj.getStatsCollectorInfos();
            return addFetcher(Constants.STATSCOLLECTORINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SystemConfigsFetcher getSystemConfigsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            SystemConfigsFetcher fetcher = obj.getSystemConfigs();
            return addFetcher(Constants.SYSTEMCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestDefinitionsFetcher getTestDefinitionsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            TestDefinitionsFetcher fetcher = obj.getTestDefinitions();
            return addFetcher(Constants.TESTDEFINITIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UnderlaysFetcher getUnderlaysFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            UnderlaysFetcher fetcher = obj.getUnderlays();
            return addFetcher(Constants.UNDERLAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkRDsFetcher getUplinkRDsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            UplinkRDsFetcher fetcher = obj.getUplinkRDs();
            return addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UsersFetcher getUsersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            UsersFetcher fetcher = obj.getUsers();
            return addFetcher(Constants.USERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UserContextsFetcher getUserContextsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            UserContextsFetcher fetcher = obj.getUserContexts();
            return addFetcher(Constants.USERCONTEXTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCentersFetcher getVCentersFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VCentersFetcher fetcher = obj.getVCenters();
            return addFetcher(Constants.VCENTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterHypervisorsFetcher getVCenterHypervisorsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VCenterHypervisorsFetcher fetcher = obj.getVCenterHypervisors();
            return addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VirtualFirewallPoliciesFetcher fetcher = obj.getVirtualFirewallPolicies();
            return addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VirtualFirewallRulesFetcher fetcher = obj.getVirtualFirewallRules();
            return addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFCatalogsFetcher getVNFCatalogsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VNFCatalogsFetcher fetcher = obj.getVNFCatalogs();
            return addFetcher(Constants.VNFCATALOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFMetadatasFetcher getVNFMetadatasFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VNFMetadatasFetcher fetcher = obj.getVNFMetadatas();
            return addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFThresholdPoliciesFetcher getVNFThresholdPoliciesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VNFThresholdPoliciesFetcher fetcher = obj.getVNFThresholdPolicies();
            return addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSsFetcher getVRSsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VRSsFetcher fetcher = obj.getVRSs();
            return addFetcher(Constants.VRSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterVRSConfigsFetcher getVCenterVRSConfigsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VCenterVRSConfigsFetcher fetcher = obj.getVCenterVRSConfigs();
            return addFetcher(Constants.VCENTERVRSCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static vrsInfosFetcher getvrsInfosFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            vrsInfosFetcher fetcher = obj.getvrsInfos();
            return addFetcher(Constants.VRSINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSDConfigsFetcher getVSDConfigsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VSDConfigsFetcher fetcher = obj.getVSDConfigs();
            return addFetcher(Constants.VSDCONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSPsFetcher getVSPsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            VSPsFetcher fetcher = obj.getVSPs();
            return addFetcher(Constants.VSPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZFBAutoAssignmentsFetcher getZFBAutoAssignmentsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ZFBAutoAssignmentsFetcher fetcher = obj.getZFBAutoAssignments();
            return addFetcher(Constants.ZFBAUTOASSIGNMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZFBRequestsFetcher getZFBRequestsFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ZFBRequestsFetcher fetcher = obj.getZFBRequests();
            return addFetcher(Constants.ZFBREQUESTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ZonesFetcher getZonesFetcherForMeId(String id) throws RestException {
        Me obj = getObject(Constants.ME, id);
        if (obj == null) {
            obj = getMeById(id);
        }

        if (obj != null) {
            ZonesFetcher fetcher = obj.getZones();
            return addFetcher(Constants.ZONES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Me> getMesForFetcherId(String id) throws RestException {
        MesFetcher fetcher = getMesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ME);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Me>();
    }

    public static MesFetcher getMesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MES_FETCHER, id);
        if (fetcher != null) {
            return (MesFetcher) fetcher;
        }return null;
    }

    public static java.util.List<Me> getAllMes() throws RestException {
        java.util.List<Me> allObjs = new ArrayList<Me>();

        return allObjs;
    }

    public static java.util.List<MesFetcher> getAllMesFetchers() throws RestException {
        java.util.List<MesFetcher> allObjs = new ArrayList<MesFetcher>();
        return allObjs;
    }
    public static Metadata getMetadataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Metadata obj = null;
            obj = new Metadata();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.METADATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForMetadataId(String id) throws RestException {
        Metadata obj = getObject(Constants.METADATA, id);
        if (obj == null) {
            obj = getMetadataById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Metadata> getMetadatasForFetcherId(String id) throws RestException {
        MetadatasFetcher fetcher = getMetadatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.METADATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Metadata>();
    }

    public static MetadatasFetcher getMetadatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.METADATAS_FETCHER, id);
        if (fetcher != null) {
            return (MetadatasFetcher) fetcher;
        }
        if ((fetcher = getMetadatasFetcherForAddressMapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAddressRangeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAggregatedDomainId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAlarmId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAllAlarmId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAllGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAllRedundancyGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForApplicationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForApplicationBindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForApplicationperformancemanagementId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForApplicationperformancemanagementbindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAvatarId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForAzureCloudId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBFDSessionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBGPNeighborId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBGPPeerId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBGPProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBootstrapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBootstrapActivationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBRConnectionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBridgeInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForBulkStatisticsId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCertificateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCloudMgmtSystemId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVSDComponentId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForConnectionendpointId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForContainerId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForContainerInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForContainerResyncId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForControllerVRSLinkId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCOSRemarkingPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCOSRemarkingPolicyTableId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCSNATPoolId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCTranslationMapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForCustomPropertyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDefaultGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDemarcationServiceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDeploymentFailureId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDestinationurlId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDHCPOptionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDHCPv6OptionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDiskStatId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDomainId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDomainKindSummaryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDomainTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDSCPForwardingClassMappingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDSCPForwardingClassTableId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDSCPRemarkingPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDSCPRemarkingPolicyTableId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDUCGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDUCGroupBindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterEAMConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressACLEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressACLTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressAdvFwdEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressAdvFwdTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressAuditACLEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressAuditACLTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDomainFIPAclTemplateEntryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForDomainFIPAclTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEgressQOSPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterpriseId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterpriseNetworkId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterprisePermissionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterpriseProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterpriseSecuredDataId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEnterpriseSecurityId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEsIlmPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEsIndexConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForEventLogId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForFirewallAclId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForFirewallRuleId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForFloatingIpId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForForwardingPathListId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForForwardingPathListEntryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewayRedundantPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewaySecuredDataId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewaySecurityId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewaysLocationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGatewayTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGlobalMetadataId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGNMIProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGNMISessionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForGroupKeyEncryptionProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForHostInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForHSCId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKECertificateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEEncryptionprofileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEGatewayConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEGatewayConnectionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEGatewayProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKEPSKId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIKESubnetId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForInfrastructureConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForInfrastructureEVDFProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForInfrastructureGatewayProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForInfrastructureVscProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressACLEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressACLTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressAdvFwdEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressAdvFwdTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressAuditACLEntryTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressAuditACLTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIngressQOSPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIPFilterProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIPReservationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForIPv6FilterProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForJobId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForKeyServerMemberId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForKeyServerMonitorId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForKeyServerMonitorEncryptedSeedId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForKeyServerMonitorSeedId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForKeyServerMonitorSEKId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForL2DomainId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForL2DomainTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForL7applicationsignatureId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLDAPConfigurationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLicenseId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLicenseStatusId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLinkId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLocationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLTEInformationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForLtestatisticsId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMACFilterProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMirrorDestinationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMirrorDestinationGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMonitoringPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMonitorscopeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMultiCastChannelMapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMultiCastListId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMultiCastRangeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForMultiNICVPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNATMapEntryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetconfGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetconfManagerId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetconfProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetconfSessionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetworkLayoutId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetworkMacroGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetworkPerformanceBindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNetworkPerformanceMeasurementId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNextHopId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGatewayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGatewaysCountId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGatewaySummaryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGatewayTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSGRoutingPolicyBindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForNSPortTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRedundantPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOSPFAreaId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOSPFInstanceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOSPFInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOverlayAddressPoolId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOverlayMirrorDestinationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOverlayMirrorDestinationTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForOverlayPATNATEntryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPatchId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPATNATPoolId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPermissionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyDecisionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyEntryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyGroupCategoryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyGroupTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyObjectGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPolicyStatementId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPortTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPSNATPoolId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPSPATMapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPTranslationMapId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForPublicNetworkMacroId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForQOSId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForQosPolicerId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRateLimiterId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRedirectionTargetId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRedirectionTargetTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRedundancyGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRemoteVrsInfoId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVMResyncId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRoleId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRoleentryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRoutingPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForRoutingPolicyBindingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSaaSApplicationGroupId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSaaSApplicationTypeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSAPEgressQoSProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSAPIngressQoSProfileId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForWANServiceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSharedNetworkResourceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForShuntLinkId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSiteInfoId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSPATSourcesPoolId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSSHKeyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSSIDConnectionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForStaticRouteId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForStatisticsId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForStatsCollectorInfoId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForStatisticsPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSubnetId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSubnetTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForSystemConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTCAId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTestId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTestDefinitionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTestRunId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTestSuiteId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTestSuiteRunId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTierId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForTrunkId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForUnderlayId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForUplinkConnectionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForUplinkRDId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForUserId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForUserContextId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterClusterId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterDataCenterId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterHypervisorId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVirtualFirewallPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVirtualFirewallRuleId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVirtualIPId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVLANId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVLANTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVMId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVMInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVMIPReservationId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFCatalogId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFDescriptorId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFDomainMappingId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFInterfaceId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFInterfaceDescriptorId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFMetadataId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVNFThresholdPolicyId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVPNConnectionId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVPortMirrorId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVRSId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVRSAddressRangeId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVCenterVRSConfigId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForvrsInfoId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVSCId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVSDId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVsgRedundantPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForVSPId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForWebCategoryId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForWebDomainNameId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForWirelessPortId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForZFBRequestId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForZoneId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMetadatasFetcherForZoneTemplateId(id)) != null) {
            return (MetadatasFetcher) addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Metadata> getAllMetadatas() throws RestException {
        java.util.List<Metadata> allObjs = new ArrayList<Metadata>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            MetadatasFetcher fetcher = getMetadatasFetcherForMeId(session.getId());
            java.util.List<Metadata> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<MetadatasFetcher> getAllMetadatasFetchers() throws RestException {
        java.util.List<MetadatasFetcher> allObjs = new ArrayList<MetadatasFetcher>();
        return allObjs;
    }
    public static MirrorDestination getMirrorDestinationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MirrorDestination obj = null;
            obj = new MirrorDestination();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MIRRORDESTINATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdEntryTemplatesFetcher getIngressAdvFwdEntryTemplatesFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            IngressAdvFwdEntryTemplatesFetcher fetcher = obj.getIngressAdvFwdEntryTemplates();
            return addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortMirrorsFetcher getVPortMirrorsFetcherForMirrorDestinationId(String id) throws RestException {
        MirrorDestination obj = getObject(Constants.MIRRORDESTINATION, id);
        if (obj == null) {
            obj = getMirrorDestinationById(id);
        }

        if (obj != null) {
            VPortMirrorsFetcher fetcher = obj.getVPortMirrors();
            return addFetcher(Constants.VPORTMIRRORS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MirrorDestination> getMirrorDestinationsForFetcherId(String id) throws RestException {
        MirrorDestinationsFetcher fetcher = getMirrorDestinationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MIRRORDESTINATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MirrorDestination>();
    }

    public static MirrorDestinationsFetcher getMirrorDestinationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MIRRORDESTINATIONS_FETCHER, id);
        if (fetcher != null) {
            return (MirrorDestinationsFetcher) fetcher;
        }
        if ((fetcher = getMirrorDestinationsFetcherForMeId(id)) != null) {
            return (MirrorDestinationsFetcher) addFetcher(Constants.MIRRORDESTINATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMirrorDestinationsFetcherForMirrorDestinationGroupId(id)) != null) {
            return (MirrorDestinationsFetcher) addFetcher(Constants.MIRRORDESTINATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MirrorDestination> getAllMirrorDestinations() throws RestException {
        java.util.List<MirrorDestination> allObjs = new ArrayList<MirrorDestination>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            MirrorDestinationsFetcher fetcher = getMirrorDestinationsFetcherForMeId(session.getId());
            java.util.List<MirrorDestination> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<MirrorDestinationsFetcher> getAllMirrorDestinationsFetchers() throws RestException {
        java.util.List<MirrorDestinationsFetcher> allObjs = new ArrayList<MirrorDestinationsFetcher>();
        return allObjs;
    }
    public static MirrorDestinationGroup getMirrorDestinationGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MirrorDestinationGroup obj = null;
            obj = new MirrorDestinationGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MIRRORDESTINATIONGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMirrorDestinationGroupId(String id) throws RestException {
        MirrorDestinationGroup obj = getObject(Constants.MIRRORDESTINATIONGROUP, id);
        if (obj == null) {
            obj = getMirrorDestinationGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMirrorDestinationGroupId(String id) throws RestException {
        MirrorDestinationGroup obj = getObject(Constants.MIRRORDESTINATIONGROUP, id);
        if (obj == null) {
            obj = getMirrorDestinationGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MirrorDestinationsFetcher getMirrorDestinationsFetcherForMirrorDestinationGroupId(String id) throws RestException {
        MirrorDestinationGroup obj = getObject(Constants.MIRRORDESTINATIONGROUP, id);
        if (obj == null) {
            obj = getMirrorDestinationGroupById(id);
        }

        if (obj != null) {
            MirrorDestinationsFetcher fetcher = obj.getMirrorDestinations();
            return addFetcher(Constants.MIRRORDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayMirrorDestinationsFetcher getOverlayMirrorDestinationsFetcherForMirrorDestinationGroupId(String id) throws RestException {
        MirrorDestinationGroup obj = getObject(Constants.MIRRORDESTINATIONGROUP, id);
        if (obj == null) {
            obj = getMirrorDestinationGroupById(id);
        }

        if (obj != null) {
            OverlayMirrorDestinationsFetcher fetcher = obj.getOverlayMirrorDestinations();
            return addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMirrorDestinationGroupId(String id) throws RestException {
        MirrorDestinationGroup obj = getObject(Constants.MIRRORDESTINATIONGROUP, id);
        if (obj == null) {
            obj = getMirrorDestinationGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MirrorDestinationGroup> getMirrorDestinationGroupsForFetcherId(String id) throws RestException {
        MirrorDestinationGroupsFetcher fetcher = getMirrorDestinationGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MIRRORDESTINATIONGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MirrorDestinationGroup>();
    }

    public static MirrorDestinationGroupsFetcher getMirrorDestinationGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MIRRORDESTINATIONGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (MirrorDestinationGroupsFetcher) fetcher;
        }
        if ((fetcher = getMirrorDestinationGroupsFetcherForDomainId(id)) != null) {
            return (MirrorDestinationGroupsFetcher) addFetcher(Constants.MIRRORDESTINATIONGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMirrorDestinationGroupsFetcherForL2DomainId(id)) != null) {
            return (MirrorDestinationGroupsFetcher) addFetcher(Constants.MIRRORDESTINATIONGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MirrorDestinationGroup> getAllMirrorDestinationGroups() throws RestException {
        java.util.List<MirrorDestinationGroup> allObjs = new ArrayList<MirrorDestinationGroup>();

        return allObjs;
    }

    public static java.util.List<MirrorDestinationGroupsFetcher> getAllMirrorDestinationGroupsFetchers() throws RestException {
        java.util.List<MirrorDestinationGroupsFetcher> allObjs = new ArrayList<MirrorDestinationGroupsFetcher>();
        return allObjs;
    }
    public static MonitoringPort getMonitoringPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MonitoringPort obj = null;
            obj = new MonitoringPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MONITORINGPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMonitoringPortId(String id) throws RestException {
        MonitoringPort obj = getObject(Constants.MONITORINGPORT, id);
        if (obj == null) {
            obj = getMonitoringPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMonitoringPortId(String id) throws RestException {
        MonitoringPort obj = getObject(Constants.MONITORINGPORT, id);
        if (obj == null) {
            obj = getMonitoringPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMonitoringPortId(String id) throws RestException {
        MonitoringPort obj = getObject(Constants.MONITORINGPORT, id);
        if (obj == null) {
            obj = getMonitoringPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MonitoringPort> getMonitoringPortsForFetcherId(String id) throws RestException {
        MonitoringPortsFetcher fetcher = getMonitoringPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MONITORINGPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MonitoringPort>();
    }

    public static MonitoringPortsFetcher getMonitoringPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MONITORINGPORTS_FETCHER, id);
        if (fetcher != null) {
            return (MonitoringPortsFetcher) fetcher;
        }
        if ((fetcher = getMonitoringPortsFetcherForHSCId(id)) != null) {
            return (MonitoringPortsFetcher) addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMonitoringPortsFetcherForVRSId(id)) != null) {
            return (MonitoringPortsFetcher) addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMonitoringPortsFetcherForVSCId(id)) != null) {
            return (MonitoringPortsFetcher) addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MonitoringPort> getAllMonitoringPorts() throws RestException {
        java.util.List<MonitoringPort> allObjs = new ArrayList<MonitoringPort>();

        return allObjs;
    }

    public static java.util.List<MonitoringPortsFetcher> getAllMonitoringPortsFetchers() throws RestException {
        java.util.List<MonitoringPortsFetcher> allObjs = new ArrayList<MonitoringPortsFetcher>();
        return allObjs;
    }
    public static Monitorscope getMonitorscopeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Monitorscope obj = null;
            obj = new Monitorscope();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MONITORSCOPE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMonitorscopeId(String id) throws RestException {
        Monitorscope obj = getObject(Constants.MONITORSCOPE, id);
        if (obj == null) {
            obj = getMonitorscopeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMonitorscopeId(String id) throws RestException {
        Monitorscope obj = getObject(Constants.MONITORSCOPE, id);
        if (obj == null) {
            obj = getMonitorscopeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMonitorscopeId(String id) throws RestException {
        Monitorscope obj = getObject(Constants.MONITORSCOPE, id);
        if (obj == null) {
            obj = getMonitorscopeById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Monitorscope> getMonitorscopesForFetcherId(String id) throws RestException {
        MonitorscopesFetcher fetcher = getMonitorscopesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MONITORSCOPE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Monitorscope>();
    }

    public static MonitorscopesFetcher getMonitorscopesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MONITORSCOPES_FETCHER, id);
        if (fetcher != null) {
            return (MonitorscopesFetcher) fetcher;
        }
        if ((fetcher = getMonitorscopesFetcherForApplicationId(id)) != null) {
            return (MonitorscopesFetcher) addFetcher(Constants.MONITORSCOPES_FETCHER, fetcher);
        }
        
        if ((fetcher = getMonitorscopesFetcherForNetworkPerformanceMeasurementId(id)) != null) {
            return (MonitorscopesFetcher) addFetcher(Constants.MONITORSCOPES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Monitorscope> getAllMonitorscopes() throws RestException {
        java.util.List<Monitorscope> allObjs = new ArrayList<Monitorscope>();

        return allObjs;
    }

    public static java.util.List<MonitorscopesFetcher> getAllMonitorscopesFetchers() throws RestException {
        java.util.List<MonitorscopesFetcher> allObjs = new ArrayList<MonitorscopesFetcher>();
        return allObjs;
    }
    public static MultiCastChannelMap getMultiCastChannelMapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MultiCastChannelMap obj = null;
            obj = new MultiCastChannelMap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MULTICASTCHANNELMAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForMultiCastChannelMapId(String id) throws RestException {
        MultiCastChannelMap obj = getObject(Constants.MULTICASTCHANNELMAP, id);
        if (obj == null) {
            obj = getMultiCastChannelMapById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMultiCastChannelMapId(String id) throws RestException {
        MultiCastChannelMap obj = getObject(Constants.MULTICASTCHANNELMAP, id);
        if (obj == null) {
            obj = getMultiCastChannelMapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMultiCastChannelMapId(String id) throws RestException {
        MultiCastChannelMap obj = getObject(Constants.MULTICASTCHANNELMAP, id);
        if (obj == null) {
            obj = getMultiCastChannelMapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastRangesFetcher getMultiCastRangesFetcherForMultiCastChannelMapId(String id) throws RestException {
        MultiCastChannelMap obj = getObject(Constants.MULTICASTCHANNELMAP, id);
        if (obj == null) {
            obj = getMultiCastChannelMapById(id);
        }

        if (obj != null) {
            MultiCastRangesFetcher fetcher = obj.getMultiCastRanges();
            return addFetcher(Constants.MULTICASTRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMultiCastChannelMapId(String id) throws RestException {
        MultiCastChannelMap obj = getObject(Constants.MULTICASTCHANNELMAP, id);
        if (obj == null) {
            obj = getMultiCastChannelMapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MultiCastChannelMap> getMultiCastChannelMapsForFetcherId(String id) throws RestException {
        MultiCastChannelMapsFetcher fetcher = getMultiCastChannelMapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MULTICASTCHANNELMAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MultiCastChannelMap>();
    }

    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, id);
        if (fetcher != null) {
            return (MultiCastChannelMapsFetcher) fetcher;
        }
        if ((fetcher = getMultiCastChannelMapsFetcherForContainerInterfaceId(id)) != null) {
            return (MultiCastChannelMapsFetcher) addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMultiCastChannelMapsFetcherForHostInterfaceId(id)) != null) {
            return (MultiCastChannelMapsFetcher) addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMultiCastChannelMapsFetcherForMeId(id)) != null) {
            return (MultiCastChannelMapsFetcher) addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMultiCastChannelMapsFetcherForMultiCastListId(id)) != null) {
            return (MultiCastChannelMapsFetcher) addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMultiCastChannelMapsFetcherForVMInterfaceId(id)) != null) {
            return (MultiCastChannelMapsFetcher) addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MultiCastChannelMap> getAllMultiCastChannelMaps() throws RestException {
        java.util.List<MultiCastChannelMap> allObjs = new ArrayList<MultiCastChannelMap>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            MultiCastChannelMapsFetcher fetcher = getMultiCastChannelMapsFetcherForMeId(session.getId());
            java.util.List<MultiCastChannelMap> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<MultiCastChannelMapsFetcher> getAllMultiCastChannelMapsFetchers() throws RestException {
        java.util.List<MultiCastChannelMapsFetcher> allObjs = new ArrayList<MultiCastChannelMapsFetcher>();
        return allObjs;
    }
    public static MultiCastList getMultiCastListById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MultiCastList obj = null;
            obj = new MultiCastList();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MULTICASTLIST, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMultiCastListId(String id) throws RestException {
        MultiCastList obj = getObject(Constants.MULTICASTLIST, id);
        if (obj == null) {
            obj = getMultiCastListById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMultiCastListId(String id) throws RestException {
        MultiCastList obj = getObject(Constants.MULTICASTLIST, id);
        if (obj == null) {
            obj = getMultiCastListById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherForMultiCastListId(String id) throws RestException {
        MultiCastList obj = getObject(Constants.MULTICASTLIST, id);
        if (obj == null) {
            obj = getMultiCastListById(id);
        }

        if (obj != null) {
            MultiCastChannelMapsFetcher fetcher = obj.getMultiCastChannelMaps();
            return addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMultiCastListId(String id) throws RestException {
        MultiCastList obj = getObject(Constants.MULTICASTLIST, id);
        if (obj == null) {
            obj = getMultiCastListById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MultiCastList> getMultiCastListsForFetcherId(String id) throws RestException {
        MultiCastListsFetcher fetcher = getMultiCastListsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MULTICASTLIST);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MultiCastList>();
    }

    public static MultiCastListsFetcher getMultiCastListsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MULTICASTLISTS_FETCHER, id);
        if (fetcher != null) {
            return (MultiCastListsFetcher) fetcher;
        }
        if ((fetcher = getMultiCastListsFetcherForEnterpriseId(id)) != null) {
            return (MultiCastListsFetcher) addFetcher(Constants.MULTICASTLISTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getMultiCastListsFetcherForEnterpriseProfileId(id)) != null) {
            return (MultiCastListsFetcher) addFetcher(Constants.MULTICASTLISTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MultiCastList> getAllMultiCastLists() throws RestException {
        java.util.List<MultiCastList> allObjs = new ArrayList<MultiCastList>();

        return allObjs;
    }

    public static java.util.List<MultiCastListsFetcher> getAllMultiCastListsFetchers() throws RestException {
        java.util.List<MultiCastListsFetcher> allObjs = new ArrayList<MultiCastListsFetcher>();
        return allObjs;
    }
    public static MultiCastRange getMultiCastRangeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MultiCastRange obj = null;
            obj = new MultiCastRange();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MULTICASTRANGE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForMultiCastRangeId(String id) throws RestException {
        MultiCastRange obj = getObject(Constants.MULTICASTRANGE, id);
        if (obj == null) {
            obj = getMultiCastRangeById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMultiCastRangeId(String id) throws RestException {
        MultiCastRange obj = getObject(Constants.MULTICASTRANGE, id);
        if (obj == null) {
            obj = getMultiCastRangeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMultiCastRangeId(String id) throws RestException {
        MultiCastRange obj = getObject(Constants.MULTICASTRANGE, id);
        if (obj == null) {
            obj = getMultiCastRangeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMultiCastRangeId(String id) throws RestException {
        MultiCastRange obj = getObject(Constants.MULTICASTRANGE, id);
        if (obj == null) {
            obj = getMultiCastRangeById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MultiCastRange> getMultiCastRangesForFetcherId(String id) throws RestException {
        MultiCastRangesFetcher fetcher = getMultiCastRangesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MULTICASTRANGE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MultiCastRange>();
    }

    public static MultiCastRangesFetcher getMultiCastRangesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MULTICASTRANGES_FETCHER, id);
        if (fetcher != null) {
            return (MultiCastRangesFetcher) fetcher;
        }
        if ((fetcher = getMultiCastRangesFetcherForMultiCastChannelMapId(id)) != null) {
            return (MultiCastRangesFetcher) addFetcher(Constants.MULTICASTRANGES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MultiCastRange> getAllMultiCastRanges() throws RestException {
        java.util.List<MultiCastRange> allObjs = new ArrayList<MultiCastRange>();

        return allObjs;
    }

    public static java.util.List<MultiCastRangesFetcher> getAllMultiCastRangesFetchers() throws RestException {
        java.util.List<MultiCastRangesFetcher> allObjs = new ArrayList<MultiCastRangesFetcher>();
        return allObjs;
    }
    public static MultiNICVPort getMultiNICVPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            MultiNICVPort obj = null;
            obj = new MultiNICVPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.MULTINICVPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForMultiNICVPortId(String id) throws RestException {
        MultiNICVPort obj = getObject(Constants.MULTINICVPORT, id);
        if (obj == null) {
            obj = getMultiNICVPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForMultiNICVPortId(String id) throws RestException {
        MultiNICVPort obj = getObject(Constants.MULTINICVPORT, id);
        if (obj == null) {
            obj = getMultiNICVPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForMultiNICVPortId(String id) throws RestException {
        MultiNICVPort obj = getObject(Constants.MULTINICVPORT, id);
        if (obj == null) {
            obj = getMultiNICVPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForMultiNICVPortId(String id) throws RestException {
        MultiNICVPort obj = getObject(Constants.MULTINICVPORT, id);
        if (obj == null) {
            obj = getMultiNICVPortById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<MultiNICVPort> getMultiNICVPortsForFetcherId(String id) throws RestException {
        MultiNICVPortsFetcher fetcher = getMultiNICVPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.MULTINICVPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<MultiNICVPort>();
    }

    public static MultiNICVPortsFetcher getMultiNICVPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.MULTINICVPORTS_FETCHER, id);
        if (fetcher != null) {
            return (MultiNICVPortsFetcher) fetcher;
        }
        if ((fetcher = getMultiNICVPortsFetcherForVRSId(id)) != null) {
            return (MultiNICVPortsFetcher) addFetcher(Constants.MULTINICVPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<MultiNICVPort> getAllMultiNICVPorts() throws RestException {
        java.util.List<MultiNICVPort> allObjs = new ArrayList<MultiNICVPort>();

        return allObjs;
    }

    public static java.util.List<MultiNICVPortsFetcher> getAllMultiNICVPortsFetchers() throws RestException {
        java.util.List<MultiNICVPortsFetcher> allObjs = new ArrayList<MultiNICVPortsFetcher>();
        return allObjs;
    }
    public static NATMapEntry getNATMapEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NATMapEntry obj = null;
            obj = new NATMapEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NATMAPENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNATMapEntryId(String id) throws RestException {
        NATMapEntry obj = getObject(Constants.NATMAPENTRY, id);
        if (obj == null) {
            obj = getNATMapEntryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNATMapEntryId(String id) throws RestException {
        NATMapEntry obj = getObject(Constants.NATMAPENTRY, id);
        if (obj == null) {
            obj = getNATMapEntryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNATMapEntryId(String id) throws RestException {
        NATMapEntry obj = getObject(Constants.NATMAPENTRY, id);
        if (obj == null) {
            obj = getNATMapEntryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NATMapEntry> getNATMapEntriesForFetcherId(String id) throws RestException {
        NATMapEntriesFetcher fetcher = getNATMapEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NATMAPENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NATMapEntry>();
    }

    public static NATMapEntriesFetcher getNATMapEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NATMAPENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (NATMapEntriesFetcher) fetcher;
        }
        if ((fetcher = getNATMapEntriesFetcherForPATNATPoolId(id)) != null) {
            return (NATMapEntriesFetcher) addFetcher(Constants.NATMAPENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NATMapEntry> getAllNATMapEntries() throws RestException {
        java.util.List<NATMapEntry> allObjs = new ArrayList<NATMapEntry>();

        return allObjs;
    }

    public static java.util.List<NATMapEntriesFetcher> getAllNATMapEntriesFetchers() throws RestException {
        java.util.List<NATMapEntriesFetcher> allObjs = new ArrayList<NATMapEntriesFetcher>();
        return allObjs;
    }
    public static NetconfGateway getNetconfGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetconfGateway obj = null;
            obj = new NetconfGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETCONFGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapsFetcher getBootstrapsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            BootstrapsFetcher fetcher = obj.getBootstraps();
            return addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapActivationsFetcher getBootstrapActivationsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            BootstrapActivationsFetcher fetcher = obj.getBootstrapActivations();
            return addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DomainsFetcher getDomainsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            DomainsFetcher fetcher = obj.getDomains();
            return addFetcher(Constants.DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressProfilesFetcher getEgressProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            EgressProfilesFetcher fetcher = obj.getEgressProfiles();
            return addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaySecuritiesFetcher getGatewaySecuritiesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            GatewaySecuritiesFetcher fetcher = obj.getGatewaySecurities();
            return addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureConfigsFetcher getInfrastructureConfigsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            InfrastructureConfigsFetcher fetcher = obj.getInfrastructureConfigs();
            return addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressProfilesFetcher getIngressProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            IngressProfilesFetcher fetcher = obj.getIngressProfiles();
            return addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            IPFilterProfilesFetcher fetcher = obj.getIPFilterProfiles();
            return addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            IPv6FilterProfilesFetcher fetcher = obj.getIPv6FilterProfiles();
            return addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LocationsFetcher getLocationsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            LocationsFetcher fetcher = obj.getLocations();
            return addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MACFilterProfilesFetcher getMACFilterProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            MACFilterProfilesFetcher fetcher = obj.getMACFilterProfiles();
            return addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortsFetcher getPortsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            PortsFetcher fetcher = obj.getPorts();
            return addFetcher(Constants.PORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            SAPEgressQoSProfilesFetcher fetcher = obj.getSAPEgressQoSProfiles();
            return addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            SAPIngressQoSProfilesFetcher fetcher = obj.getSAPIngressQoSProfiles();
            return addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WANServicesFetcher getWANServicesFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            WANServicesFetcher fetcher = obj.getWANServices();
            return addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForNetconfGatewayId(String id) throws RestException {
        NetconfGateway obj = getObject(Constants.NETCONFGATEWAY, id);
        if (obj == null) {
            obj = getNetconfGatewayById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetconfGateway> getNetconfGatewaysForFetcherId(String id) throws RestException {
        NetconfGatewaysFetcher fetcher = getNetconfGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETCONFGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetconfGateway>();
    }

    public static NetconfGatewaysFetcher getNetconfGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETCONFGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (NetconfGatewaysFetcher) fetcher;
        }
        if ((fetcher = getNetconfGatewaysFetcherForDomainId(id)) != null) {
            return (NetconfGatewaysFetcher) addFetcher(Constants.NETCONFGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetconfGateway> getAllNetconfGateways() throws RestException {
        java.util.List<NetconfGateway> allObjs = new ArrayList<NetconfGateway>();

        return allObjs;
    }

    public static java.util.List<NetconfGatewaysFetcher> getAllNetconfGatewaysFetchers() throws RestException {
        java.util.List<NetconfGatewaysFetcher> allObjs = new ArrayList<NetconfGatewaysFetcher>();
        return allObjs;
    }
    public static NetconfManager getNetconfManagerById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetconfManager obj = null;
            obj = new NetconfManager();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETCONFMANAGER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GNMISessionsFetcher getGNMISessionsFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            GNMISessionsFetcher fetcher = obj.getGNMISessions();
            return addFetcher(Constants.GNMISESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetconfSessionsFetcher getNetconfSessionsFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            NetconfSessionsFetcher fetcher = obj.getNetconfSessions();
            return addFetcher(Constants.NETCONFSESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetconfManagerId(String id) throws RestException {
        NetconfManager obj = getObject(Constants.NETCONFMANAGER, id);
        if (obj == null) {
            obj = getNetconfManagerById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetconfManager> getNetconfManagersForFetcherId(String id) throws RestException {
        NetconfManagersFetcher fetcher = getNetconfManagersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETCONFMANAGER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetconfManager>();
    }

    public static NetconfManagersFetcher getNetconfManagersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETCONFMANAGERS_FETCHER, id);
        if (fetcher != null) {
            return (NetconfManagersFetcher) fetcher;
        }
        if ((fetcher = getNetconfManagersFetcherForVSPId(id)) != null) {
            return (NetconfManagersFetcher) addFetcher(Constants.NETCONFMANAGERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetconfManager> getAllNetconfManagers() throws RestException {
        java.util.List<NetconfManager> allObjs = new ArrayList<NetconfManager>();

        return allObjs;
    }

    public static java.util.List<NetconfManagersFetcher> getAllNetconfManagersFetchers() throws RestException {
        java.util.List<NetconfManagersFetcher> allObjs = new ArrayList<NetconfManagersFetcher>();
        return allObjs;
    }
    public static NetconfProfile getNetconfProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetconfProfile obj = null;
            obj = new NetconfProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETCONFPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetconfProfileId(String id) throws RestException {
        NetconfProfile obj = getObject(Constants.NETCONFPROFILE, id);
        if (obj == null) {
            obj = getNetconfProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetconfProfileId(String id) throws RestException {
        NetconfProfile obj = getObject(Constants.NETCONFPROFILE, id);
        if (obj == null) {
            obj = getNetconfProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetconfProfileId(String id) throws RestException {
        NetconfProfile obj = getObject(Constants.NETCONFPROFILE, id);
        if (obj == null) {
            obj = getNetconfProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetconfProfile> getNetconfProfilesForFetcherId(String id) throws RestException {
        NetconfProfilesFetcher fetcher = getNetconfProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETCONFPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetconfProfile>();
    }

    public static NetconfProfilesFetcher getNetconfProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETCONFPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (NetconfProfilesFetcher) fetcher;
        }
        if ((fetcher = getNetconfProfilesFetcherForEnterpriseId(id)) != null) {
            return (NetconfProfilesFetcher) addFetcher(Constants.NETCONFPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetconfProfilesFetcherForMeId(id)) != null) {
            return (NetconfProfilesFetcher) addFetcher(Constants.NETCONFPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetconfProfile> getAllNetconfProfiles() throws RestException {
        java.util.List<NetconfProfile> allObjs = new ArrayList<NetconfProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetconfProfilesFetcher fetcher = getNetconfProfilesFetcherForMeId(session.getId());
            java.util.List<NetconfProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NetconfProfilesFetcher> getAllNetconfProfilesFetchers() throws RestException {
        java.util.List<NetconfProfilesFetcher> allObjs = new ArrayList<NetconfProfilesFetcher>();
        return allObjs;
    }
    public static NetconfSession getNetconfSessionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetconfSession obj = null;
            obj = new NetconfSession();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETCONFSESSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetconfSessionId(String id) throws RestException {
        NetconfSession obj = getObject(Constants.NETCONFSESSION, id);
        if (obj == null) {
            obj = getNetconfSessionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetconfSessionId(String id) throws RestException {
        NetconfSession obj = getObject(Constants.NETCONFSESSION, id);
        if (obj == null) {
            obj = getNetconfSessionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetconfSessionId(String id) throws RestException {
        NetconfSession obj = getObject(Constants.NETCONFSESSION, id);
        if (obj == null) {
            obj = getNetconfSessionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetconfSession> getNetconfSessionsForFetcherId(String id) throws RestException {
        NetconfSessionsFetcher fetcher = getNetconfSessionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETCONFSESSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetconfSession>();
    }

    public static NetconfSessionsFetcher getNetconfSessionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETCONFSESSIONS_FETCHER, id);
        if (fetcher != null) {
            return (NetconfSessionsFetcher) fetcher;
        }
        if ((fetcher = getNetconfSessionsFetcherForNetconfManagerId(id)) != null) {
            return (NetconfSessionsFetcher) addFetcher(Constants.NETCONFSESSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetconfSession> getAllNetconfSessions() throws RestException {
        java.util.List<NetconfSession> allObjs = new ArrayList<NetconfSession>();

        return allObjs;
    }

    public static java.util.List<NetconfSessionsFetcher> getAllNetconfSessionsFetchers() throws RestException {
        java.util.List<NetconfSessionsFetcher> allObjs = new ArrayList<NetconfSessionsFetcher>();
        return allObjs;
    }
    public static NetworkLayout getNetworkLayoutById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkLayout obj = null;
            obj = new NetworkLayout();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETWORKLAYOUT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetworkLayoutId(String id) throws RestException {
        NetworkLayout obj = getObject(Constants.NETWORKLAYOUT, id);
        if (obj == null) {
            obj = getNetworkLayoutById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetworkLayoutId(String id) throws RestException {
        NetworkLayout obj = getObject(Constants.NETWORKLAYOUT, id);
        if (obj == null) {
            obj = getNetworkLayoutById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetworkLayoutId(String id) throws RestException {
        NetworkLayout obj = getObject(Constants.NETWORKLAYOUT, id);
        if (obj == null) {
            obj = getNetworkLayoutById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetworkLayout> getNetworkLayoutsForFetcherId(String id) throws RestException {
        NetworkLayoutsFetcher fetcher = getNetworkLayoutsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETWORKLAYOUT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetworkLayout>();
    }

    public static NetworkLayoutsFetcher getNetworkLayoutsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETWORKLAYOUTS_FETCHER, id);
        if (fetcher != null) {
            return (NetworkLayoutsFetcher) fetcher;
        }
        if ((fetcher = getNetworkLayoutsFetcherForMeId(id)) != null) {
            return (NetworkLayoutsFetcher) addFetcher(Constants.NETWORKLAYOUTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetworkLayout> getAllNetworkLayouts() throws RestException {
        java.util.List<NetworkLayout> allObjs = new ArrayList<NetworkLayout>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkLayoutsFetcher fetcher = getNetworkLayoutsFetcherForMeId(session.getId());
            java.util.List<NetworkLayout> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NetworkLayoutsFetcher> getAllNetworkLayoutsFetchers() throws RestException {
        java.util.List<NetworkLayoutsFetcher> allObjs = new ArrayList<NetworkLayoutsFetcher>();
        return allObjs;
    }
    public static NetworkMacroGroup getNetworkMacroGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkMacroGroup obj = null;
            obj = new NetworkMacroGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETWORKMACROGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EnterpriseNetworksFetcher getEnterpriseNetworksFetcherForNetworkMacroGroupId(String id) throws RestException {
        NetworkMacroGroup obj = getObject(Constants.NETWORKMACROGROUP, id);
        if (obj == null) {
            obj = getNetworkMacroGroupById(id);
        }

        if (obj != null) {
            EnterpriseNetworksFetcher fetcher = obj.getEnterpriseNetworks();
            return addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetworkMacroGroupId(String id) throws RestException {
        NetworkMacroGroup obj = getObject(Constants.NETWORKMACROGROUP, id);
        if (obj == null) {
            obj = getNetworkMacroGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetworkMacroGroupId(String id) throws RestException {
        NetworkMacroGroup obj = getObject(Constants.NETWORKMACROGROUP, id);
        if (obj == null) {
            obj = getNetworkMacroGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetworkMacroGroupId(String id) throws RestException {
        NetworkMacroGroup obj = getObject(Constants.NETWORKMACROGROUP, id);
        if (obj == null) {
            obj = getNetworkMacroGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetworkMacroGroup> getNetworkMacroGroupsForFetcherId(String id) throws RestException {
        NetworkMacroGroupsFetcher fetcher = getNetworkMacroGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETWORKMACROGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetworkMacroGroup>();
    }

    public static NetworkMacroGroupsFetcher getNetworkMacroGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETWORKMACROGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (NetworkMacroGroupsFetcher) fetcher;
        }
        if ((fetcher = getNetworkMacroGroupsFetcherForDomainId(id)) != null) {
            return (NetworkMacroGroupsFetcher) addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkMacroGroupsFetcherForEnterpriseId(id)) != null) {
            return (NetworkMacroGroupsFetcher) addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkMacroGroupsFetcherForEnterpriseNetworkId(id)) != null) {
            return (NetworkMacroGroupsFetcher) addFetcher(Constants.NETWORKMACROGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetworkMacroGroup> getAllNetworkMacroGroups() throws RestException {
        java.util.List<NetworkMacroGroup> allObjs = new ArrayList<NetworkMacroGroup>();

        return allObjs;
    }

    public static java.util.List<NetworkMacroGroupsFetcher> getAllNetworkMacroGroupsFetchers() throws RestException {
        java.util.List<NetworkMacroGroupsFetcher> allObjs = new ArrayList<NetworkMacroGroupsFetcher>();
        return allObjs;
    }
    public static NetworkPerformanceBinding getNetworkPerformanceBindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkPerformanceBinding obj = null;
            obj = new NetworkPerformanceBinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETWORKPERFORMANCEBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetworkPerformanceBindingId(String id) throws RestException {
        NetworkPerformanceBinding obj = getObject(Constants.NETWORKPERFORMANCEBINDING, id);
        if (obj == null) {
            obj = getNetworkPerformanceBindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetworkPerformanceBindingId(String id) throws RestException {
        NetworkPerformanceBinding obj = getObject(Constants.NETWORKPERFORMANCEBINDING, id);
        if (obj == null) {
            obj = getNetworkPerformanceBindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetworkPerformanceBindingId(String id) throws RestException {
        NetworkPerformanceBinding obj = getObject(Constants.NETWORKPERFORMANCEBINDING, id);
        if (obj == null) {
            obj = getNetworkPerformanceBindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetworkPerformanceBinding> getNetworkPerformanceBindingsForFetcherId(String id) throws RestException {
        NetworkPerformanceBindingsFetcher fetcher = getNetworkPerformanceBindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETWORKPERFORMANCEBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetworkPerformanceBinding>();
    }

    public static NetworkPerformanceBindingsFetcher getNetworkPerformanceBindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (NetworkPerformanceBindingsFetcher) fetcher;
        }
        if ((fetcher = getNetworkPerformanceBindingsFetcherForAggregatedDomainId(id)) != null) {
            return (NetworkPerformanceBindingsFetcher) addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkPerformanceBindingsFetcherForDomainId(id)) != null) {
            return (NetworkPerformanceBindingsFetcher) addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkPerformanceBindingsFetcherForL2DomainId(id)) != null) {
            return (NetworkPerformanceBindingsFetcher) addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkPerformanceBindingsFetcherForNetworkPerformanceMeasurementId(id)) != null) {
            return (NetworkPerformanceBindingsFetcher) addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetworkPerformanceBinding> getAllNetworkPerformanceBindings() throws RestException {
        java.util.List<NetworkPerformanceBinding> allObjs = new ArrayList<NetworkPerformanceBinding>();

        return allObjs;
    }

    public static java.util.List<NetworkPerformanceBindingsFetcher> getAllNetworkPerformanceBindingsFetchers() throws RestException {
        java.util.List<NetworkPerformanceBindingsFetcher> allObjs = new ArrayList<NetworkPerformanceBindingsFetcher>();
        return allObjs;
    }
    public static NetworkPerformanceMeasurement getNetworkPerformanceMeasurementById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkPerformanceMeasurement obj = null;
            obj = new NetworkPerformanceMeasurement();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NETWORKPERFORMANCEMEASUREMENT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNetworkPerformanceMeasurementId(String id) throws RestException {
        NetworkPerformanceMeasurement obj = getObject(Constants.NETWORKPERFORMANCEMEASUREMENT, id);
        if (obj == null) {
            obj = getNetworkPerformanceMeasurementById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNetworkPerformanceMeasurementId(String id) throws RestException {
        NetworkPerformanceMeasurement obj = getObject(Constants.NETWORKPERFORMANCEMEASUREMENT, id);
        if (obj == null) {
            obj = getNetworkPerformanceMeasurementById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MonitorscopesFetcher getMonitorscopesFetcherForNetworkPerformanceMeasurementId(String id) throws RestException {
        NetworkPerformanceMeasurement obj = getObject(Constants.NETWORKPERFORMANCEMEASUREMENT, id);
        if (obj == null) {
            obj = getNetworkPerformanceMeasurementById(id);
        }

        if (obj != null) {
            MonitorscopesFetcher fetcher = obj.getMonitorscopes();
            return addFetcher(Constants.MONITORSCOPES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetworkPerformanceBindingsFetcher getNetworkPerformanceBindingsFetcherForNetworkPerformanceMeasurementId(String id) throws RestException {
        NetworkPerformanceMeasurement obj = getObject(Constants.NETWORKPERFORMANCEMEASUREMENT, id);
        if (obj == null) {
            obj = getNetworkPerformanceMeasurementById(id);
        }

        if (obj != null) {
            NetworkPerformanceBindingsFetcher fetcher = obj.getNetworkPerformanceBindings();
            return addFetcher(Constants.NETWORKPERFORMANCEBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNetworkPerformanceMeasurementId(String id) throws RestException {
        NetworkPerformanceMeasurement obj = getObject(Constants.NETWORKPERFORMANCEMEASUREMENT, id);
        if (obj == null) {
            obj = getNetworkPerformanceMeasurementById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NetworkPerformanceMeasurement> getNetworkPerformanceMeasurementsForFetcherId(String id) throws RestException {
        NetworkPerformanceMeasurementsFetcher fetcher = getNetworkPerformanceMeasurementsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NETWORKPERFORMANCEMEASUREMENT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NetworkPerformanceMeasurement>();
    }

    public static NetworkPerformanceMeasurementsFetcher getNetworkPerformanceMeasurementsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NETWORKPERFORMANCEMEASUREMENTS_FETCHER, id);
        if (fetcher != null) {
            return (NetworkPerformanceMeasurementsFetcher) fetcher;
        }
        if ((fetcher = getNetworkPerformanceMeasurementsFetcherForEnterpriseId(id)) != null) {
            return (NetworkPerformanceMeasurementsFetcher) addFetcher(Constants.NETWORKPERFORMANCEMEASUREMENTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNetworkPerformanceMeasurementsFetcherForMeId(id)) != null) {
            return (NetworkPerformanceMeasurementsFetcher) addFetcher(Constants.NETWORKPERFORMANCEMEASUREMENTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NetworkPerformanceMeasurement> getAllNetworkPerformanceMeasurements() throws RestException {
        java.util.List<NetworkPerformanceMeasurement> allObjs = new ArrayList<NetworkPerformanceMeasurement>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NetworkPerformanceMeasurementsFetcher fetcher = getNetworkPerformanceMeasurementsFetcherForMeId(session.getId());
            java.util.List<NetworkPerformanceMeasurement> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NetworkPerformanceMeasurementsFetcher> getAllNetworkPerformanceMeasurementsFetchers() throws RestException {
        java.util.List<NetworkPerformanceMeasurementsFetcher> allObjs = new ArrayList<NetworkPerformanceMeasurementsFetcher>();
        return allObjs;
    }
    public static NextHop getNextHopById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NextHop obj = null;
            obj = new NextHop();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NEXTHOP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNextHopId(String id) throws RestException {
        NextHop obj = getObject(Constants.NEXTHOP, id);
        if (obj == null) {
            obj = getNextHopById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNextHopId(String id) throws RestException {
        NextHop obj = getObject(Constants.NEXTHOP, id);
        if (obj == null) {
            obj = getNextHopById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNextHopId(String id) throws RestException {
        NextHop obj = getObject(Constants.NEXTHOP, id);
        if (obj == null) {
            obj = getNextHopById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NextHop> getNextHopsForFetcherId(String id) throws RestException {
        NextHopsFetcher fetcher = getNextHopsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NEXTHOP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NextHop>();
    }

    public static NextHopsFetcher getNextHopsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NEXTHOPS_FETCHER, id);
        if (fetcher != null) {
            return (NextHopsFetcher) fetcher;
        }
        if ((fetcher = getNextHopsFetcherForLinkId(id)) != null) {
            return (NextHopsFetcher) addFetcher(Constants.NEXTHOPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NextHop> getAllNextHops() throws RestException {
        java.util.List<NextHop> allObjs = new ArrayList<NextHop>();

        return allObjs;
    }

    public static java.util.List<NextHopsFetcher> getAllNextHopsFetchers() throws RestException {
        java.util.List<NextHopsFetcher> allObjs = new ArrayList<NextHopsFetcher>();
        return allObjs;
    }
    public static NSGateway getNSGatewayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGateway obj = null;
            obj = new NSGateway();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGATEWAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapsFetcher getBootstrapsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            BootstrapsFetcher fetcher = obj.getBootstraps();
            return addFetcher(Constants.BOOTSTRAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BootstrapActivationsFetcher getBootstrapActivationsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            BootstrapActivationsFetcher fetcher = obj.getBootstrapActivations();
            return addFetcher(Constants.BOOTSTRAPACTIVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CommandsFetcher getCommandsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            CommandsFetcher fetcher = obj.getCommands();
            return addFetcher(Constants.COMMANDS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaySecuritiesFetcher getGatewaySecuritiesFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            GatewaySecuritiesFetcher fetcher = obj.getGatewaySecurities();
            return addFetcher(Constants.GATEWAYSECURITIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static InfrastructureConfigsFetcher getInfrastructureConfigsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            InfrastructureConfigsFetcher fetcher = obj.getInfrastructureConfigs();
            return addFetcher(Constants.INFRASTRUCTURECONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LocationsFetcher getLocationsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            LocationsFetcher fetcher = obj.getLocations();
            return addFetcher(Constants.LOCATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewayMonitorsFetcher getNSGatewayMonitorsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            NSGatewayMonitorsFetcher fetcher = obj.getNSGatewayMonitors();
            return addFetcher(Constants.NSGATEWAYMONITORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            NSGatewaySummariesFetcher fetcher = obj.getNSGatewaySummaries();
            return addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGInfosFetcher getNSGInfosFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            NSGInfosFetcher fetcher = obj.getNSGInfos();
            return addFetcher(Constants.NSGINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSPortsFetcher getNSPortsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            NSPortsFetcher fetcher = obj.getNSPorts();
            return addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PatchsFetcher getPatchsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            PatchsFetcher fetcher = obj.getPatchs();
            return addFetcher(Constants.PATCHS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSPortInfosFetcher getNSPortInfosFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            NSPortInfosFetcher fetcher = obj.getNSPortInfos();
            return addFetcher(Constants.NSPORTINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SupplementalInfraConfigsFetcher getSupplementalInfraConfigsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            SupplementalInfraConfigsFetcher fetcher = obj.getSupplementalInfraConfigs();
            return addFetcher(Constants.SUPPLEMENTALINFRACONFIGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ThreatPreventionInfosFetcher getThreatPreventionInfosFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            ThreatPreventionInfosFetcher fetcher = obj.getThreatPreventionInfos();
            return addFetcher(Constants.THREATPREVENTIONINFOS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UnderlayTestsFetcher getUnderlayTestsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            UnderlayTestsFetcher fetcher = obj.getUnderlayTests();
            return addFetcher(Constants.UNDERLAYTESTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkConnectionsFetcher getUplinkConnectionsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            UplinkConnectionsFetcher fetcher = obj.getUplinkConnections();
            return addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualUplinksFetcher getVirtualUplinksFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            VirtualUplinksFetcher fetcher = obj.getVirtualUplinks();
            return addFetcher(Constants.VIRTUALUPLINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFsFetcher getVNFsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            VNFsFetcher fetcher = obj.getVNFs();
            return addFetcher(Constants.VNFS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WirelessPortsFetcher getWirelessPortsFetcherForNSGatewayId(String id) throws RestException {
        NSGateway obj = getObject(Constants.NSGATEWAY, id);
        if (obj == null) {
            obj = getNSGatewayById(id);
        }

        if (obj != null) {
            WirelessPortsFetcher fetcher = obj.getWirelessPorts();
            return addFetcher(Constants.WIRELESSPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGateway> getNSGatewaysForFetcherId(String id) throws RestException {
        NSGatewaysFetcher fetcher = getNSGatewaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGATEWAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGateway>();
    }

    public static NSGatewaysFetcher getNSGatewaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGATEWAYS_FETCHER, id);
        if (fetcher != null) {
            return (NSGatewaysFetcher) fetcher;
        }
        if ((fetcher = getNSGatewaysFetcherForDUCGroupId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaysFetcherForEnterpriseId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaysFetcherForMeId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaysFetcherForNSGGroupId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaysFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaysFetcherForPolicyObjectGroupId(id)) != null) {
            return (NSGatewaysFetcher) addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGateway> getAllNSGateways() throws RestException {
        java.util.List<NSGateway> allObjs = new ArrayList<NSGateway>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewaysFetcher fetcher = getNSGatewaysFetcherForMeId(session.getId());
            java.util.List<NSGateway> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGatewaysFetcher> getAllNSGatewaysFetchers() throws RestException {
        java.util.List<NSGatewaysFetcher> allObjs = new ArrayList<NSGatewaysFetcher>();
        return allObjs;
    }
    public static NSGatewaysCount getNSGatewaysCountById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewaysCount obj = null;
            obj = new NSGatewaysCount();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGATEWAYSCOUNT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGatewaysCountId(String id) throws RestException {
        NSGatewaysCount obj = getObject(Constants.NSGATEWAYSCOUNT, id);
        if (obj == null) {
            obj = getNSGatewaysCountById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGatewaysCountId(String id) throws RestException {
        NSGatewaysCount obj = getObject(Constants.NSGATEWAYSCOUNT, id);
        if (obj == null) {
            obj = getNSGatewaysCountById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGatewaysCountId(String id) throws RestException {
        NSGatewaysCount obj = getObject(Constants.NSGATEWAYSCOUNT, id);
        if (obj == null) {
            obj = getNSGatewaysCountById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGatewaysCount> getNSGatewaysCountsForFetcherId(String id) throws RestException {
        NSGatewaysCountsFetcher fetcher = getNSGatewaysCountsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGATEWAYSCOUNT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGatewaysCount>();
    }

    public static NSGatewaysCountsFetcher getNSGatewaysCountsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGATEWAYSCOUNTS_FETCHER, id);
        if (fetcher != null) {
            return (NSGatewaysCountsFetcher) fetcher;
        }
        if ((fetcher = getNSGatewaysCountsFetcherForEnterpriseId(id)) != null) {
            return (NSGatewaysCountsFetcher) addFetcher(Constants.NSGATEWAYSCOUNTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGatewaysCount> getAllNSGatewaysCounts() throws RestException {
        java.util.List<NSGatewaysCount> allObjs = new ArrayList<NSGatewaysCount>();

        return allObjs;
    }

    public static java.util.List<NSGatewaysCountsFetcher> getAllNSGatewaysCountsFetchers() throws RestException {
        java.util.List<NSGatewaysCountsFetcher> allObjs = new ArrayList<NSGatewaysCountsFetcher>();
        return allObjs;
    }
    public static NSGatewayMonitor getNSGatewayMonitorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewayMonitor obj = null;
            obj = new NSGatewayMonitor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGATEWAYMONITOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<NSGatewayMonitor> getNSGatewayMonitorsForFetcherId(String id) throws RestException {
        NSGatewayMonitorsFetcher fetcher = getNSGatewayMonitorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGATEWAYMONITOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGatewayMonitor>();
    }

    public static NSGatewayMonitorsFetcher getNSGatewayMonitorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGATEWAYMONITORS_FETCHER, id);
        if (fetcher != null) {
            return (NSGatewayMonitorsFetcher) fetcher;
        }
        if ((fetcher = getNSGatewayMonitorsFetcherForNSGatewayId(id)) != null) {
            return (NSGatewayMonitorsFetcher) addFetcher(Constants.NSGATEWAYMONITORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGatewayMonitor> getAllNSGatewayMonitors() throws RestException {
        java.util.List<NSGatewayMonitor> allObjs = new ArrayList<NSGatewayMonitor>();

        return allObjs;
    }

    public static java.util.List<NSGatewayMonitorsFetcher> getAllNSGatewayMonitorsFetchers() throws RestException {
        java.util.List<NSGatewayMonitorsFetcher> allObjs = new ArrayList<NSGatewayMonitorsFetcher>();
        return allObjs;
    }
    public static NSGatewaySummary getNSGatewaySummaryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewaySummary obj = null;
            obj = new NSGatewaySummary();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGATEWAYSUMMARY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGatewaySummaryId(String id) throws RestException {
        NSGatewaySummary obj = getObject(Constants.NSGATEWAYSUMMARY, id);
        if (obj == null) {
            obj = getNSGatewaySummaryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGatewaySummaryId(String id) throws RestException {
        NSGatewaySummary obj = getObject(Constants.NSGATEWAYSUMMARY, id);
        if (obj == null) {
            obj = getNSGatewaySummaryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGatewaySummaryId(String id) throws RestException {
        NSGatewaySummary obj = getObject(Constants.NSGATEWAYSUMMARY, id);
        if (obj == null) {
            obj = getNSGatewaySummaryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGatewaySummary> getNSGatewaySummariesForFetcherId(String id) throws RestException {
        NSGatewaySummariesFetcher fetcher = getNSGatewaySummariesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGATEWAYSUMMARY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGatewaySummary>();
    }

    public static NSGatewaySummariesFetcher getNSGatewaySummariesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, id);
        if (fetcher != null) {
            return (NSGatewaySummariesFetcher) fetcher;
        }
        if ((fetcher = getNSGatewaySummariesFetcherForAggregatedDomainId(id)) != null) {
            return (NSGatewaySummariesFetcher) addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaySummariesFetcherForDomainId(id)) != null) {
            return (NSGatewaySummariesFetcher) addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaySummariesFetcherForEnterpriseId(id)) != null) {
            return (NSGatewaySummariesFetcher) addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaySummariesFetcherForL2DomainId(id)) != null) {
            return (NSGatewaySummariesFetcher) addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewaySummariesFetcherForNSGatewayId(id)) != null) {
            return (NSGatewaySummariesFetcher) addFetcher(Constants.NSGATEWAYSUMMARIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGatewaySummary> getAllNSGatewaySummaries() throws RestException {
        java.util.List<NSGatewaySummary> allObjs = new ArrayList<NSGatewaySummary>();

        return allObjs;
    }

    public static java.util.List<NSGatewaySummariesFetcher> getAllNSGatewaySummariesFetchers() throws RestException {
        java.util.List<NSGatewaySummariesFetcher> allObjs = new ArrayList<NSGatewaySummariesFetcher>();
        return allObjs;
    }
    public static NSGatewayTemplate getNSGatewayTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewayTemplate obj = null;
            obj = new NSGatewayTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGATEWAYTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGatewayTemplateId(String id) throws RestException {
        NSGatewayTemplate obj = getObject(Constants.NSGATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getNSGatewayTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGatewayTemplateId(String id) throws RestException {
        NSGatewayTemplate obj = getObject(Constants.NSGATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getNSGatewayTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSPortTemplatesFetcher getNSPortTemplatesFetcherForNSGatewayTemplateId(String id) throws RestException {
        NSGatewayTemplate obj = getObject(Constants.NSGATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getNSGatewayTemplateById(id);
        }

        if (obj != null) {
            NSPortTemplatesFetcher fetcher = obj.getNSPortTemplates();
            return addFetcher(Constants.NSPORTTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGatewayTemplateId(String id) throws RestException {
        NSGatewayTemplate obj = getObject(Constants.NSGATEWAYTEMPLATE, id);
        if (obj == null) {
            obj = getNSGatewayTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGatewayTemplate> getNSGatewayTemplatesForFetcherId(String id) throws RestException {
        NSGatewayTemplatesFetcher fetcher = getNSGatewayTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGATEWAYTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGatewayTemplate>();
    }

    public static NSGatewayTemplatesFetcher getNSGatewayTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (NSGatewayTemplatesFetcher) fetcher;
        }
        if ((fetcher = getNSGatewayTemplatesFetcherForEnterpriseId(id)) != null) {
            return (NSGatewayTemplatesFetcher) addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewayTemplatesFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (NSGatewayTemplatesFetcher) addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGatewayTemplatesFetcherForMeId(id)) != null) {
            return (NSGatewayTemplatesFetcher) addFetcher(Constants.NSGATEWAYTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGatewayTemplate> getAllNSGatewayTemplates() throws RestException {
        java.util.List<NSGatewayTemplate> allObjs = new ArrayList<NSGatewayTemplate>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGatewayTemplatesFetcher fetcher = getNSGatewayTemplatesFetcherForMeId(session.getId());
            java.util.List<NSGatewayTemplate> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGatewayTemplatesFetcher> getAllNSGatewayTemplatesFetchers() throws RestException {
        java.util.List<NSGatewayTemplatesFetcher> allObjs = new ArrayList<NSGatewayTemplatesFetcher>();
        return allObjs;
    }
    public static NSGGroup getNSGGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGGroup obj = null;
            obj = new NSGGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DUCGroupBindingsFetcher getDUCGroupBindingsFetcherForNSGGroupId(String id) throws RestException {
        NSGGroup obj = getObject(Constants.NSGGROUP, id);
        if (obj == null) {
            obj = getNSGGroupById(id);
        }

        if (obj != null) {
            DUCGroupBindingsFetcher fetcher = obj.getDUCGroupBindings();
            return addFetcher(Constants.DUCGROUPBINDINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGGroupId(String id) throws RestException {
        NSGGroup obj = getObject(Constants.NSGGROUP, id);
        if (obj == null) {
            obj = getNSGGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGGroupId(String id) throws RestException {
        NSGGroup obj = getObject(Constants.NSGGROUP, id);
        if (obj == null) {
            obj = getNSGGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForNSGGroupId(String id) throws RestException {
        NSGGroup obj = getObject(Constants.NSGGROUP, id);
        if (obj == null) {
            obj = getNSGGroupById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGGroupId(String id) throws RestException {
        NSGGroup obj = getObject(Constants.NSGGROUP, id);
        if (obj == null) {
            obj = getNSGGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGGroup> getNSGGroupsForFetcherId(String id) throws RestException {
        NSGGroupsFetcher fetcher = getNSGGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGGroup>();
    }

    public static NSGGroupsFetcher getNSGGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (NSGGroupsFetcher) fetcher;
        }
        if ((fetcher = getNSGGroupsFetcherForEnterpriseId(id)) != null) {
            return (NSGGroupsFetcher) addFetcher(Constants.NSGGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGGroupsFetcherForMeId(id)) != null) {
            return (NSGGroupsFetcher) addFetcher(Constants.NSGGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGGroup> getAllNSGGroups() throws RestException {
        java.util.List<NSGGroup> allObjs = new ArrayList<NSGGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGGroupsFetcher fetcher = getNSGGroupsFetcherForMeId(session.getId());
            java.util.List<NSGGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGGroupsFetcher> getAllNSGGroupsFetchers() throws RestException {
        java.util.List<NSGGroupsFetcher> allObjs = new ArrayList<NSGGroupsFetcher>();
        return allObjs;
    }
    public static NSGInfo getNSGInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGInfo obj = null;
            obj = new NSGInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<NSGInfo> getNSGInfosForFetcherId(String id) throws RestException {
        NSGInfosFetcher fetcher = getNSGInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGInfo>();
    }

    public static NSGInfosFetcher getNSGInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGINFOS_FETCHER, id);
        if (fetcher != null) {
            return (NSGInfosFetcher) fetcher;
        }
        if ((fetcher = getNSGInfosFetcherForMeId(id)) != null) {
            return (NSGInfosFetcher) addFetcher(Constants.NSGINFOS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGInfosFetcherForNSGatewayId(id)) != null) {
            return (NSGInfosFetcher) addFetcher(Constants.NSGINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGInfo> getAllNSGInfos() throws RestException {
        java.util.List<NSGInfo> allObjs = new ArrayList<NSGInfo>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGInfosFetcher fetcher = getNSGInfosFetcherForMeId(session.getId());
            java.util.List<NSGInfo> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGInfosFetcher> getAllNSGInfosFetchers() throws RestException {
        java.util.List<NSGInfosFetcher> allObjs = new ArrayList<NSGInfosFetcher>();
        return allObjs;
    }
    public static NSGMigrationProfile getNSGMigrationProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGMigrationProfile obj = null;
            obj = new NSGMigrationProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGMIGRATIONPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static PermissionsFetcher getPermissionsFetcherForNSGMigrationProfileId(String id) throws RestException {
        NSGMigrationProfile obj = getObject(Constants.NSGMIGRATIONPROFILE, id);
        if (obj == null) {
            obj = getNSGMigrationProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGMigrationProfile> getNSGMigrationProfilesForFetcherId(String id) throws RestException {
        NSGMigrationProfilesFetcher fetcher = getNSGMigrationProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGMIGRATIONPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGMigrationProfile>();
    }

    public static NSGMigrationProfilesFetcher getNSGMigrationProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGMIGRATIONPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (NSGMigrationProfilesFetcher) fetcher;
        }
        if ((fetcher = getNSGMigrationProfilesFetcherForMeId(id)) != null) {
            return (NSGMigrationProfilesFetcher) addFetcher(Constants.NSGMIGRATIONPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGMigrationProfile> getAllNSGMigrationProfiles() throws RestException {
        java.util.List<NSGMigrationProfile> allObjs = new ArrayList<NSGMigrationProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGMigrationProfilesFetcher fetcher = getNSGMigrationProfilesFetcherForMeId(session.getId());
            java.util.List<NSGMigrationProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGMigrationProfilesFetcher> getAllNSGMigrationProfilesFetchers() throws RestException {
        java.util.List<NSGMigrationProfilesFetcher> allObjs = new ArrayList<NSGMigrationProfilesFetcher>();
        return allObjs;
    }
    public static NSGPatchProfile getNSGPatchProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGPatchProfile obj = null;
            obj = new NSGPatchProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGPATCHPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<NSGPatchProfile> getNSGPatchProfilesForFetcherId(String id) throws RestException {
        NSGPatchProfilesFetcher fetcher = getNSGPatchProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGPATCHPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGPatchProfile>();
    }

    public static NSGPatchProfilesFetcher getNSGPatchProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGPATCHPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (NSGPatchProfilesFetcher) fetcher;
        }
        if ((fetcher = getNSGPatchProfilesFetcherForMeId(id)) != null) {
            return (NSGPatchProfilesFetcher) addFetcher(Constants.NSGPATCHPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGPatchProfile> getAllNSGPatchProfiles() throws RestException {
        java.util.List<NSGPatchProfile> allObjs = new ArrayList<NSGPatchProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGPatchProfilesFetcher fetcher = getNSGPatchProfilesFetcherForMeId(session.getId());
            java.util.List<NSGPatchProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGPatchProfilesFetcher> getAllNSGPatchProfilesFetchers() throws RestException {
        java.util.List<NSGPatchProfilesFetcher> allObjs = new ArrayList<NSGPatchProfilesFetcher>();
        return allObjs;
    }
    public static NSRedundantGatewayGroup getNSRedundantGatewayGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSRedundantGatewayGroup obj = null;
            obj = new NSRedundantGatewayGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSREDUNDANTGATEWAYGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedundantPortsFetcher getRedundantPortsFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            RedundantPortsFetcher fetcher = obj.getRedundantPorts();
            return addFetcher(Constants.REDUNDANTPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ShuntLinksFetcher getShuntLinksFetcherForNSRedundantGatewayGroupId(String id) throws RestException {
        NSRedundantGatewayGroup obj = getObject(Constants.NSREDUNDANTGATEWAYGROUP, id);
        if (obj == null) {
            obj = getNSRedundantGatewayGroupById(id);
        }

        if (obj != null) {
            ShuntLinksFetcher fetcher = obj.getShuntLinks();
            return addFetcher(Constants.SHUNTLINKS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSRedundantGatewayGroup> getNSRedundantGatewayGroupsForFetcherId(String id) throws RestException {
        NSRedundantGatewayGroupsFetcher fetcher = getNSRedundantGatewayGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSREDUNDANTGATEWAYGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSRedundantGatewayGroup>();
    }

    public static NSRedundantGatewayGroupsFetcher getNSRedundantGatewayGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSREDUNDANTGATEWAYGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (NSRedundantGatewayGroupsFetcher) fetcher;
        }
        if ((fetcher = getNSRedundantGatewayGroupsFetcherForEnterpriseId(id)) != null) {
            return (NSRedundantGatewayGroupsFetcher) addFetcher(Constants.NSREDUNDANTGATEWAYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSRedundantGatewayGroupsFetcherForMeId(id)) != null) {
            return (NSRedundantGatewayGroupsFetcher) addFetcher(Constants.NSREDUNDANTGATEWAYGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSRedundantGatewayGroup> getAllNSRedundantGatewayGroups() throws RestException {
        java.util.List<NSRedundantGatewayGroup> allObjs = new ArrayList<NSRedundantGatewayGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSRedundantGatewayGroupsFetcher fetcher = getNSRedundantGatewayGroupsFetcherForMeId(session.getId());
            java.util.List<NSRedundantGatewayGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSRedundantGatewayGroupsFetcher> getAllNSRedundantGatewayGroupsFetchers() throws RestException {
        java.util.List<NSRedundantGatewayGroupsFetcher> allObjs = new ArrayList<NSRedundantGatewayGroupsFetcher>();
        return allObjs;
    }
    public static NSGRoutingPolicyBinding getNSGRoutingPolicyBindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGRoutingPolicyBinding obj = null;
            obj = new NSGRoutingPolicyBinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGROUTINGPOLICYBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSGRoutingPolicyBindingId(String id) throws RestException {
        NSGRoutingPolicyBinding obj = getObject(Constants.NSGROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getNSGRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSGRoutingPolicyBindingId(String id) throws RestException {
        NSGRoutingPolicyBinding obj = getObject(Constants.NSGROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getNSGRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSGRoutingPolicyBindingId(String id) throws RestException {
        NSGRoutingPolicyBinding obj = getObject(Constants.NSGROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getNSGRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSGRoutingPolicyBinding> getNSGRoutingPolicyBindingsForFetcherId(String id) throws RestException {
        NSGRoutingPolicyBindingsFetcher fetcher = getNSGRoutingPolicyBindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGROUTINGPOLICYBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGRoutingPolicyBinding>();
    }

    public static NSGRoutingPolicyBindingsFetcher getNSGRoutingPolicyBindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGROUTINGPOLICYBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (NSGRoutingPolicyBindingsFetcher) fetcher;
        }
        if ((fetcher = getNSGRoutingPolicyBindingsFetcherForAggregatedDomainId(id)) != null) {
            return (NSGRoutingPolicyBindingsFetcher) addFetcher(Constants.NSGROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSGRoutingPolicyBindingsFetcherForDomainId(id)) != null) {
            return (NSGRoutingPolicyBindingsFetcher) addFetcher(Constants.NSGROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGRoutingPolicyBinding> getAllNSGRoutingPolicyBindings() throws RestException {
        java.util.List<NSGRoutingPolicyBinding> allObjs = new ArrayList<NSGRoutingPolicyBinding>();

        return allObjs;
    }

    public static java.util.List<NSGRoutingPolicyBindingsFetcher> getAllNSGRoutingPolicyBindingsFetchers() throws RestException {
        java.util.List<NSGRoutingPolicyBindingsFetcher> allObjs = new ArrayList<NSGRoutingPolicyBindingsFetcher>();
        return allObjs;
    }
    public static NSGUpgradeProfile getNSGUpgradeProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGUpgradeProfile obj = null;
            obj = new NSGUpgradeProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSGUPGRADEPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<NSGUpgradeProfile> getNSGUpgradeProfilesForFetcherId(String id) throws RestException {
        NSGUpgradeProfilesFetcher fetcher = getNSGUpgradeProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSGUPGRADEPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSGUpgradeProfile>();
    }

    public static NSGUpgradeProfilesFetcher getNSGUpgradeProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSGUPGRADEPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (NSGUpgradeProfilesFetcher) fetcher;
        }
        if ((fetcher = getNSGUpgradeProfilesFetcherForMeId(id)) != null) {
            return (NSGUpgradeProfilesFetcher) addFetcher(Constants.NSGUPGRADEPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSGUpgradeProfile> getAllNSGUpgradeProfiles() throws RestException {
        java.util.List<NSGUpgradeProfile> allObjs = new ArrayList<NSGUpgradeProfile>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSGUpgradeProfilesFetcher fetcher = getNSGUpgradeProfilesFetcherForMeId(session.getId());
            java.util.List<NSGUpgradeProfile> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<NSGUpgradeProfilesFetcher> getAllNSGUpgradeProfilesFetchers() throws RestException {
        java.util.List<NSGUpgradeProfilesFetcher> allObjs = new ArrayList<NSGUpgradeProfilesFetcher>();
        return allObjs;
    }
    public static NSPort getNSPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSPort obj = null;
            obj = new NSPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LTEInformationsFetcher getLTEInformationsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            LTEInformationsFetcher fetcher = obj.getLTEInformations();
            return addFetcher(Constants.LTEINFORMATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForNSPortId(String id) throws RestException {
        NSPort obj = getObject(Constants.NSPORT, id);
        if (obj == null) {
            obj = getNSPortById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSPort> getNSPortsForFetcherId(String id) throws RestException {
        NSPortsFetcher fetcher = getNSPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSPort>();
    }

    public static NSPortsFetcher getNSPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSPORTS_FETCHER, id);
        if (fetcher != null) {
            return (NSPortsFetcher) fetcher;
        }
        if ((fetcher = getNSPortsFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (NSPortsFetcher) addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSPortsFetcherForNSGatewayId(id)) != null) {
            return (NSPortsFetcher) addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getNSPortsFetcherForRedundantPortId(id)) != null) {
            return (NSPortsFetcher) addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSPort> getAllNSPorts() throws RestException {
        java.util.List<NSPort> allObjs = new ArrayList<NSPort>();

        return allObjs;
    }

    public static java.util.List<NSPortsFetcher> getAllNSPortsFetchers() throws RestException {
        java.util.List<NSPortsFetcher> allObjs = new ArrayList<NSPortsFetcher>();
        return allObjs;
    }
    public static NSPortTemplate getNSPortTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSPortTemplate obj = null;
            obj = new NSPortTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSPORTTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForNSPortTemplateId(String id) throws RestException {
        NSPortTemplate obj = getObject(Constants.NSPORTTEMPLATE, id);
        if (obj == null) {
            obj = getNSPortTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForNSPortTemplateId(String id) throws RestException {
        NSPortTemplate obj = getObject(Constants.NSPORTTEMPLATE, id);
        if (obj == null) {
            obj = getNSPortTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForNSPortTemplateId(String id) throws RestException {
        NSPortTemplate obj = getObject(Constants.NSPORTTEMPLATE, id);
        if (obj == null) {
            obj = getNSPortTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANTemplatesFetcher getVLANTemplatesFetcherForNSPortTemplateId(String id) throws RestException {
        NSPortTemplate obj = getObject(Constants.NSPORTTEMPLATE, id);
        if (obj == null) {
            obj = getNSPortTemplateById(id);
        }

        if (obj != null) {
            VLANTemplatesFetcher fetcher = obj.getVLANTemplates();
            return addFetcher(Constants.VLANTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<NSPortTemplate> getNSPortTemplatesForFetcherId(String id) throws RestException {
        NSPortTemplatesFetcher fetcher = getNSPortTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSPORTTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSPortTemplate>();
    }

    public static NSPortTemplatesFetcher getNSPortTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSPORTTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (NSPortTemplatesFetcher) fetcher;
        }
        if ((fetcher = getNSPortTemplatesFetcherForNSGatewayTemplateId(id)) != null) {
            return (NSPortTemplatesFetcher) addFetcher(Constants.NSPORTTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSPortTemplate> getAllNSPortTemplates() throws RestException {
        java.util.List<NSPortTemplate> allObjs = new ArrayList<NSPortTemplate>();

        return allObjs;
    }

    public static java.util.List<NSPortTemplatesFetcher> getAllNSPortTemplatesFetchers() throws RestException {
        java.util.List<NSPortTemplatesFetcher> allObjs = new ArrayList<NSPortTemplatesFetcher>();
        return allObjs;
    }
    public static RedundantPort getRedundantPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedundantPort obj = null;
            obj = new RedundantPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.REDUNDANTPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSPortsFetcher getNSPortsFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            NSPortsFetcher fetcher = obj.getNSPorts();
            return addFetcher(Constants.NSPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForRedundantPortId(String id) throws RestException {
        RedundantPort obj = getObject(Constants.REDUNDANTPORT, id);
        if (obj == null) {
            obj = getRedundantPortById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RedundantPort> getRedundantPortsForFetcherId(String id) throws RestException {
        RedundantPortsFetcher fetcher = getRedundantPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.REDUNDANTPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RedundantPort>();
    }

    public static RedundantPortsFetcher getRedundantPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.REDUNDANTPORTS_FETCHER, id);
        if (fetcher != null) {
            return (RedundantPortsFetcher) fetcher;
        }
        if ((fetcher = getRedundantPortsFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (RedundantPortsFetcher) addFetcher(Constants.REDUNDANTPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RedundantPort> getAllRedundantPorts() throws RestException {
        java.util.List<RedundantPort> allObjs = new ArrayList<RedundantPort>();

        return allObjs;
    }

    public static java.util.List<RedundantPortsFetcher> getAllRedundantPortsFetchers() throws RestException {
        java.util.List<RedundantPortsFetcher> allObjs = new ArrayList<RedundantPortsFetcher>();
        return allObjs;
    }
    public static OSPFArea getOSPFAreaById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OSPFArea obj = null;
            obj = new OSPFArea();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OSPFAREA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOSPFAreaId(String id) throws RestException {
        OSPFArea obj = getObject(Constants.OSPFAREA, id);
        if (obj == null) {
            obj = getOSPFAreaById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOSPFAreaId(String id) throws RestException {
        OSPFArea obj = getObject(Constants.OSPFAREA, id);
        if (obj == null) {
            obj = getOSPFAreaById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OSPFInterfacesFetcher getOSPFInterfacesFetcherForOSPFAreaId(String id) throws RestException {
        OSPFArea obj = getObject(Constants.OSPFAREA, id);
        if (obj == null) {
            obj = getOSPFAreaById(id);
        }

        if (obj != null) {
            OSPFInterfacesFetcher fetcher = obj.getOSPFInterfaces();
            return addFetcher(Constants.OSPFINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOSPFAreaId(String id) throws RestException {
        OSPFArea obj = getObject(Constants.OSPFAREA, id);
        if (obj == null) {
            obj = getOSPFAreaById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OSPFArea> getOSPFAreasForFetcherId(String id) throws RestException {
        OSPFAreasFetcher fetcher = getOSPFAreasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OSPFAREA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OSPFArea>();
    }

    public static OSPFAreasFetcher getOSPFAreasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OSPFAREAS_FETCHER, id);
        if (fetcher != null) {
            return (OSPFAreasFetcher) fetcher;
        }
        if ((fetcher = getOSPFAreasFetcherForOSPFInstanceId(id)) != null) {
            return (OSPFAreasFetcher) addFetcher(Constants.OSPFAREAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OSPFArea> getAllOSPFAreas() throws RestException {
        java.util.List<OSPFArea> allObjs = new ArrayList<OSPFArea>();

        return allObjs;
    }

    public static java.util.List<OSPFAreasFetcher> getAllOSPFAreasFetchers() throws RestException {
        java.util.List<OSPFAreasFetcher> allObjs = new ArrayList<OSPFAreasFetcher>();
        return allObjs;
    }
    public static OSPFInstance getOSPFInstanceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OSPFInstance obj = null;
            obj = new OSPFInstance();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OSPFINSTANCE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOSPFInstanceId(String id) throws RestException {
        OSPFInstance obj = getObject(Constants.OSPFINSTANCE, id);
        if (obj == null) {
            obj = getOSPFInstanceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOSPFInstanceId(String id) throws RestException {
        OSPFInstance obj = getObject(Constants.OSPFINSTANCE, id);
        if (obj == null) {
            obj = getOSPFInstanceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OSPFAreasFetcher getOSPFAreasFetcherForOSPFInstanceId(String id) throws RestException {
        OSPFInstance obj = getObject(Constants.OSPFINSTANCE, id);
        if (obj == null) {
            obj = getOSPFInstanceById(id);
        }

        if (obj != null) {
            OSPFAreasFetcher fetcher = obj.getOSPFAreas();
            return addFetcher(Constants.OSPFAREAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOSPFInstanceId(String id) throws RestException {
        OSPFInstance obj = getObject(Constants.OSPFINSTANCE, id);
        if (obj == null) {
            obj = getOSPFInstanceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OSPFInstance> getOSPFInstancesForFetcherId(String id) throws RestException {
        OSPFInstancesFetcher fetcher = getOSPFInstancesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OSPFINSTANCE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OSPFInstance>();
    }

    public static OSPFInstancesFetcher getOSPFInstancesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OSPFINSTANCES_FETCHER, id);
        if (fetcher != null) {
            return (OSPFInstancesFetcher) fetcher;
        }
        if ((fetcher = getOSPFInstancesFetcherForAggregatedDomainId(id)) != null) {
            return (OSPFInstancesFetcher) addFetcher(Constants.OSPFINSTANCES_FETCHER, fetcher);
        }
        
        if ((fetcher = getOSPFInstancesFetcherForDomainId(id)) != null) {
            return (OSPFInstancesFetcher) addFetcher(Constants.OSPFINSTANCES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OSPFInstance> getAllOSPFInstances() throws RestException {
        java.util.List<OSPFInstance> allObjs = new ArrayList<OSPFInstance>();

        return allObjs;
    }

    public static java.util.List<OSPFInstancesFetcher> getAllOSPFInstancesFetchers() throws RestException {
        java.util.List<OSPFInstancesFetcher> allObjs = new ArrayList<OSPFInstancesFetcher>();
        return allObjs;
    }
    public static OSPFInterface getOSPFInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OSPFInterface obj = null;
            obj = new OSPFInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OSPFINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOSPFInterfaceId(String id) throws RestException {
        OSPFInterface obj = getObject(Constants.OSPFINTERFACE, id);
        if (obj == null) {
            obj = getOSPFInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOSPFInterfaceId(String id) throws RestException {
        OSPFInterface obj = getObject(Constants.OSPFINTERFACE, id);
        if (obj == null) {
            obj = getOSPFInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOSPFInterfaceId(String id) throws RestException {
        OSPFInterface obj = getObject(Constants.OSPFINTERFACE, id);
        if (obj == null) {
            obj = getOSPFInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OSPFInterface> getOSPFInterfacesForFetcherId(String id) throws RestException {
        OSPFInterfacesFetcher fetcher = getOSPFInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OSPFINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OSPFInterface>();
    }

    public static OSPFInterfacesFetcher getOSPFInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OSPFINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (OSPFInterfacesFetcher) fetcher;
        }
        if ((fetcher = getOSPFInterfacesFetcherForOSPFAreaId(id)) != null) {
            return (OSPFInterfacesFetcher) addFetcher(Constants.OSPFINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OSPFInterface> getAllOSPFInterfaces() throws RestException {
        java.util.List<OSPFInterface> allObjs = new ArrayList<OSPFInterface>();

        return allObjs;
    }

    public static java.util.List<OSPFInterfacesFetcher> getAllOSPFInterfacesFetchers() throws RestException {
        java.util.List<OSPFInterfacesFetcher> allObjs = new ArrayList<OSPFInterfacesFetcher>();
        return allObjs;
    }
    public static OverlayAddressPool getOverlayAddressPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayAddressPool obj = null;
            obj = new OverlayAddressPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYADDRESSPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOverlayAddressPoolId(String id) throws RestException {
        OverlayAddressPool obj = getObject(Constants.OVERLAYADDRESSPOOL, id);
        if (obj == null) {
            obj = getOverlayAddressPoolById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOverlayAddressPoolId(String id) throws RestException {
        OverlayAddressPool obj = getObject(Constants.OVERLAYADDRESSPOOL, id);
        if (obj == null) {
            obj = getOverlayAddressPoolById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static OverlayPATNATEntriesFetcher getOverlayPATNATEntriesFetcherForOverlayAddressPoolId(String id) throws RestException {
        OverlayAddressPool obj = getObject(Constants.OVERLAYADDRESSPOOL, id);
        if (obj == null) {
            obj = getOverlayAddressPoolById(id);
        }

        if (obj != null) {
            OverlayPATNATEntriesFetcher fetcher = obj.getOverlayPATNATEntries();
            return addFetcher(Constants.OVERLAYPATNATENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOverlayAddressPoolId(String id) throws RestException {
        OverlayAddressPool obj = getObject(Constants.OVERLAYADDRESSPOOL, id);
        if (obj == null) {
            obj = getOverlayAddressPoolById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OverlayAddressPool> getOverlayAddressPoolsForFetcherId(String id) throws RestException {
        OverlayAddressPoolsFetcher fetcher = getOverlayAddressPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYADDRESSPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayAddressPool>();
    }

    public static OverlayAddressPoolsFetcher getOverlayAddressPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYADDRESSPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (OverlayAddressPoolsFetcher) fetcher;
        }
        if ((fetcher = getOverlayAddressPoolsFetcherForLinkId(id)) != null) {
            return (OverlayAddressPoolsFetcher) addFetcher(Constants.OVERLAYADDRESSPOOLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayAddressPool> getAllOverlayAddressPools() throws RestException {
        java.util.List<OverlayAddressPool> allObjs = new ArrayList<OverlayAddressPool>();

        return allObjs;
    }

    public static java.util.List<OverlayAddressPoolsFetcher> getAllOverlayAddressPoolsFetchers() throws RestException {
        java.util.List<OverlayAddressPoolsFetcher> allObjs = new ArrayList<OverlayAddressPoolsFetcher>();
        return allObjs;
    }
    public static OverlayManagementProfile getOverlayManagementProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayManagementProfile obj = null;
            obj = new OverlayManagementProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYMANAGEMENTPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static OverlayManagementSubnetProfilesFetcher getOverlayManagementSubnetProfilesFetcherForOverlayManagementProfileId(String id) throws RestException {
        OverlayManagementProfile obj = getObject(Constants.OVERLAYMANAGEMENTPROFILE, id);
        if (obj == null) {
            obj = getOverlayManagementProfileById(id);
        }

        if (obj != null) {
            OverlayManagementSubnetProfilesFetcher fetcher = obj.getOverlayManagementSubnetProfiles();
            return addFetcher(Constants.OVERLAYMANAGEMENTSUBNETPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OverlayManagementProfile> getOverlayManagementProfilesForFetcherId(String id) throws RestException {
        OverlayManagementProfilesFetcher fetcher = getOverlayManagementProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYMANAGEMENTPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayManagementProfile>();
    }

    public static OverlayManagementProfilesFetcher getOverlayManagementProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYMANAGEMENTPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (OverlayManagementProfilesFetcher) fetcher;
        }
        if ((fetcher = getOverlayManagementProfilesFetcherForEnterpriseId(id)) != null) {
            return (OverlayManagementProfilesFetcher) addFetcher(Constants.OVERLAYMANAGEMENTPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayManagementProfile> getAllOverlayManagementProfiles() throws RestException {
        java.util.List<OverlayManagementProfile> allObjs = new ArrayList<OverlayManagementProfile>();

        return allObjs;
    }

    public static java.util.List<OverlayManagementProfilesFetcher> getAllOverlayManagementProfilesFetchers() throws RestException {
        java.util.List<OverlayManagementProfilesFetcher> allObjs = new ArrayList<OverlayManagementProfilesFetcher>();
        return allObjs;
    }
    public static OverlayManagementSubnetProfile getOverlayManagementSubnetProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayManagementSubnetProfile obj = null;
            obj = new OverlayManagementSubnetProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYMANAGEMENTSUBNETPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<OverlayManagementSubnetProfile> getOverlayManagementSubnetProfilesForFetcherId(String id) throws RestException {
        OverlayManagementSubnetProfilesFetcher fetcher = getOverlayManagementSubnetProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYMANAGEMENTSUBNETPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayManagementSubnetProfile>();
    }

    public static OverlayManagementSubnetProfilesFetcher getOverlayManagementSubnetProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYMANAGEMENTSUBNETPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (OverlayManagementSubnetProfilesFetcher) fetcher;
        }
        if ((fetcher = getOverlayManagementSubnetProfilesFetcherForOverlayManagementProfileId(id)) != null) {
            return (OverlayManagementSubnetProfilesFetcher) addFetcher(Constants.OVERLAYMANAGEMENTSUBNETPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayManagementSubnetProfile> getAllOverlayManagementSubnetProfiles() throws RestException {
        java.util.List<OverlayManagementSubnetProfile> allObjs = new ArrayList<OverlayManagementSubnetProfile>();

        return allObjs;
    }

    public static java.util.List<OverlayManagementSubnetProfilesFetcher> getAllOverlayManagementSubnetProfilesFetchers() throws RestException {
        java.util.List<OverlayManagementSubnetProfilesFetcher> allObjs = new ArrayList<OverlayManagementSubnetProfilesFetcher>();
        return allObjs;
    }
    public static OverlayMirrorDestination getOverlayMirrorDestinationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayMirrorDestination obj = null;
            obj = new OverlayMirrorDestination();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYMIRRORDESTINATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOverlayMirrorDestinationId(String id) throws RestException {
        OverlayMirrorDestination obj = getObject(Constants.OVERLAYMIRRORDESTINATION, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOverlayMirrorDestinationId(String id) throws RestException {
        OverlayMirrorDestination obj = getObject(Constants.OVERLAYMIRRORDESTINATION, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOverlayMirrorDestinationId(String id) throws RestException {
        OverlayMirrorDestination obj = getObject(Constants.OVERLAYMIRRORDESTINATION, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForOverlayMirrorDestinationId(String id) throws RestException {
        OverlayMirrorDestination obj = getObject(Constants.OVERLAYMIRRORDESTINATION, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OverlayMirrorDestination> getOverlayMirrorDestinationsForFetcherId(String id) throws RestException {
        OverlayMirrorDestinationsFetcher fetcher = getOverlayMirrorDestinationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYMIRRORDESTINATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayMirrorDestination>();
    }

    public static OverlayMirrorDestinationsFetcher getOverlayMirrorDestinationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, id);
        if (fetcher != null) {
            return (OverlayMirrorDestinationsFetcher) fetcher;
        }
        if ((fetcher = getOverlayMirrorDestinationsFetcherForL2DomainId(id)) != null) {
            return (OverlayMirrorDestinationsFetcher) addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getOverlayMirrorDestinationsFetcherForMeId(id)) != null) {
            return (OverlayMirrorDestinationsFetcher) addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getOverlayMirrorDestinationsFetcherForMirrorDestinationGroupId(id)) != null) {
            return (OverlayMirrorDestinationsFetcher) addFetcher(Constants.OVERLAYMIRRORDESTINATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayMirrorDestination> getAllOverlayMirrorDestinations() throws RestException {
        java.util.List<OverlayMirrorDestination> allObjs = new ArrayList<OverlayMirrorDestination>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayMirrorDestinationsFetcher fetcher = getOverlayMirrorDestinationsFetcherForMeId(session.getId());
            java.util.List<OverlayMirrorDestination> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<OverlayMirrorDestinationsFetcher> getAllOverlayMirrorDestinationsFetchers() throws RestException {
        java.util.List<OverlayMirrorDestinationsFetcher> allObjs = new ArrayList<OverlayMirrorDestinationsFetcher>();
        return allObjs;
    }
    public static OverlayMirrorDestinationTemplate getOverlayMirrorDestinationTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayMirrorDestinationTemplate obj = null;
            obj = new OverlayMirrorDestinationTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYMIRRORDESTINATIONTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOverlayMirrorDestinationTemplateId(String id) throws RestException {
        OverlayMirrorDestinationTemplate obj = getObject(Constants.OVERLAYMIRRORDESTINATIONTEMPLATE, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOverlayMirrorDestinationTemplateId(String id) throws RestException {
        OverlayMirrorDestinationTemplate obj = getObject(Constants.OVERLAYMIRRORDESTINATIONTEMPLATE, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOverlayMirrorDestinationTemplateId(String id) throws RestException {
        OverlayMirrorDestinationTemplate obj = getObject(Constants.OVERLAYMIRRORDESTINATIONTEMPLATE, id);
        if (obj == null) {
            obj = getOverlayMirrorDestinationTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OverlayMirrorDestinationTemplate> getOverlayMirrorDestinationTemplatesForFetcherId(String id) throws RestException {
        OverlayMirrorDestinationTemplatesFetcher fetcher = getOverlayMirrorDestinationTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYMIRRORDESTINATIONTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayMirrorDestinationTemplate>();
    }

    public static OverlayMirrorDestinationTemplatesFetcher getOverlayMirrorDestinationTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYMIRRORDESTINATIONTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (OverlayMirrorDestinationTemplatesFetcher) fetcher;
        }
        if ((fetcher = getOverlayMirrorDestinationTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (OverlayMirrorDestinationTemplatesFetcher) addFetcher(Constants.OVERLAYMIRRORDESTINATIONTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayMirrorDestinationTemplate> getAllOverlayMirrorDestinationTemplates() throws RestException {
        java.util.List<OverlayMirrorDestinationTemplate> allObjs = new ArrayList<OverlayMirrorDestinationTemplate>();

        return allObjs;
    }

    public static java.util.List<OverlayMirrorDestinationTemplatesFetcher> getAllOverlayMirrorDestinationTemplatesFetchers() throws RestException {
        java.util.List<OverlayMirrorDestinationTemplatesFetcher> allObjs = new ArrayList<OverlayMirrorDestinationTemplatesFetcher>();
        return allObjs;
    }
    public static OverlayPATNATEntry getOverlayPATNATEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            OverlayPATNATEntry obj = null;
            obj = new OverlayPATNATEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.OVERLAYPATNATENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForOverlayPATNATEntryId(String id) throws RestException {
        OverlayPATNATEntry obj = getObject(Constants.OVERLAYPATNATENTRY, id);
        if (obj == null) {
            obj = getOverlayPATNATEntryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForOverlayPATNATEntryId(String id) throws RestException {
        OverlayPATNATEntry obj = getObject(Constants.OVERLAYPATNATENTRY, id);
        if (obj == null) {
            obj = getOverlayPATNATEntryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForOverlayPATNATEntryId(String id) throws RestException {
        OverlayPATNATEntry obj = getObject(Constants.OVERLAYPATNATENTRY, id);
        if (obj == null) {
            obj = getOverlayPATNATEntryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<OverlayPATNATEntry> getOverlayPATNATEntriesForFetcherId(String id) throws RestException {
        OverlayPATNATEntriesFetcher fetcher = getOverlayPATNATEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.OVERLAYPATNATENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<OverlayPATNATEntry>();
    }

    public static OverlayPATNATEntriesFetcher getOverlayPATNATEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.OVERLAYPATNATENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (OverlayPATNATEntriesFetcher) fetcher;
        }
        if ((fetcher = getOverlayPATNATEntriesFetcherForOverlayAddressPoolId(id)) != null) {
            return (OverlayPATNATEntriesFetcher) addFetcher(Constants.OVERLAYPATNATENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<OverlayPATNATEntry> getAllOverlayPATNATEntries() throws RestException {
        java.util.List<OverlayPATNATEntry> allObjs = new ArrayList<OverlayPATNATEntry>();

        return allObjs;
    }

    public static java.util.List<OverlayPATNATEntriesFetcher> getAllOverlayPATNATEntriesFetchers() throws RestException {
        java.util.List<OverlayPATNATEntriesFetcher> allObjs = new ArrayList<OverlayPATNATEntriesFetcher>();
        return allObjs;
    }
    public static Patch getPatchById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Patch obj = null;
            obj = new Patch();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PATCH, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPatchId(String id) throws RestException {
        Patch obj = getObject(Constants.PATCH, id);
        if (obj == null) {
            obj = getPatchById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPatchId(String id) throws RestException {
        Patch obj = getObject(Constants.PATCH, id);
        if (obj == null) {
            obj = getPatchById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPatchId(String id) throws RestException {
        Patch obj = getObject(Constants.PATCH, id);
        if (obj == null) {
            obj = getPatchById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Patch> getPatchsForFetcherId(String id) throws RestException {
        PatchsFetcher fetcher = getPatchsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PATCH);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Patch>();
    }

    public static PatchsFetcher getPatchsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PATCHS_FETCHER, id);
        if (fetcher != null) {
            return (PatchsFetcher) fetcher;
        }
        if ((fetcher = getPatchsFetcherForNSGatewayId(id)) != null) {
            return (PatchsFetcher) addFetcher(Constants.PATCHS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Patch> getAllPatchs() throws RestException {
        java.util.List<Patch> allObjs = new ArrayList<Patch>();

        return allObjs;
    }

    public static java.util.List<PatchsFetcher> getAllPatchsFetchers() throws RestException {
        java.util.List<PatchsFetcher> allObjs = new ArrayList<PatchsFetcher>();
        return allObjs;
    }
    public static PATIPEntry getPATIPEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PATIPEntry obj = null;
            obj = new PATIPEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PATIPENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<PATIPEntry> getPATIPEntriesForFetcherId(String id) throws RestException {
        PATIPEntriesFetcher fetcher = getPATIPEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PATIPENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PATIPEntry>();
    }

    public static PATIPEntriesFetcher getPATIPEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PATIPENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (PATIPEntriesFetcher) fetcher;
        }
        if ((fetcher = getPATIPEntriesFetcherForSharedNetworkResourceId(id)) != null) {
            return (PATIPEntriesFetcher) addFetcher(Constants.PATIPENTRIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATIPEntriesFetcherForSubnetId(id)) != null) {
            return (PATIPEntriesFetcher) addFetcher(Constants.PATIPENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PATIPEntry> getAllPATIPEntries() throws RestException {
        java.util.List<PATIPEntry> allObjs = new ArrayList<PATIPEntry>();

        return allObjs;
    }

    public static java.util.List<PATIPEntriesFetcher> getAllPATIPEntriesFetchers() throws RestException {
        java.util.List<PATIPEntriesFetcher> allObjs = new ArrayList<PATIPEntriesFetcher>();
        return allObjs;
    }
    public static PATMapper getPATMapperById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PATMapper obj = null;
            obj = new PATMapper();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PATMAPPER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static SharedNetworkResourcesFetcher getSharedNetworkResourcesFetcherForPATMapperId(String id) throws RestException {
        PATMapper obj = getObject(Constants.PATMAPPER, id);
        if (obj == null) {
            obj = getPATMapperById(id);
        }

        if (obj != null) {
            SharedNetworkResourcesFetcher fetcher = obj.getSharedNetworkResources();
            return addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForPATMapperId(String id) throws RestException {
        PATMapper obj = getObject(Constants.PATMAPPER, id);
        if (obj == null) {
            obj = getPATMapperById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PATMapper> getPATMappersForFetcherId(String id) throws RestException {
        PATMappersFetcher fetcher = getPATMappersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PATMAPPER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PATMapper>();
    }

    public static PATMappersFetcher getPATMappersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PATMAPPERS_FETCHER, id);
        if (fetcher != null) {
            return (PATMappersFetcher) fetcher;
        }
        if ((fetcher = getPATMappersFetcherForMeId(id)) != null) {
            return (PATMappersFetcher) addFetcher(Constants.PATMAPPERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PATMapper> getAllPATMappers() throws RestException {
        java.util.List<PATMapper> allObjs = new ArrayList<PATMapper>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            PATMappersFetcher fetcher = getPATMappersFetcherForMeId(session.getId());
            java.util.List<PATMapper> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<PATMappersFetcher> getAllPATMappersFetchers() throws RestException {
        java.util.List<PATMappersFetcher> allObjs = new ArrayList<PATMappersFetcher>();
        return allObjs;
    }
    public static PATNATPool getPATNATPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PATNATPool obj = null;
            obj = new PATNATPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PATNATPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressMapsFetcher getAddressMapsFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            AddressMapsFetcher fetcher = obj.getAddressMaps();
            return addFetcher(Constants.ADDRESSMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BulkStatisticsFetcher getBulkStatisticsFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            BulkStatisticsFetcher fetcher = obj.getBulkStatistics();
            return addFetcher(Constants.BULKSTATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NATMapEntriesFetcher getNATMapEntriesFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            NATMapEntriesFetcher fetcher = obj.getNATMapEntries();
            return addFetcher(Constants.NATMAPENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForPATNATPoolId(String id) throws RestException {
        PATNATPool obj = getObject(Constants.PATNATPOOL, id);
        if (obj == null) {
            obj = getPATNATPoolById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PATNATPool> getPATNATPoolsForFetcherId(String id) throws RestException {
        PATNATPoolsFetcher fetcher = getPATNATPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PATNATPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PATNATPool>();
    }

    public static PATNATPoolsFetcher getPATNATPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PATNATPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (PATNATPoolsFetcher) fetcher;
        }
        if ((fetcher = getPATNATPoolsFetcherForEnterpriseId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATNATPoolsFetcherForGatewayId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATNATPoolsFetcherForMeId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATNATPoolsFetcherForNetconfGatewayId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATNATPoolsFetcherForNSGatewayId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPATNATPoolsFetcherForVLANId(id)) != null) {
            return (PATNATPoolsFetcher) addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PATNATPool> getAllPATNATPools() throws RestException {
        java.util.List<PATNATPool> allObjs = new ArrayList<PATNATPool>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            PATNATPoolsFetcher fetcher = getPATNATPoolsFetcherForMeId(session.getId());
            java.util.List<PATNATPool> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<PATNATPoolsFetcher> getAllPATNATPoolsFetchers() throws RestException {
        java.util.List<PATNATPoolsFetcher> allObjs = new ArrayList<PATNATPoolsFetcher>();
        return allObjs;
    }
    public static PerformanceMonitor getPerformanceMonitorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PerformanceMonitor obj = null;
            obj = new PerformanceMonitor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PERFORMANCEMONITOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ApplicationperformancemanagementsFetcher getApplicationperformancemanagementsFetcherForPerformanceMonitorId(String id) throws RestException {
        PerformanceMonitor obj = getObject(Constants.PERFORMANCEMONITOR, id);
        if (obj == null) {
            obj = getPerformanceMonitorById(id);
        }

        if (obj != null) {
            ApplicationperformancemanagementsFetcher fetcher = obj.getApplicationperformancemanagements();
            return addFetcher(Constants.APPLICATIONPERFORMANCEMANAGEMENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TiersFetcher getTiersFetcherForPerformanceMonitorId(String id) throws RestException {
        PerformanceMonitor obj = getObject(Constants.PERFORMANCEMONITOR, id);
        if (obj == null) {
            obj = getPerformanceMonitorById(id);
        }

        if (obj != null) {
            TiersFetcher fetcher = obj.getTiers();
            return addFetcher(Constants.TIERS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PerformanceMonitor> getPerformanceMonitorsForFetcherId(String id) throws RestException {
        PerformanceMonitorsFetcher fetcher = getPerformanceMonitorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PERFORMANCEMONITOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PerformanceMonitor>();
    }

    public static PerformanceMonitorsFetcher getPerformanceMonitorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PERFORMANCEMONITORS_FETCHER, id);
        if (fetcher != null) {
            return (PerformanceMonitorsFetcher) fetcher;
        }
        if ((fetcher = getPerformanceMonitorsFetcherForEnterpriseId(id)) != null) {
            return (PerformanceMonitorsFetcher) addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPerformanceMonitorsFetcherForIKEGatewayConnectionId(id)) != null) {
            return (PerformanceMonitorsFetcher) addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPerformanceMonitorsFetcherForMeId(id)) != null) {
            return (PerformanceMonitorsFetcher) addFetcher(Constants.PERFORMANCEMONITORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PerformanceMonitor> getAllPerformanceMonitors() throws RestException {
        java.util.List<PerformanceMonitor> allObjs = new ArrayList<PerformanceMonitor>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            PerformanceMonitorsFetcher fetcher = getPerformanceMonitorsFetcherForMeId(session.getId());
            java.util.List<PerformanceMonitor> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<PerformanceMonitorsFetcher> getAllPerformanceMonitorsFetchers() throws RestException {
        java.util.List<PerformanceMonitorsFetcher> allObjs = new ArrayList<PerformanceMonitorsFetcher>();
        return allObjs;
    }
    public static Permission getPermissionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Permission obj = null;
            obj = new Permission();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PERMISSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForPermissionId(String id) throws RestException {
        Permission obj = getObject(Constants.PERMISSION, id);
        if (obj == null) {
            obj = getPermissionById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPermissionId(String id) throws RestException {
        Permission obj = getObject(Constants.PERMISSION, id);
        if (obj == null) {
            obj = getPermissionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPermissionId(String id) throws RestException {
        Permission obj = getObject(Constants.PERMISSION, id);
        if (obj == null) {
            obj = getPermissionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPermissionId(String id) throws RestException {
        Permission obj = getObject(Constants.PERMISSION, id);
        if (obj == null) {
            obj = getPermissionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Permission> getPermissionsForFetcherId(String id) throws RestException {
        PermissionsFetcher fetcher = getPermissionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PERMISSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Permission>();
    }

    public static PermissionsFetcher getPermissionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PERMISSIONS_FETCHER, id);
        if (fetcher != null) {
            return (PermissionsFetcher) fetcher;
        }
        if ((fetcher = getPermissionsFetcherForAddressMapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAddressRangeId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAggregatedDomainId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAlarmId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAllAlarmId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAllGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAllRedundancyGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForApplicationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForApplicationBindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForApplicationperformancemanagementId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForApplicationperformancemanagementbindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAvatarId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForAzureCloudId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBFDSessionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBGPNeighborId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBGPPeerId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBGPProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBootstrapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBootstrapActivationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBRConnectionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBridgeInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForBulkStatisticsId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCertificateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCloudMgmtSystemId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVSDComponentId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForConnectionendpointId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForContainerId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForContainerInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForContainerResyncId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForControllerVRSLinkId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCOSRemarkingPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCOSRemarkingPolicyTableId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCSNATPoolId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCTranslationMapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForCustomPropertyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDefaultGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDemarcationServiceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDeploymentFailureId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDestinationurlId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDHCPOptionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDHCPv6OptionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDiskStatId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDomainId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDomainKindSummaryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDomainTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDSCPForwardingClassMappingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDSCPForwardingClassTableId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDSCPRemarkingPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDSCPRemarkingPolicyTableId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDUCGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDUCGroupBindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterEAMConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressACLEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressACLTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressAdvFwdEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressAdvFwdTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressAuditACLEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressAuditACLTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDomainFIPAclTemplateEntryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForDomainFIPAclTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEgressQOSPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterpriseId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterpriseNetworkId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterprisePermissionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterpriseProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterpriseSecuredDataId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEnterpriseSecurityId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEsIlmPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEsIndexConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEthernetSegmentGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForEventLogId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForFirewallAclId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForFirewallRuleId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForFloatingIpId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForForwardingPathListId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForForwardingPathListEntryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewayRedundantPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewaySecuredDataId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewaySecurityId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewaysLocationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGatewayTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGlobalMetadataId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForGroupKeyEncryptionProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForHostInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForHSCId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKECertificateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEEncryptionprofileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEGatewayConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEGatewayConnectionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEGatewayProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKEPSKId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIKESubnetId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForInfrastructureConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForInfrastructureEVDFProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForInfrastructureGatewayProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForInfrastructureVscProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressACLEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressACLTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressAdvFwdEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressAdvFwdTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressAuditACLEntryTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressAuditACLTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIngressQOSPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIPFilterProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIPReservationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForIPv6FilterProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForJobId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForKeyServerMemberId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForKeyServerMonitorId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForKeyServerMonitorEncryptedSeedId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForKeyServerMonitorSeedId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForKeyServerMonitorSEKId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForL2DomainId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForL2DomainTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForL7applicationsignatureId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLDAPConfigurationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLicenseId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLicenseStatusId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLinkId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLocationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLTEInformationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForLtestatisticsId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMACFilterProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMirrorDestinationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMirrorDestinationGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMonitoringPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMonitorscopeId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMultiCastChannelMapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMultiCastListId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMultiCastRangeId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForMultiNICVPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNATMapEntryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetconfGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetconfManagerId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetconfProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetconfSessionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetworkLayoutId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetworkMacroGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetworkPerformanceBindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNetworkPerformanceMeasurementId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNextHopId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGatewayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGatewaysCountId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGatewaySummaryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGatewayTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGMigrationProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSGRoutingPolicyBindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForNSPortTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRedundantPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOSPFAreaId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOSPFInstanceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOSPFInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOverlayAddressPoolId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOverlayMirrorDestinationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOverlayMirrorDestinationTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForOverlayPATNATEntryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPatchId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPATNATPoolId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPermissionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyDecisionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyEntryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyGroupCategoryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyGroupTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyObjectGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPolicyStatementId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPortTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPSNATPoolId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPSPATMapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPTranslationMapId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForPublicNetworkMacroId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForQOSId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForQosPolicerId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRateLimiterId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRedirectionTargetId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRedirectionTargetTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRedundancyGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRemoteVrsInfoId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVMResyncId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRoleId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRoleentryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRoutingPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForRoutingPolicyBindingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSaaSApplicationGroupId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSaaSApplicationTypeId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSAPEgressQoSProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSAPIngressQoSProfileId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForWANServiceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSharedNetworkResourceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForShuntLinkId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSiteInfoId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSPATSourcesPoolId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSSHKeyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSSIDConnectionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForStaticRouteId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForStatisticsId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForStatsCollectorInfoId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForStatisticsPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSubnetId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSubnetTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForSystemConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTCAId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTestId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTestDefinitionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTestRunId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTestSuiteId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTestSuiteRunId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTierId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForTrunkId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForUnderlayId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForUplinkConnectionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForUplinkRDId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForUserId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForUserContextId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterClusterId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterDataCenterId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterHypervisorId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVirtualFirewallPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVirtualFirewallRuleId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVirtualIPId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVLANId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVLANTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVMId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVMInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVMIPReservationId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFCatalogId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFDescriptorId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFDomainMappingId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFInterfaceId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFInterfaceDescriptorId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFMetadataId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVNFThresholdPolicyId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVPNConnectionId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVPortMirrorId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVRSId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVRSAddressRangeId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVCenterVRSConfigId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForvrsInfoId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVSCId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVSDId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVsgRedundantPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForVSPId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForWebCategoryId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForWebDomainNameId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForWirelessPortId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForZFBRequestId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForZoneId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPermissionsFetcherForZoneTemplateId(id)) != null) {
            return (PermissionsFetcher) addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Permission> getAllPermissions() throws RestException {
        java.util.List<Permission> allObjs = new ArrayList<Permission>();

        return allObjs;
    }

    public static java.util.List<PermissionsFetcher> getAllPermissionsFetchers() throws RestException {
        java.util.List<PermissionsFetcher> allObjs = new ArrayList<PermissionsFetcher>();
        return allObjs;
    }
    public static PGExpression getPGExpressionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PGExpression obj = null;
            obj = new PGExpression();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PGEXPRESSION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<PGExpression> getPGExpressionsForFetcherId(String id) throws RestException {
        PGExpressionsFetcher fetcher = getPGExpressionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PGEXPRESSION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PGExpression>();
    }

    public static PGExpressionsFetcher getPGExpressionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PGEXPRESSIONS_FETCHER, id);
        if (fetcher != null) {
            return (PGExpressionsFetcher) fetcher;
        }
        if ((fetcher = getPGExpressionsFetcherForAggregatedDomainId(id)) != null) {
            return (PGExpressionsFetcher) addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPGExpressionsFetcherForDomainId(id)) != null) {
            return (PGExpressionsFetcher) addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPGExpressionsFetcherForL2DomainId(id)) != null) {
            return (PGExpressionsFetcher) addFetcher(Constants.PGEXPRESSIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PGExpression> getAllPGExpressions() throws RestException {
        java.util.List<PGExpression> allObjs = new ArrayList<PGExpression>();

        return allObjs;
    }

    public static java.util.List<PGExpressionsFetcher> getAllPGExpressionsFetchers() throws RestException {
        java.util.List<PGExpressionsFetcher> allObjs = new ArrayList<PGExpressionsFetcher>();
        return allObjs;
    }
    public static PGExpressionTemplate getPGExpressionTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PGExpressionTemplate obj = null;
            obj = new PGExpressionTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PGEXPRESSIONTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<PGExpressionTemplate> getPGExpressionTemplatesForFetcherId(String id) throws RestException {
        PGExpressionTemplatesFetcher fetcher = getPGExpressionTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PGEXPRESSIONTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PGExpressionTemplate>();
    }

    public static PGExpressionTemplatesFetcher getPGExpressionTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PGEXPRESSIONTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (PGExpressionTemplatesFetcher) fetcher;
        }
        if ((fetcher = getPGExpressionTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (PGExpressionTemplatesFetcher) addFetcher(Constants.PGEXPRESSIONTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getPGExpressionTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (PGExpressionTemplatesFetcher) addFetcher(Constants.PGEXPRESSIONTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PGExpressionTemplate> getAllPGExpressionTemplates() throws RestException {
        java.util.List<PGExpressionTemplate> allObjs = new ArrayList<PGExpressionTemplate>();

        return allObjs;
    }

    public static java.util.List<PGExpressionTemplatesFetcher> getAllPGExpressionTemplatesFetchers() throws RestException {
        java.util.List<PGExpressionTemplatesFetcher> allObjs = new ArrayList<PGExpressionTemplatesFetcher>();
        return allObjs;
    }
    public static PolicyDecision getPolicyDecisionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyDecision obj = null;
            obj = new PolicyDecision();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYDECISION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyDecisionId(String id) throws RestException {
        PolicyDecision obj = getObject(Constants.POLICYDECISION, id);
        if (obj == null) {
            obj = getPolicyDecisionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyDecisionId(String id) throws RestException {
        PolicyDecision obj = getObject(Constants.POLICYDECISION, id);
        if (obj == null) {
            obj = getPolicyDecisionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyDecisionId(String id) throws RestException {
        PolicyDecision obj = getObject(Constants.POLICYDECISION, id);
        if (obj == null) {
            obj = getPolicyDecisionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForPolicyDecisionId(String id) throws RestException {
        PolicyDecision obj = getObject(Constants.POLICYDECISION, id);
        if (obj == null) {
            obj = getPolicyDecisionById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyDecision> getPolicyDecisionsForFetcherId(String id) throws RestException {
        PolicyDecisionsFetcher fetcher = getPolicyDecisionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYDECISION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyDecision>();
    }

    public static PolicyDecisionsFetcher getPolicyDecisionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYDECISIONS_FETCHER, id);
        if (fetcher != null) {
            return (PolicyDecisionsFetcher) fetcher;
        }
        if ((fetcher = getPolicyDecisionsFetcherForBridgeInterfaceId(id)) != null) {
            return (PolicyDecisionsFetcher) addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyDecisionsFetcherForContainerInterfaceId(id)) != null) {
            return (PolicyDecisionsFetcher) addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyDecisionsFetcherForHostInterfaceId(id)) != null) {
            return (PolicyDecisionsFetcher) addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyDecisionsFetcherForVMInterfaceId(id)) != null) {
            return (PolicyDecisionsFetcher) addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyDecision> getAllPolicyDecisions() throws RestException {
        java.util.List<PolicyDecision> allObjs = new ArrayList<PolicyDecision>();

        return allObjs;
    }

    public static java.util.List<PolicyDecisionsFetcher> getAllPolicyDecisionsFetchers() throws RestException {
        java.util.List<PolicyDecisionsFetcher> allObjs = new ArrayList<PolicyDecisionsFetcher>();
        return allObjs;
    }
    public static PolicyEntry getPolicyEntryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyEntry obj = null;
            obj = new PolicyEntry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyEntryId(String id) throws RestException {
        PolicyEntry obj = getObject(Constants.POLICYENTRY, id);
        if (obj == null) {
            obj = getPolicyEntryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyEntryId(String id) throws RestException {
        PolicyEntry obj = getObject(Constants.POLICYENTRY, id);
        if (obj == null) {
            obj = getPolicyEntryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyEntryId(String id) throws RestException {
        PolicyEntry obj = getObject(Constants.POLICYENTRY, id);
        if (obj == null) {
            obj = getPolicyEntryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyEntry> getPolicyEntriesForFetcherId(String id) throws RestException {
        PolicyEntriesFetcher fetcher = getPolicyEntriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyEntry>();
    }

    public static PolicyEntriesFetcher getPolicyEntriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (PolicyEntriesFetcher) fetcher;
        }
        if ((fetcher = getPolicyEntriesFetcherForPolicyStatementId(id)) != null) {
            return (PolicyEntriesFetcher) addFetcher(Constants.POLICYENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyEntry> getAllPolicyEntries() throws RestException {
        java.util.List<PolicyEntry> allObjs = new ArrayList<PolicyEntry>();

        return allObjs;
    }

    public static java.util.List<PolicyEntriesFetcher> getAllPolicyEntriesFetchers() throws RestException {
        java.util.List<PolicyEntriesFetcher> allObjs = new ArrayList<PolicyEntriesFetcher>();
        return allObjs;
    }
    public static PolicyGroup getPolicyGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyGroup obj = null;
            obj = new PolicyGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupCategoriesFetcher getPolicyGroupCategoriesFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            PolicyGroupCategoriesFetcher fetcher = obj.getPolicyGroupCategories();
            return addFetcher(Constants.POLICYGROUPCATEGORIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForPolicyGroupId(String id) throws RestException {
        PolicyGroup obj = getObject(Constants.POLICYGROUP, id);
        if (obj == null) {
            obj = getPolicyGroupById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyGroup> getPolicyGroupsForFetcherId(String id) throws RestException {
        PolicyGroupsFetcher fetcher = getPolicyGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyGroup>();
    }

    public static PolicyGroupsFetcher getPolicyGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (PolicyGroupsFetcher) fetcher;
        }
        if ((fetcher = getPolicyGroupsFetcherForAggregatedDomainId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForBridgeInterfaceId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForContainerInterfaceId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForDomainId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForHostInterfaceId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForL2DomainId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForMeId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForPolicyGroupCategoryId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForVMInterfaceId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupsFetcherForVPortId(id)) != null) {
            return (PolicyGroupsFetcher) addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyGroup> getAllPolicyGroups() throws RestException {
        java.util.List<PolicyGroup> allObjs = new ArrayList<PolicyGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyGroupsFetcher fetcher = getPolicyGroupsFetcherForMeId(session.getId());
            java.util.List<PolicyGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<PolicyGroupsFetcher> getAllPolicyGroupsFetchers() throws RestException {
        java.util.List<PolicyGroupsFetcher> allObjs = new ArrayList<PolicyGroupsFetcher>();
        return allObjs;
    }
    public static PolicyGroupCategory getPolicyGroupCategoryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyGroupCategory obj = null;
            obj = new PolicyGroupCategory();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYGROUPCATEGORY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyGroupCategoryId(String id) throws RestException {
        PolicyGroupCategory obj = getObject(Constants.POLICYGROUPCATEGORY, id);
        if (obj == null) {
            obj = getPolicyGroupCategoryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyGroupCategoryId(String id) throws RestException {
        PolicyGroupCategory obj = getObject(Constants.POLICYGROUPCATEGORY, id);
        if (obj == null) {
            obj = getPolicyGroupCategoryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyGroupCategoryId(String id) throws RestException {
        PolicyGroupCategory obj = getObject(Constants.POLICYGROUPCATEGORY, id);
        if (obj == null) {
            obj = getPolicyGroupCategoryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForPolicyGroupCategoryId(String id) throws RestException {
        PolicyGroupCategory obj = getObject(Constants.POLICYGROUPCATEGORY, id);
        if (obj == null) {
            obj = getPolicyGroupCategoryById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyGroupCategory> getPolicyGroupCategoriesForFetcherId(String id) throws RestException {
        PolicyGroupCategoriesFetcher fetcher = getPolicyGroupCategoriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYGROUPCATEGORY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyGroupCategory>();
    }

    public static PolicyGroupCategoriesFetcher getPolicyGroupCategoriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYGROUPCATEGORIES_FETCHER, id);
        if (fetcher != null) {
            return (PolicyGroupCategoriesFetcher) fetcher;
        }
        if ((fetcher = getPolicyGroupCategoriesFetcherForEnterpriseId(id)) != null) {
            return (PolicyGroupCategoriesFetcher) addFetcher(Constants.POLICYGROUPCATEGORIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupCategoriesFetcherForPolicyGroupId(id)) != null) {
            return (PolicyGroupCategoriesFetcher) addFetcher(Constants.POLICYGROUPCATEGORIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyGroupCategory> getAllPolicyGroupCategories() throws RestException {
        java.util.List<PolicyGroupCategory> allObjs = new ArrayList<PolicyGroupCategory>();

        return allObjs;
    }

    public static java.util.List<PolicyGroupCategoriesFetcher> getAllPolicyGroupCategoriesFetchers() throws RestException {
        java.util.List<PolicyGroupCategoriesFetcher> allObjs = new ArrayList<PolicyGroupCategoriesFetcher>();
        return allObjs;
    }
    public static PolicyGroupTemplate getPolicyGroupTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyGroupTemplate obj = null;
            obj = new PolicyGroupTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYGROUPTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForPolicyGroupTemplateId(String id) throws RestException {
        PolicyGroupTemplate obj = getObject(Constants.POLICYGROUPTEMPLATE, id);
        if (obj == null) {
            obj = getPolicyGroupTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyGroupTemplateId(String id) throws RestException {
        PolicyGroupTemplate obj = getObject(Constants.POLICYGROUPTEMPLATE, id);
        if (obj == null) {
            obj = getPolicyGroupTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyGroupTemplateId(String id) throws RestException {
        PolicyGroupTemplate obj = getObject(Constants.POLICYGROUPTEMPLATE, id);
        if (obj == null) {
            obj = getPolicyGroupTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyGroupTemplateId(String id) throws RestException {
        PolicyGroupTemplate obj = getObject(Constants.POLICYGROUPTEMPLATE, id);
        if (obj == null) {
            obj = getPolicyGroupTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyGroupTemplate> getPolicyGroupTemplatesForFetcherId(String id) throws RestException {
        PolicyGroupTemplatesFetcher fetcher = getPolicyGroupTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYGROUPTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyGroupTemplate>();
    }

    public static PolicyGroupTemplatesFetcher getPolicyGroupTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYGROUPTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (PolicyGroupTemplatesFetcher) fetcher;
        }
        if ((fetcher = getPolicyGroupTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (PolicyGroupTemplatesFetcher) addFetcher(Constants.POLICYGROUPTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyGroupTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (PolicyGroupTemplatesFetcher) addFetcher(Constants.POLICYGROUPTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyGroupTemplate> getAllPolicyGroupTemplates() throws RestException {
        java.util.List<PolicyGroupTemplate> allObjs = new ArrayList<PolicyGroupTemplate>();

        return allObjs;
    }

    public static java.util.List<PolicyGroupTemplatesFetcher> getAllPolicyGroupTemplatesFetchers() throws RestException {
        java.util.List<PolicyGroupTemplatesFetcher> allObjs = new ArrayList<PolicyGroupTemplatesFetcher>();
        return allObjs;
    }
    public static PolicyObjectGroup getPolicyObjectGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyObjectGroup obj = null;
            obj = new PolicyObjectGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYOBJECTGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GatewaysFetcher getGatewaysFetcherForPolicyObjectGroupId(String id) throws RestException {
        PolicyObjectGroup obj = getObject(Constants.POLICYOBJECTGROUP, id);
        if (obj == null) {
            obj = getPolicyObjectGroupById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyObjectGroupId(String id) throws RestException {
        PolicyObjectGroup obj = getObject(Constants.POLICYOBJECTGROUP, id);
        if (obj == null) {
            obj = getPolicyObjectGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyObjectGroupId(String id) throws RestException {
        PolicyObjectGroup obj = getObject(Constants.POLICYOBJECTGROUP, id);
        if (obj == null) {
            obj = getPolicyObjectGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NSGatewaysFetcher getNSGatewaysFetcherForPolicyObjectGroupId(String id) throws RestException {
        PolicyObjectGroup obj = getObject(Constants.POLICYOBJECTGROUP, id);
        if (obj == null) {
            obj = getPolicyObjectGroupById(id);
        }

        if (obj != null) {
            NSGatewaysFetcher fetcher = obj.getNSGateways();
            return addFetcher(Constants.NSGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyObjectGroupId(String id) throws RestException {
        PolicyObjectGroup obj = getObject(Constants.POLICYOBJECTGROUP, id);
        if (obj == null) {
            obj = getPolicyObjectGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyObjectGroup> getPolicyObjectGroupsForFetcherId(String id) throws RestException {
        PolicyObjectGroupsFetcher fetcher = getPolicyObjectGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYOBJECTGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyObjectGroup>();
    }

    public static PolicyObjectGroupsFetcher getPolicyObjectGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYOBJECTGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (PolicyObjectGroupsFetcher) fetcher;
        }
        if ((fetcher = getPolicyObjectGroupsFetcherForEnterpriseId(id)) != null) {
            return (PolicyObjectGroupsFetcher) addFetcher(Constants.POLICYOBJECTGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPolicyObjectGroupsFetcherForMeId(id)) != null) {
            return (PolicyObjectGroupsFetcher) addFetcher(Constants.POLICYOBJECTGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyObjectGroup> getAllPolicyObjectGroups() throws RestException {
        java.util.List<PolicyObjectGroup> allObjs = new ArrayList<PolicyObjectGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyObjectGroupsFetcher fetcher = getPolicyObjectGroupsFetcherForMeId(session.getId());
            java.util.List<PolicyObjectGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<PolicyObjectGroupsFetcher> getAllPolicyObjectGroupsFetchers() throws RestException {
        java.util.List<PolicyObjectGroupsFetcher> allObjs = new ArrayList<PolicyObjectGroupsFetcher>();
        return allObjs;
    }
    public static PolicyStatement getPolicyStatementById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PolicyStatement obj = null;
            obj = new PolicyStatement();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.POLICYSTATEMENT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPolicyStatementId(String id) throws RestException {
        PolicyStatement obj = getObject(Constants.POLICYSTATEMENT, id);
        if (obj == null) {
            obj = getPolicyStatementById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPolicyStatementId(String id) throws RestException {
        PolicyStatement obj = getObject(Constants.POLICYSTATEMENT, id);
        if (obj == null) {
            obj = getPolicyStatementById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPolicyStatementId(String id) throws RestException {
        PolicyStatement obj = getObject(Constants.POLICYSTATEMENT, id);
        if (obj == null) {
            obj = getPolicyStatementById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyEntriesFetcher getPolicyEntriesFetcherForPolicyStatementId(String id) throws RestException {
        PolicyStatement obj = getObject(Constants.POLICYSTATEMENT, id);
        if (obj == null) {
            obj = getPolicyStatementById(id);
        }

        if (obj != null) {
            PolicyEntriesFetcher fetcher = obj.getPolicyEntries();
            return addFetcher(Constants.POLICYENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PolicyStatement> getPolicyStatementsForFetcherId(String id) throws RestException {
        PolicyStatementsFetcher fetcher = getPolicyStatementsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.POLICYSTATEMENT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PolicyStatement>();
    }

    public static PolicyStatementsFetcher getPolicyStatementsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.POLICYSTATEMENTS_FETCHER, id);
        if (fetcher != null) {
            return (PolicyStatementsFetcher) fetcher;
        }
        if ((fetcher = getPolicyStatementsFetcherForLinkId(id)) != null) {
            return (PolicyStatementsFetcher) addFetcher(Constants.POLICYSTATEMENTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PolicyStatement> getAllPolicyStatements() throws RestException {
        java.util.List<PolicyStatement> allObjs = new ArrayList<PolicyStatement>();

        return allObjs;
    }

    public static java.util.List<PolicyStatementsFetcher> getAllPolicyStatementsFetchers() throws RestException {
        java.util.List<PolicyStatementsFetcher> allObjs = new ArrayList<PolicyStatementsFetcher>();
        return allObjs;
    }
    public static Port getPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Port obj = null;
            obj = new Port();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForPortId(String id) throws RestException {
        Port obj = getObject(Constants.PORT, id);
        if (obj == null) {
            obj = getPortById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Port> getPortsForFetcherId(String id) throws RestException {
        PortsFetcher fetcher = getPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Port>();
    }

    public static PortsFetcher getPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PORTS_FETCHER, id);
        if (fetcher != null) {
            return (PortsFetcher) fetcher;
        }
        if ((fetcher = getPortsFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (PortsFetcher) addFetcher(Constants.PORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPortsFetcherForGatewayId(id)) != null) {
            return (PortsFetcher) addFetcher(Constants.PORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPortsFetcherForNetconfGatewayId(id)) != null) {
            return (PortsFetcher) addFetcher(Constants.PORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getPortsFetcherForRedundancyGroupId(id)) != null) {
            return (PortsFetcher) addFetcher(Constants.PORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Port> getAllPorts() throws RestException {
        java.util.List<Port> allObjs = new ArrayList<Port>();

        return allObjs;
    }

    public static java.util.List<PortsFetcher> getAllPortsFetchers() throws RestException {
        java.util.List<PortsFetcher> allObjs = new ArrayList<PortsFetcher>();
        return allObjs;
    }
    public static NSPortInfo getNSPortInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            NSPortInfo obj = null;
            obj = new NSPortInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.NSPORTINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<NSPortInfo> getNSPortInfosForFetcherId(String id) throws RestException {
        NSPortInfosFetcher fetcher = getNSPortInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.NSPORTINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<NSPortInfo>();
    }

    public static NSPortInfosFetcher getNSPortInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.NSPORTINFOS_FETCHER, id);
        if (fetcher != null) {
            return (NSPortInfosFetcher) fetcher;
        }
        if ((fetcher = getNSPortInfosFetcherForNSGatewayId(id)) != null) {
            return (NSPortInfosFetcher) addFetcher(Constants.NSPORTINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<NSPortInfo> getAllNSPortInfos() throws RestException {
        java.util.List<NSPortInfo> allObjs = new ArrayList<NSPortInfo>();

        return allObjs;
    }

    public static java.util.List<NSPortInfosFetcher> getAllNSPortInfosFetchers() throws RestException {
        java.util.List<NSPortInfosFetcher> allObjs = new ArrayList<NSPortInfosFetcher>();
        return allObjs;
    }
    public static PortMapping getPortMappingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PortMapping obj = null;
            obj = new PortMapping();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PORTMAPPING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<PortMapping> getPortMappingsForFetcherId(String id) throws RestException {
        PortMappingsFetcher fetcher = getPortMappingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PORTMAPPING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PortMapping>();
    }

    public static PortMappingsFetcher getPortMappingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PORTMAPPINGS_FETCHER, id);
        if (fetcher != null) {
            return (PortMappingsFetcher) fetcher;
        }
        if ((fetcher = getPortMappingsFetcherForVPortId(id)) != null) {
            return (PortMappingsFetcher) addFetcher(Constants.PORTMAPPINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PortMapping> getAllPortMappings() throws RestException {
        java.util.List<PortMapping> allObjs = new ArrayList<PortMapping>();

        return allObjs;
    }

    public static java.util.List<PortMappingsFetcher> getAllPortMappingsFetchers() throws RestException {
        java.util.List<PortMappingsFetcher> allObjs = new ArrayList<PortMappingsFetcher>();
        return allObjs;
    }
    public static PortTemplate getPortTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PortTemplate obj = null;
            obj = new PortTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PORTTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPortTemplateId(String id) throws RestException {
        PortTemplate obj = getObject(Constants.PORTTEMPLATE, id);
        if (obj == null) {
            obj = getPortTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPortTemplateId(String id) throws RestException {
        PortTemplate obj = getObject(Constants.PORTTEMPLATE, id);
        if (obj == null) {
            obj = getPortTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPortTemplateId(String id) throws RestException {
        PortTemplate obj = getObject(Constants.PORTTEMPLATE, id);
        if (obj == null) {
            obj = getPortTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANTemplatesFetcher getVLANTemplatesFetcherForPortTemplateId(String id) throws RestException {
        PortTemplate obj = getObject(Constants.PORTTEMPLATE, id);
        if (obj == null) {
            obj = getPortTemplateById(id);
        }

        if (obj != null) {
            VLANTemplatesFetcher fetcher = obj.getVLANTemplates();
            return addFetcher(Constants.VLANTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PortTemplate> getPortTemplatesForFetcherId(String id) throws RestException {
        PortTemplatesFetcher fetcher = getPortTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PORTTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PortTemplate>();
    }

    public static PortTemplatesFetcher getPortTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PORTTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (PortTemplatesFetcher) fetcher;
        }
        if ((fetcher = getPortTemplatesFetcherForGatewayTemplateId(id)) != null) {
            return (PortTemplatesFetcher) addFetcher(Constants.PORTTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PortTemplate> getAllPortTemplates() throws RestException {
        java.util.List<PortTemplate> allObjs = new ArrayList<PortTemplate>();

        return allObjs;
    }

    public static java.util.List<PortTemplatesFetcher> getAllPortTemplatesFetchers() throws RestException {
        java.util.List<PortTemplatesFetcher> allObjs = new ArrayList<PortTemplatesFetcher>();
        return allObjs;
    }
    public static ProxyARPFilter getProxyARPFilterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ProxyARPFilter obj = null;
            obj = new ProxyARPFilter();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PROXYARPFILTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ProxyARPFilter> getProxyARPFiltersForFetcherId(String id) throws RestException {
        ProxyARPFiltersFetcher fetcher = getProxyARPFiltersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PROXYARPFILTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ProxyARPFilter>();
    }

    public static ProxyARPFiltersFetcher getProxyARPFiltersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PROXYARPFILTERS_FETCHER, id);
        if (fetcher != null) {
            return (ProxyARPFiltersFetcher) fetcher;
        }
        if ((fetcher = getProxyARPFiltersFetcherForL2DomainId(id)) != null) {
            return (ProxyARPFiltersFetcher) addFetcher(Constants.PROXYARPFILTERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getProxyARPFiltersFetcherForSubnetId(id)) != null) {
            return (ProxyARPFiltersFetcher) addFetcher(Constants.PROXYARPFILTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ProxyARPFilter> getAllProxyARPFilters() throws RestException {
        java.util.List<ProxyARPFilter> allObjs = new ArrayList<ProxyARPFilter>();

        return allObjs;
    }

    public static java.util.List<ProxyARPFiltersFetcher> getAllProxyARPFiltersFetchers() throws RestException {
        java.util.List<ProxyARPFiltersFetcher> allObjs = new ArrayList<ProxyARPFiltersFetcher>();
        return allObjs;
    }
    public static PSNATPool getPSNATPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PSNATPool obj = null;
            obj = new PSNATPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PSNATPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPSNATPoolId(String id) throws RestException {
        PSNATPool obj = getObject(Constants.PSNATPOOL, id);
        if (obj == null) {
            obj = getPSNATPoolById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPSNATPoolId(String id) throws RestException {
        PSNATPool obj = getObject(Constants.PSNATPOOL, id);
        if (obj == null) {
            obj = getPSNATPoolById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPSNATPoolId(String id) throws RestException {
        PSNATPool obj = getObject(Constants.PSNATPOOL, id);
        if (obj == null) {
            obj = getPSNATPoolById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PSPATMapsFetcher getPSPATMapsFetcherForPSNATPoolId(String id) throws RestException {
        PSNATPool obj = getObject(Constants.PSNATPOOL, id);
        if (obj == null) {
            obj = getPSNATPoolById(id);
        }

        if (obj != null) {
            PSPATMapsFetcher fetcher = obj.getPSPATMaps();
            return addFetcher(Constants.PSPATMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PTranslationMapsFetcher getPTranslationMapsFetcherForPSNATPoolId(String id) throws RestException {
        PSNATPool obj = getObject(Constants.PSNATPOOL, id);
        if (obj == null) {
            obj = getPSNATPoolById(id);
        }

        if (obj != null) {
            PTranslationMapsFetcher fetcher = obj.getPTranslationMaps();
            return addFetcher(Constants.PTRANSLATIONMAPS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PSNATPool> getPSNATPoolsForFetcherId(String id) throws RestException {
        PSNATPoolsFetcher fetcher = getPSNATPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PSNATPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PSNATPool>();
    }

    public static PSNATPoolsFetcher getPSNATPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PSNATPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (PSNATPoolsFetcher) fetcher;
        }
        if ((fetcher = getPSNATPoolsFetcherForLinkId(id)) != null) {
            return (PSNATPoolsFetcher) addFetcher(Constants.PSNATPOOLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PSNATPool> getAllPSNATPools() throws RestException {
        java.util.List<PSNATPool> allObjs = new ArrayList<PSNATPool>();

        return allObjs;
    }

    public static java.util.List<PSNATPoolsFetcher> getAllPSNATPoolsFetchers() throws RestException {
        java.util.List<PSNATPoolsFetcher> allObjs = new ArrayList<PSNATPoolsFetcher>();
        return allObjs;
    }
    public static PSPATMap getPSPATMapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PSPATMap obj = null;
            obj = new PSPATMap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PSPATMAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPSPATMapId(String id) throws RestException {
        PSPATMap obj = getObject(Constants.PSPATMAP, id);
        if (obj == null) {
            obj = getPSPATMapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPSPATMapId(String id) throws RestException {
        PSPATMap obj = getObject(Constants.PSPATMAP, id);
        if (obj == null) {
            obj = getPSPATMapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPSPATMapId(String id) throws RestException {
        PSPATMap obj = getObject(Constants.PSPATMAP, id);
        if (obj == null) {
            obj = getPSPATMapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PSPATMap> getPSPATMapsForFetcherId(String id) throws RestException {
        PSPATMapsFetcher fetcher = getPSPATMapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PSPATMAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PSPATMap>();
    }

    public static PSPATMapsFetcher getPSPATMapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PSPATMAPS_FETCHER, id);
        if (fetcher != null) {
            return (PSPATMapsFetcher) fetcher;
        }
        if ((fetcher = getPSPATMapsFetcherForPSNATPoolId(id)) != null) {
            return (PSPATMapsFetcher) addFetcher(Constants.PSPATMAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PSPATMap> getAllPSPATMaps() throws RestException {
        java.util.List<PSPATMap> allObjs = new ArrayList<PSPATMap>();

        return allObjs;
    }

    public static java.util.List<PSPATMapsFetcher> getAllPSPATMapsFetchers() throws RestException {
        java.util.List<PSPATMapsFetcher> allObjs = new ArrayList<PSPATMapsFetcher>();
        return allObjs;
    }
    public static PTranslationMap getPTranslationMapById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PTranslationMap obj = null;
            obj = new PTranslationMap();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PTRANSLATIONMAP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPTranslationMapId(String id) throws RestException {
        PTranslationMap obj = getObject(Constants.PTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getPTranslationMapById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPTranslationMapId(String id) throws RestException {
        PTranslationMap obj = getObject(Constants.PTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getPTranslationMapById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPTranslationMapId(String id) throws RestException {
        PTranslationMap obj = getObject(Constants.PTRANSLATIONMAP, id);
        if (obj == null) {
            obj = getPTranslationMapById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PTranslationMap> getPTranslationMapsForFetcherId(String id) throws RestException {
        PTranslationMapsFetcher fetcher = getPTranslationMapsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PTRANSLATIONMAP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PTranslationMap>();
    }

    public static PTranslationMapsFetcher getPTranslationMapsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PTRANSLATIONMAPS_FETCHER, id);
        if (fetcher != null) {
            return (PTranslationMapsFetcher) fetcher;
        }
        if ((fetcher = getPTranslationMapsFetcherForPSNATPoolId(id)) != null) {
            return (PTranslationMapsFetcher) addFetcher(Constants.PTRANSLATIONMAPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PTranslationMap> getAllPTranslationMaps() throws RestException {
        java.util.List<PTranslationMap> allObjs = new ArrayList<PTranslationMap>();

        return allObjs;
    }

    public static java.util.List<PTranslationMapsFetcher> getAllPTranslationMapsFetchers() throws RestException {
        java.util.List<PTranslationMapsFetcher> allObjs = new ArrayList<PTranslationMapsFetcher>();
        return allObjs;
    }
    public static PublicNetworkMacro getPublicNetworkMacroById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            PublicNetworkMacro obj = null;
            obj = new PublicNetworkMacro();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.PUBLICNETWORKMACRO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForPublicNetworkMacroId(String id) throws RestException {
        PublicNetworkMacro obj = getObject(Constants.PUBLICNETWORKMACRO, id);
        if (obj == null) {
            obj = getPublicNetworkMacroById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForPublicNetworkMacroId(String id) throws RestException {
        PublicNetworkMacro obj = getObject(Constants.PUBLICNETWORKMACRO, id);
        if (obj == null) {
            obj = getPublicNetworkMacroById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForPublicNetworkMacroId(String id) throws RestException {
        PublicNetworkMacro obj = getObject(Constants.PUBLICNETWORKMACRO, id);
        if (obj == null) {
            obj = getPublicNetworkMacroById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForPublicNetworkMacroId(String id) throws RestException {
        PublicNetworkMacro obj = getObject(Constants.PUBLICNETWORKMACRO, id);
        if (obj == null) {
            obj = getPublicNetworkMacroById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<PublicNetworkMacro> getPublicNetworkMacrosForFetcherId(String id) throws RestException {
        PublicNetworkMacrosFetcher fetcher = getPublicNetworkMacrosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.PUBLICNETWORKMACRO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<PublicNetworkMacro>();
    }

    public static PublicNetworkMacrosFetcher getPublicNetworkMacrosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.PUBLICNETWORKMACROS_FETCHER, id);
        if (fetcher != null) {
            return (PublicNetworkMacrosFetcher) fetcher;
        }
        if ((fetcher = getPublicNetworkMacrosFetcherForEnterpriseId(id)) != null) {
            return (PublicNetworkMacrosFetcher) addFetcher(Constants.PUBLICNETWORKMACROS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<PublicNetworkMacro> getAllPublicNetworkMacros() throws RestException {
        java.util.List<PublicNetworkMacro> allObjs = new ArrayList<PublicNetworkMacro>();

        return allObjs;
    }

    public static java.util.List<PublicNetworkMacrosFetcher> getAllPublicNetworkMacrosFetchers() throws RestException {
        java.util.List<PublicNetworkMacrosFetcher> allObjs = new ArrayList<PublicNetworkMacrosFetcher>();
        return allObjs;
    }
    public static QOS getQOSById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            QOS obj = null;
            obj = new QOS();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.QOS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ContainersFetcher getContainersFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForQOSId(String id) throws RestException {
        QOS obj = getObject(Constants.QOS, id);
        if (obj == null) {
            obj = getQOSById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<QOS> getQOSsForFetcherId(String id) throws RestException {
        QOSsFetcher fetcher = getQOSsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.QOS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<QOS>();
    }

    public static QOSsFetcher getQOSsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.QOSS_FETCHER, id);
        if (fetcher != null) {
            return (QOSsFetcher) fetcher;
        }
        if ((fetcher = getQOSsFetcherForAggregatedDomainId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForBridgeInterfaceId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForDomainId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForDomainTemplateId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForHostInterfaceId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForL2DomainId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForL2DomainTemplateId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForMeId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForPolicyDecisionId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForSubnetId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForSubnetTemplateId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForVPortId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForZoneId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getQOSsFetcherForZoneTemplateId(id)) != null) {
            return (QOSsFetcher) addFetcher(Constants.QOSS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<QOS> getAllQOSs() throws RestException {
        java.util.List<QOS> allObjs = new ArrayList<QOS>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            QOSsFetcher fetcher = getQOSsFetcherForMeId(session.getId());
            java.util.List<QOS> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<QOSsFetcher> getAllQOSsFetchers() throws RestException {
        java.util.List<QOSsFetcher> allObjs = new ArrayList<QOSsFetcher>();
        return allObjs;
    }
    public static QosPolicer getQosPolicerById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            QosPolicer obj = null;
            obj = new QosPolicer();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.QOSPOLICER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForQosPolicerId(String id) throws RestException {
        QosPolicer obj = getObject(Constants.QOSPOLICER, id);
        if (obj == null) {
            obj = getQosPolicerById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForQosPolicerId(String id) throws RestException {
        QosPolicer obj = getObject(Constants.QOSPOLICER, id);
        if (obj == null) {
            obj = getQosPolicerById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForQosPolicerId(String id) throws RestException {
        QosPolicer obj = getObject(Constants.QOSPOLICER, id);
        if (obj == null) {
            obj = getQosPolicerById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<QosPolicer> getQosPolicersForFetcherId(String id) throws RestException {
        QosPolicersFetcher fetcher = getQosPolicersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.QOSPOLICER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<QosPolicer>();
    }

    public static QosPolicersFetcher getQosPolicersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.QOSPOLICERS_FETCHER, id);
        if (fetcher != null) {
            return (QosPolicersFetcher) fetcher;
        }
        if ((fetcher = getQosPolicersFetcherForMeId(id)) != null) {
            return (QosPolicersFetcher) addFetcher(Constants.QOSPOLICERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<QosPolicer> getAllQosPolicers() throws RestException {
        java.util.List<QosPolicer> allObjs = new ArrayList<QosPolicer>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            QosPolicersFetcher fetcher = getQosPolicersFetcherForMeId(session.getId());
            java.util.List<QosPolicer> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<QosPolicersFetcher> getAllQosPolicersFetchers() throws RestException {
        java.util.List<QosPolicersFetcher> allObjs = new ArrayList<QosPolicersFetcher>();
        return allObjs;
    }
    public static RateLimiter getRateLimiterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RateLimiter obj = null;
            obj = new RateLimiter();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.RATELIMITER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRateLimiterId(String id) throws RestException {
        RateLimiter obj = getObject(Constants.RATELIMITER, id);
        if (obj == null) {
            obj = getRateLimiterById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRateLimiterId(String id) throws RestException {
        RateLimiter obj = getObject(Constants.RATELIMITER, id);
        if (obj == null) {
            obj = getRateLimiterById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRateLimiterId(String id) throws RestException {
        RateLimiter obj = getObject(Constants.RATELIMITER, id);
        if (obj == null) {
            obj = getRateLimiterById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RateLimiter> getRateLimitersForFetcherId(String id) throws RestException {
        RateLimitersFetcher fetcher = getRateLimitersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.RATELIMITER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RateLimiter>();
    }

    public static RateLimitersFetcher getRateLimitersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.RATELIMITERS_FETCHER, id);
        if (fetcher != null) {
            return (RateLimitersFetcher) fetcher;
        }
        if ((fetcher = getRateLimitersFetcherForEnterpriseId(id)) != null) {
            return (RateLimitersFetcher) addFetcher(Constants.RATELIMITERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRateLimitersFetcherForMeId(id)) != null) {
            return (RateLimitersFetcher) addFetcher(Constants.RATELIMITERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RateLimiter> getAllRateLimiters() throws RestException {
        java.util.List<RateLimiter> allObjs = new ArrayList<RateLimiter>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RateLimitersFetcher fetcher = getRateLimitersFetcherForMeId(session.getId());
            java.util.List<RateLimiter> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RateLimitersFetcher> getAllRateLimitersFetchers() throws RestException {
        java.util.List<RateLimitersFetcher> allObjs = new ArrayList<RateLimitersFetcher>();
        return allObjs;
    }
    public static RedirectionTarget getRedirectionTargetById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedirectionTarget obj = null;
            obj = new RedirectionTarget();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.REDIRECTIONTARGET, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualIPsFetcher getVirtualIPsFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            VirtualIPsFetcher fetcher = obj.getVirtualIPs();
            return addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForRedirectionTargetId(String id) throws RestException {
        RedirectionTarget obj = getObject(Constants.REDIRECTIONTARGET, id);
        if (obj == null) {
            obj = getRedirectionTargetById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RedirectionTarget> getRedirectionTargetsForFetcherId(String id) throws RestException {
        RedirectionTargetsFetcher fetcher = getRedirectionTargetsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.REDIRECTIONTARGET);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RedirectionTarget>();
    }

    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.REDIRECTIONTARGETS_FETCHER, id);
        if (fetcher != null) {
            return (RedirectionTargetsFetcher) fetcher;
        }
        if ((fetcher = getRedirectionTargetsFetcherForAggregatedDomainId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForBridgeInterfaceId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForContainerInterfaceId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForDomainId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForHostInterfaceId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForL2DomainId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForMeId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForVMInterfaceId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetsFetcherForVPortId(id)) != null) {
            return (RedirectionTargetsFetcher) addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RedirectionTarget> getAllRedirectionTargets() throws RestException {
        java.util.List<RedirectionTarget> allObjs = new ArrayList<RedirectionTarget>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedirectionTargetsFetcher fetcher = getRedirectionTargetsFetcherForMeId(session.getId());
            java.util.List<RedirectionTarget> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RedirectionTargetsFetcher> getAllRedirectionTargetsFetchers() throws RestException {
        java.util.List<RedirectionTargetsFetcher> allObjs = new ArrayList<RedirectionTargetsFetcher>();
        return allObjs;
    }
    public static RedirectionTargetTemplate getRedirectionTargetTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedirectionTargetTemplate obj = null;
            obj = new RedirectionTargetTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.REDIRECTIONTARGETTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForRedirectionTargetTemplateId(String id) throws RestException {
        RedirectionTargetTemplate obj = getObject(Constants.REDIRECTIONTARGETTEMPLATE, id);
        if (obj == null) {
            obj = getRedirectionTargetTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRedirectionTargetTemplateId(String id) throws RestException {
        RedirectionTargetTemplate obj = getObject(Constants.REDIRECTIONTARGETTEMPLATE, id);
        if (obj == null) {
            obj = getRedirectionTargetTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRedirectionTargetTemplateId(String id) throws RestException {
        RedirectionTargetTemplate obj = getObject(Constants.REDIRECTIONTARGETTEMPLATE, id);
        if (obj == null) {
            obj = getRedirectionTargetTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRedirectionTargetTemplateId(String id) throws RestException {
        RedirectionTargetTemplate obj = getObject(Constants.REDIRECTIONTARGETTEMPLATE, id);
        if (obj == null) {
            obj = getRedirectionTargetTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RedirectionTargetTemplate> getRedirectionTargetTemplatesForFetcherId(String id) throws RestException {
        RedirectionTargetTemplatesFetcher fetcher = getRedirectionTargetTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.REDIRECTIONTARGETTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RedirectionTargetTemplate>();
    }

    public static RedirectionTargetTemplatesFetcher getRedirectionTargetTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.REDIRECTIONTARGETTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (RedirectionTargetTemplatesFetcher) fetcher;
        }
        if ((fetcher = getRedirectionTargetTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (RedirectionTargetTemplatesFetcher) addFetcher(Constants.REDIRECTIONTARGETTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedirectionTargetTemplatesFetcherForL2DomainTemplateId(id)) != null) {
            return (RedirectionTargetTemplatesFetcher) addFetcher(Constants.REDIRECTIONTARGETTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RedirectionTargetTemplate> getAllRedirectionTargetTemplates() throws RestException {
        java.util.List<RedirectionTargetTemplate> allObjs = new ArrayList<RedirectionTargetTemplate>();

        return allObjs;
    }

    public static java.util.List<RedirectionTargetTemplatesFetcher> getAllRedirectionTargetTemplatesFetchers() throws RestException {
        java.util.List<RedirectionTargetTemplatesFetcher> allObjs = new ArrayList<RedirectionTargetTemplatesFetcher>();
        return allObjs;
    }
    public static RedundancyGroup getRedundancyGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedundancyGroup obj = null;
            obj = new RedundancyGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.REDUNDANCYGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressProfilesFetcher getEgressProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            EgressProfilesFetcher fetcher = obj.getEgressProfiles();
            return addFetcher(Constants.EGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewaysFetcher getGatewaysFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            GatewaysFetcher fetcher = obj.getGateways();
            return addFetcher(Constants.GATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GatewayRedundantPortsFetcher getGatewayRedundantPortsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            GatewayRedundantPortsFetcher fetcher = obj.getGatewayRedundantPorts();
            return addFetcher(Constants.GATEWAYREDUNDANTPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressProfilesFetcher getIngressProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            IngressProfilesFetcher fetcher = obj.getIngressProfiles();
            return addFetcher(Constants.INGRESSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPFilterProfilesFetcher getIPFilterProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            IPFilterProfilesFetcher fetcher = obj.getIPFilterProfiles();
            return addFetcher(Constants.IPFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPv6FilterProfilesFetcher getIPv6FilterProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            IPv6FilterProfilesFetcher fetcher = obj.getIPv6FilterProfiles();
            return addFetcher(Constants.IPV6FILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static L2DomainsFetcher getL2DomainsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            L2DomainsFetcher fetcher = obj.getL2Domains();
            return addFetcher(Constants.L2DOMAINS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MACFilterProfilesFetcher getMACFilterProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            MACFilterProfilesFetcher fetcher = obj.getMACFilterProfiles();
            return addFetcher(Constants.MACFILTERPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortsFetcher getPortsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            PortsFetcher fetcher = obj.getPorts();
            return addFetcher(Constants.PORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            SAPEgressQoSProfilesFetcher fetcher = obj.getSAPEgressQoSProfiles();
            return addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            SAPIngressQoSProfilesFetcher fetcher = obj.getSAPIngressQoSProfiles();
            return addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WANServicesFetcher getWANServicesFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            WANServicesFetcher fetcher = obj.getWANServices();
            return addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VsgRedundantPortsFetcher getVsgRedundantPortsFetcherForRedundancyGroupId(String id) throws RestException {
        RedundancyGroup obj = getObject(Constants.REDUNDANCYGROUP, id);
        if (obj == null) {
            obj = getRedundancyGroupById(id);
        }

        if (obj != null) {
            VsgRedundantPortsFetcher fetcher = obj.getVsgRedundantPorts();
            return addFetcher(Constants.VSGREDUNDANTPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RedundancyGroup> getRedundancyGroupsForFetcherId(String id) throws RestException {
        RedundancyGroupsFetcher fetcher = getRedundancyGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.REDUNDANCYGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RedundancyGroup>();
    }

    public static RedundancyGroupsFetcher getRedundancyGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.REDUNDANCYGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (RedundancyGroupsFetcher) fetcher;
        }
        if ((fetcher = getRedundancyGroupsFetcherForEnterpriseId(id)) != null) {
            return (RedundancyGroupsFetcher) addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedundancyGroupsFetcherForL2DomainId(id)) != null) {
            return (RedundancyGroupsFetcher) addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRedundancyGroupsFetcherForMeId(id)) != null) {
            return (RedundancyGroupsFetcher) addFetcher(Constants.REDUNDANCYGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RedundancyGroup> getAllRedundancyGroups() throws RestException {
        java.util.List<RedundancyGroup> allObjs = new ArrayList<RedundancyGroup>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RedundancyGroupsFetcher fetcher = getRedundancyGroupsFetcherForMeId(session.getId());
            java.util.List<RedundancyGroup> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RedundancyGroupsFetcher> getAllRedundancyGroupsFetchers() throws RestException {
        java.util.List<RedundancyGroupsFetcher> allObjs = new ArrayList<RedundancyGroupsFetcher>();
        return allObjs;
    }
    public static RemoteVrsInfo getRemoteVrsInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RemoteVrsInfo obj = null;
            obj = new RemoteVrsInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.REMOTEVRSINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRemoteVrsInfoId(String id) throws RestException {
        RemoteVrsInfo obj = getObject(Constants.REMOTEVRSINFO, id);
        if (obj == null) {
            obj = getRemoteVrsInfoById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRemoteVrsInfoId(String id) throws RestException {
        RemoteVrsInfo obj = getObject(Constants.REMOTEVRSINFO, id);
        if (obj == null) {
            obj = getRemoteVrsInfoById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRemoteVrsInfoId(String id) throws RestException {
        RemoteVrsInfo obj = getObject(Constants.REMOTEVRSINFO, id);
        if (obj == null) {
            obj = getRemoteVrsInfoById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RemoteVrsInfo> getRemoteVrsInfosForFetcherId(String id) throws RestException {
        RemoteVrsInfosFetcher fetcher = getRemoteVrsInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.REMOTEVRSINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RemoteVrsInfo>();
    }

    public static RemoteVrsInfosFetcher getRemoteVrsInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.REMOTEVRSINFOS_FETCHER, id);
        if (fetcher != null) {
            return (RemoteVrsInfosFetcher) fetcher;
        }
        if ((fetcher = getRemoteVrsInfosFetcherForMeId(id)) != null) {
            return (RemoteVrsInfosFetcher) addFetcher(Constants.REMOTEVRSINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RemoteVrsInfo> getAllRemoteVrsInfos() throws RestException {
        java.util.List<RemoteVrsInfo> allObjs = new ArrayList<RemoteVrsInfo>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RemoteVrsInfosFetcher fetcher = getRemoteVrsInfosFetcherForMeId(session.getId());
            java.util.List<RemoteVrsInfo> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RemoteVrsInfosFetcher> getAllRemoteVrsInfosFetchers() throws RestException {
        java.util.List<RemoteVrsInfosFetcher> allObjs = new ArrayList<RemoteVrsInfosFetcher>();
        return allObjs;
    }
    public static VMResync getVMResyncById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VMResync obj = null;
            obj = new VMResync();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VMRESYNC, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVMResyncId(String id) throws RestException {
        VMResync obj = getObject(Constants.VMRESYNC, id);
        if (obj == null) {
            obj = getVMResyncById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVMResyncId(String id) throws RestException {
        VMResync obj = getObject(Constants.VMRESYNC, id);
        if (obj == null) {
            obj = getVMResyncById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVMResyncId(String id) throws RestException {
        VMResync obj = getObject(Constants.VMRESYNC, id);
        if (obj == null) {
            obj = getVMResyncById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VMResync> getVMResyncsForFetcherId(String id) throws RestException {
        VMResyncsFetcher fetcher = getVMResyncsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VMRESYNC);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VMResync>();
    }

    public static VMResyncsFetcher getVMResyncsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VMRESYNCS_FETCHER, id);
        if (fetcher != null) {
            return (VMResyncsFetcher) fetcher;
        }
        if ((fetcher = getVMResyncsFetcherForSubnetId(id)) != null) {
            return (VMResyncsFetcher) addFetcher(Constants.VMRESYNCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMResyncsFetcherForVMId(id)) != null) {
            return (VMResyncsFetcher) addFetcher(Constants.VMRESYNCS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VMResync> getAllVMResyncs() throws RestException {
        java.util.List<VMResync> allObjs = new ArrayList<VMResync>();

        return allObjs;
    }

    public static java.util.List<VMResyncsFetcher> getAllVMResyncsFetchers() throws RestException {
        java.util.List<VMResyncsFetcher> allObjs = new ArrayList<VMResyncsFetcher>();
        return allObjs;
    }
    public static Role getRoleById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Role obj = null;
            obj = new Role();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ROLE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRoleId(String id) throws RestException {
        Role obj = getObject(Constants.ROLE, id);
        if (obj == null) {
            obj = getRoleById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRoleId(String id) throws RestException {
        Role obj = getObject(Constants.ROLE, id);
        if (obj == null) {
            obj = getRoleById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRoleId(String id) throws RestException {
        Role obj = getObject(Constants.ROLE, id);
        if (obj == null) {
            obj = getRoleById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RoleentriesFetcher getRoleentriesFetcherForRoleId(String id) throws RestException {
        Role obj = getObject(Constants.ROLE, id);
        if (obj == null) {
            obj = getRoleById(id);
        }

        if (obj != null) {
            RoleentriesFetcher fetcher = obj.getRoleentries();
            return addFetcher(Constants.ROLEENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Role> getRolesForFetcherId(String id) throws RestException {
        RolesFetcher fetcher = getRolesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ROLE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Role>();
    }

    public static RolesFetcher getRolesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ROLES_FETCHER, id);
        if (fetcher != null) {
            return (RolesFetcher) fetcher;
        }
        if ((fetcher = getRolesFetcherForEnterpriseId(id)) != null) {
            return (RolesFetcher) addFetcher(Constants.ROLES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRolesFetcherForMeId(id)) != null) {
            return (RolesFetcher) addFetcher(Constants.ROLES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Role> getAllRoles() throws RestException {
        java.util.List<Role> allObjs = new ArrayList<Role>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RolesFetcher fetcher = getRolesFetcherForMeId(session.getId());
            java.util.List<Role> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RolesFetcher> getAllRolesFetchers() throws RestException {
        java.util.List<RolesFetcher> allObjs = new ArrayList<RolesFetcher>();
        return allObjs;
    }
    public static Roleentry getRoleentryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Roleentry obj = null;
            obj = new Roleentry();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ROLEENTRY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRoleentryId(String id) throws RestException {
        Roleentry obj = getObject(Constants.ROLEENTRY, id);
        if (obj == null) {
            obj = getRoleentryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRoleentryId(String id) throws RestException {
        Roleentry obj = getObject(Constants.ROLEENTRY, id);
        if (obj == null) {
            obj = getRoleentryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRoleentryId(String id) throws RestException {
        Roleentry obj = getObject(Constants.ROLEENTRY, id);
        if (obj == null) {
            obj = getRoleentryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Roleentry> getRoleentriesForFetcherId(String id) throws RestException {
        RoleentriesFetcher fetcher = getRoleentriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ROLEENTRY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Roleentry>();
    }

    public static RoleentriesFetcher getRoleentriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ROLEENTRIES_FETCHER, id);
        if (fetcher != null) {
            return (RoleentriesFetcher) fetcher;
        }
        if ((fetcher = getRoleentriesFetcherForRoleId(id)) != null) {
            return (RoleentriesFetcher) addFetcher(Constants.ROLEENTRIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Roleentry> getAllRoleentries() throws RestException {
        java.util.List<Roleentry> allObjs = new ArrayList<Roleentry>();

        return allObjs;
    }

    public static java.util.List<RoleentriesFetcher> getAllRoleentriesFetchers() throws RestException {
        java.util.List<RoleentriesFetcher> allObjs = new ArrayList<RoleentriesFetcher>();
        return allObjs;
    }
    public static RoutingPolicy getRoutingPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RoutingPolicy obj = null;
            obj = new RoutingPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ROUTINGPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRoutingPolicyId(String id) throws RestException {
        RoutingPolicy obj = getObject(Constants.ROUTINGPOLICY, id);
        if (obj == null) {
            obj = getRoutingPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRoutingPolicyId(String id) throws RestException {
        RoutingPolicy obj = getObject(Constants.ROUTINGPOLICY, id);
        if (obj == null) {
            obj = getRoutingPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRoutingPolicyId(String id) throws RestException {
        RoutingPolicy obj = getObject(Constants.ROUTINGPOLICY, id);
        if (obj == null) {
            obj = getRoutingPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RoutingPolicy> getRoutingPoliciesForFetcherId(String id) throws RestException {
        RoutingPoliciesFetcher fetcher = getRoutingPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ROUTINGPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RoutingPolicy>();
    }

    public static RoutingPoliciesFetcher getRoutingPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ROUTINGPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (RoutingPoliciesFetcher) fetcher;
        }
        if ((fetcher = getRoutingPoliciesFetcherForAggregatedDomainId(id)) != null) {
            return (RoutingPoliciesFetcher) addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRoutingPoliciesFetcherForDomainId(id)) != null) {
            return (RoutingPoliciesFetcher) addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRoutingPoliciesFetcherForEnterpriseId(id)) != null) {
            return (RoutingPoliciesFetcher) addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRoutingPoliciesFetcherForGatewayId(id)) != null) {
            return (RoutingPoliciesFetcher) addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getRoutingPoliciesFetcherForMeId(id)) != null) {
            return (RoutingPoliciesFetcher) addFetcher(Constants.ROUTINGPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RoutingPolicy> getAllRoutingPolicies() throws RestException {
        java.util.List<RoutingPolicy> allObjs = new ArrayList<RoutingPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            RoutingPoliciesFetcher fetcher = getRoutingPoliciesFetcherForMeId(session.getId());
            java.util.List<RoutingPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<RoutingPoliciesFetcher> getAllRoutingPoliciesFetchers() throws RestException {
        java.util.List<RoutingPoliciesFetcher> allObjs = new ArrayList<RoutingPoliciesFetcher>();
        return allObjs;
    }
    public static RoutingPolicyBinding getRoutingPolicyBindingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            RoutingPolicyBinding obj = null;
            obj = new RoutingPolicyBinding();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ROUTINGPOLICYBINDING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForRoutingPolicyBindingId(String id) throws RestException {
        RoutingPolicyBinding obj = getObject(Constants.ROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForRoutingPolicyBindingId(String id) throws RestException {
        RoutingPolicyBinding obj = getObject(Constants.ROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForRoutingPolicyBindingId(String id) throws RestException {
        RoutingPolicyBinding obj = getObject(Constants.ROUTINGPOLICYBINDING, id);
        if (obj == null) {
            obj = getRoutingPolicyBindingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<RoutingPolicyBinding> getRoutingPolicyBindingsForFetcherId(String id) throws RestException {
        RoutingPolicyBindingsFetcher fetcher = getRoutingPolicyBindingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ROUTINGPOLICYBINDING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<RoutingPolicyBinding>();
    }

    public static RoutingPolicyBindingsFetcher getRoutingPolicyBindingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ROUTINGPOLICYBINDINGS_FETCHER, id);
        if (fetcher != null) {
            return (RoutingPolicyBindingsFetcher) fetcher;
        }
        if ((fetcher = getRoutingPolicyBindingsFetcherForAggregatedDomainId(id)) != null) {
            return (RoutingPolicyBindingsFetcher) addFetcher(Constants.ROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getRoutingPolicyBindingsFetcherForDomainId(id)) != null) {
            return (RoutingPolicyBindingsFetcher) addFetcher(Constants.ROUTINGPOLICYBINDINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<RoutingPolicyBinding> getAllRoutingPolicyBindings() throws RestException {
        java.util.List<RoutingPolicyBinding> allObjs = new ArrayList<RoutingPolicyBinding>();

        return allObjs;
    }

    public static java.util.List<RoutingPolicyBindingsFetcher> getAllRoutingPolicyBindingsFetchers() throws RestException {
        java.util.List<RoutingPolicyBindingsFetcher> allObjs = new ArrayList<RoutingPolicyBindingsFetcher>();
        return allObjs;
    }
    public static SaaSApplicationGroup getSaaSApplicationGroupById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SaaSApplicationGroup obj = null;
            obj = new SaaSApplicationGroup();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SAASAPPLICATIONGROUP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSaaSApplicationGroupId(String id) throws RestException {
        SaaSApplicationGroup obj = getObject(Constants.SAASAPPLICATIONGROUP, id);
        if (obj == null) {
            obj = getSaaSApplicationGroupById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSaaSApplicationGroupId(String id) throws RestException {
        SaaSApplicationGroup obj = getObject(Constants.SAASAPPLICATIONGROUP, id);
        if (obj == null) {
            obj = getSaaSApplicationGroupById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSaaSApplicationGroupId(String id) throws RestException {
        SaaSApplicationGroup obj = getObject(Constants.SAASAPPLICATIONGROUP, id);
        if (obj == null) {
            obj = getSaaSApplicationGroupById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SaaSApplicationTypesFetcher getSaaSApplicationTypesFetcherForSaaSApplicationGroupId(String id) throws RestException {
        SaaSApplicationGroup obj = getObject(Constants.SAASAPPLICATIONGROUP, id);
        if (obj == null) {
            obj = getSaaSApplicationGroupById(id);
        }

        if (obj != null) {
            SaaSApplicationTypesFetcher fetcher = obj.getSaaSApplicationTypes();
            return addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SaaSApplicationGroup> getSaaSApplicationGroupsForFetcherId(String id) throws RestException {
        SaaSApplicationGroupsFetcher fetcher = getSaaSApplicationGroupsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SAASAPPLICATIONGROUP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SaaSApplicationGroup>();
    }

    public static SaaSApplicationGroupsFetcher getSaaSApplicationGroupsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SAASAPPLICATIONGROUPS_FETCHER, id);
        if (fetcher != null) {
            return (SaaSApplicationGroupsFetcher) fetcher;
        }
        if ((fetcher = getSaaSApplicationGroupsFetcherForEnterpriseId(id)) != null) {
            return (SaaSApplicationGroupsFetcher) addFetcher(Constants.SAASAPPLICATIONGROUPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SaaSApplicationGroup> getAllSaaSApplicationGroups() throws RestException {
        java.util.List<SaaSApplicationGroup> allObjs = new ArrayList<SaaSApplicationGroup>();

        return allObjs;
    }

    public static java.util.List<SaaSApplicationGroupsFetcher> getAllSaaSApplicationGroupsFetchers() throws RestException {
        java.util.List<SaaSApplicationGroupsFetcher> allObjs = new ArrayList<SaaSApplicationGroupsFetcher>();
        return allObjs;
    }
    public static SaaSApplicationType getSaaSApplicationTypeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SaaSApplicationType obj = null;
            obj = new SaaSApplicationType();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SAASAPPLICATIONTYPE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EnterpriseNetworksFetcher getEnterpriseNetworksFetcherForSaaSApplicationTypeId(String id) throws RestException {
        SaaSApplicationType obj = getObject(Constants.SAASAPPLICATIONTYPE, id);
        if (obj == null) {
            obj = getSaaSApplicationTypeById(id);
        }

        if (obj != null) {
            EnterpriseNetworksFetcher fetcher = obj.getEnterpriseNetworks();
            return addFetcher(Constants.ENTERPRISENETWORKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSaaSApplicationTypeId(String id) throws RestException {
        SaaSApplicationType obj = getObject(Constants.SAASAPPLICATIONTYPE, id);
        if (obj == null) {
            obj = getSaaSApplicationTypeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSaaSApplicationTypeId(String id) throws RestException {
        SaaSApplicationType obj = getObject(Constants.SAASAPPLICATIONTYPE, id);
        if (obj == null) {
            obj = getSaaSApplicationTypeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSaaSApplicationTypeId(String id) throws RestException {
        SaaSApplicationType obj = getObject(Constants.SAASAPPLICATIONTYPE, id);
        if (obj == null) {
            obj = getSaaSApplicationTypeById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SaaSApplicationType> getSaaSApplicationTypesForFetcherId(String id) throws RestException {
        SaaSApplicationTypesFetcher fetcher = getSaaSApplicationTypesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SAASAPPLICATIONTYPE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SaaSApplicationType>();
    }

    public static SaaSApplicationTypesFetcher getSaaSApplicationTypesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, id);
        if (fetcher != null) {
            return (SaaSApplicationTypesFetcher) fetcher;
        }
        if ((fetcher = getSaaSApplicationTypesFetcherForEnterpriseId(id)) != null) {
            return (SaaSApplicationTypesFetcher) addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSaaSApplicationTypesFetcherForMeId(id)) != null) {
            return (SaaSApplicationTypesFetcher) addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSaaSApplicationTypesFetcherForSaaSApplicationGroupId(id)) != null) {
            return (SaaSApplicationTypesFetcher) addFetcher(Constants.SAASAPPLICATIONTYPES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SaaSApplicationType> getAllSaaSApplicationTypes() throws RestException {
        java.util.List<SaaSApplicationType> allObjs = new ArrayList<SaaSApplicationType>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            SaaSApplicationTypesFetcher fetcher = getSaaSApplicationTypesFetcherForMeId(session.getId());
            java.util.List<SaaSApplicationType> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<SaaSApplicationTypesFetcher> getAllSaaSApplicationTypesFetchers() throws RestException {
        java.util.List<SaaSApplicationTypesFetcher> allObjs = new ArrayList<SaaSApplicationTypesFetcher>();
        return allObjs;
    }
    public static SAPEgressQoSProfile getSAPEgressQoSProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SAPEgressQoSProfile obj = null;
            obj = new SAPEgressQoSProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SAPEGRESSQOSPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSAPEgressQoSProfileId(String id) throws RestException {
        SAPEgressQoSProfile obj = getObject(Constants.SAPEGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPEgressQoSProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSAPEgressQoSProfileId(String id) throws RestException {
        SAPEgressQoSProfile obj = getObject(Constants.SAPEGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPEgressQoSProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSAPEgressQoSProfileId(String id) throws RestException {
        SAPEgressQoSProfile obj = getObject(Constants.SAPEGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPEgressQoSProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SAPEgressQoSProfile> getSAPEgressQoSProfilesForFetcherId(String id) throws RestException {
        SAPEgressQoSProfilesFetcher fetcher = getSAPEgressQoSProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SAPEGRESSQOSPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SAPEgressQoSProfile>();
    }

    public static SAPEgressQoSProfilesFetcher getSAPEgressQoSProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (SAPEgressQoSProfilesFetcher) fetcher;
        }
        if ((fetcher = getSAPEgressQoSProfilesFetcherForEnterpriseId(id)) != null) {
            return (SAPEgressQoSProfilesFetcher) addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPEgressQoSProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (SAPEgressQoSProfilesFetcher) addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPEgressQoSProfilesFetcherForGatewayId(id)) != null) {
            return (SAPEgressQoSProfilesFetcher) addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPEgressQoSProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (SAPEgressQoSProfilesFetcher) addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPEgressQoSProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (SAPEgressQoSProfilesFetcher) addFetcher(Constants.SAPEGRESSQOSPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SAPEgressQoSProfile> getAllSAPEgressQoSProfiles() throws RestException {
        java.util.List<SAPEgressQoSProfile> allObjs = new ArrayList<SAPEgressQoSProfile>();

        return allObjs;
    }

    public static java.util.List<SAPEgressQoSProfilesFetcher> getAllSAPEgressQoSProfilesFetchers() throws RestException {
        java.util.List<SAPEgressQoSProfilesFetcher> allObjs = new ArrayList<SAPEgressQoSProfilesFetcher>();
        return allObjs;
    }
    public static SAPIngressQoSProfile getSAPIngressQoSProfileById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SAPIngressQoSProfile obj = null;
            obj = new SAPIngressQoSProfile();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SAPINGRESSQOSPROFILE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSAPIngressQoSProfileId(String id) throws RestException {
        SAPIngressQoSProfile obj = getObject(Constants.SAPINGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPIngressQoSProfileById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSAPIngressQoSProfileId(String id) throws RestException {
        SAPIngressQoSProfile obj = getObject(Constants.SAPINGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPIngressQoSProfileById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSAPIngressQoSProfileId(String id) throws RestException {
        SAPIngressQoSProfile obj = getObject(Constants.SAPINGRESSQOSPROFILE, id);
        if (obj == null) {
            obj = getSAPIngressQoSProfileById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SAPIngressQoSProfile> getSAPIngressQoSProfilesForFetcherId(String id) throws RestException {
        SAPIngressQoSProfilesFetcher fetcher = getSAPIngressQoSProfilesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SAPINGRESSQOSPROFILE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SAPIngressQoSProfile>();
    }

    public static SAPIngressQoSProfilesFetcher getSAPIngressQoSProfilesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, id);
        if (fetcher != null) {
            return (SAPIngressQoSProfilesFetcher) fetcher;
        }
        if ((fetcher = getSAPIngressQoSProfilesFetcherForEnterpriseId(id)) != null) {
            return (SAPIngressQoSProfilesFetcher) addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPIngressQoSProfilesFetcherForEthernetSegmentGWGroupId(id)) != null) {
            return (SAPIngressQoSProfilesFetcher) addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPIngressQoSProfilesFetcherForGatewayId(id)) != null) {
            return (SAPIngressQoSProfilesFetcher) addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPIngressQoSProfilesFetcherForNetconfGatewayId(id)) != null) {
            return (SAPIngressQoSProfilesFetcher) addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSAPIngressQoSProfilesFetcherForRedundancyGroupId(id)) != null) {
            return (SAPIngressQoSProfilesFetcher) addFetcher(Constants.SAPINGRESSQOSPROFILES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SAPIngressQoSProfile> getAllSAPIngressQoSProfiles() throws RestException {
        java.util.List<SAPIngressQoSProfile> allObjs = new ArrayList<SAPIngressQoSProfile>();

        return allObjs;
    }

    public static java.util.List<SAPIngressQoSProfilesFetcher> getAllSAPIngressQoSProfilesFetchers() throws RestException {
        java.util.List<SAPIngressQoSProfilesFetcher> allObjs = new ArrayList<SAPIngressQoSProfilesFetcher>();
        return allObjs;
    }
    public static ScheduledTestSuite getScheduledTestSuiteById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ScheduledTestSuite obj = null;
            obj = new ScheduledTestSuite();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SCHEDULEDTESTSUITE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ScheduledtestsuiterunsFetcher getScheduledtestsuiterunsFetcherForScheduledTestSuiteId(String id) throws RestException {
        ScheduledTestSuite obj = getObject(Constants.SCHEDULEDTESTSUITE, id);
        if (obj == null) {
            obj = getScheduledTestSuiteById(id);
        }

        if (obj != null) {
            ScheduledtestsuiterunsFetcher fetcher = obj.getScheduledtestsuiteruns();
            return addFetcher(Constants.SCHEDULEDTESTSUITERUNS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestsFetcher getTestsFetcherForScheduledTestSuiteId(String id) throws RestException {
        ScheduledTestSuite obj = getObject(Constants.SCHEDULEDTESTSUITE, id);
        if (obj == null) {
            obj = getScheduledTestSuiteById(id);
        }

        if (obj != null) {
            TestsFetcher fetcher = obj.getTests();
            return addFetcher(Constants.TESTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ScheduledTestSuite> getScheduledTestSuitesForFetcherId(String id) throws RestException {
        ScheduledTestSuitesFetcher fetcher = getScheduledTestSuitesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SCHEDULEDTESTSUITE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ScheduledTestSuite>();
    }

    public static ScheduledTestSuitesFetcher getScheduledTestSuitesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SCHEDULEDTESTSUITES_FETCHER, id);
        if (fetcher != null) {
            return (ScheduledTestSuitesFetcher) fetcher;
        }
        if ((fetcher = getScheduledTestSuitesFetcherForEnterpriseId(id)) != null) {
            return (ScheduledTestSuitesFetcher) addFetcher(Constants.SCHEDULEDTESTSUITES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ScheduledTestSuite> getAllScheduledTestSuites() throws RestException {
        java.util.List<ScheduledTestSuite> allObjs = new ArrayList<ScheduledTestSuite>();

        return allObjs;
    }

    public static java.util.List<ScheduledTestSuitesFetcher> getAllScheduledTestSuitesFetchers() throws RestException {
        java.util.List<ScheduledTestSuitesFetcher> allObjs = new ArrayList<ScheduledTestSuitesFetcher>();
        return allObjs;
    }
    public static Scheduledtestsuiterun getScheduledtestsuiterunById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Scheduledtestsuiterun obj = null;
            obj = new Scheduledtestsuiterun();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SCHEDULEDTESTSUITERUN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static TestRunsFetcher getTestRunsFetcherForScheduledtestsuiterunId(String id) throws RestException {
        Scheduledtestsuiterun obj = getObject(Constants.SCHEDULEDTESTSUITERUN, id);
        if (obj == null) {
            obj = getScheduledtestsuiterunById(id);
        }

        if (obj != null) {
            TestRunsFetcher fetcher = obj.getTestRuns();
            return addFetcher(Constants.TESTRUNS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Scheduledtestsuiterun> getScheduledtestsuiterunsForFetcherId(String id) throws RestException {
        ScheduledtestsuiterunsFetcher fetcher = getScheduledtestsuiterunsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SCHEDULEDTESTSUITERUN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Scheduledtestsuiterun>();
    }

    public static ScheduledtestsuiterunsFetcher getScheduledtestsuiterunsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SCHEDULEDTESTSUITERUNS_FETCHER, id);
        if (fetcher != null) {
            return (ScheduledtestsuiterunsFetcher) fetcher;
        }
        if ((fetcher = getScheduledtestsuiterunsFetcherForScheduledTestSuiteId(id)) != null) {
            return (ScheduledtestsuiterunsFetcher) addFetcher(Constants.SCHEDULEDTESTSUITERUNS_FETCHER, fetcher);
        }
        
        if ((fetcher = getScheduledtestsuiterunsFetcherForVPortId(id)) != null) {
            return (ScheduledtestsuiterunsFetcher) addFetcher(Constants.SCHEDULEDTESTSUITERUNS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Scheduledtestsuiterun> getAllScheduledtestsuiteruns() throws RestException {
        java.util.List<Scheduledtestsuiterun> allObjs = new ArrayList<Scheduledtestsuiterun>();

        return allObjs;
    }

    public static java.util.List<ScheduledtestsuiterunsFetcher> getAllScheduledtestsuiterunsFetchers() throws RestException {
        java.util.List<ScheduledtestsuiterunsFetcher> allObjs = new ArrayList<ScheduledtestsuiterunsFetcher>();
        return allObjs;
    }
    public static WANService getWANServiceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            WANService obj = null;
            obj = new WANService();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.WANSERVICE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForWANServiceId(String id) throws RestException {
        WANService obj = getObject(Constants.WANSERVICE, id);
        if (obj == null) {
            obj = getWANServiceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<WANService> getWANServicesForFetcherId(String id) throws RestException {
        WANServicesFetcher fetcher = getWANServicesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.WANSERVICE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<WANService>();
    }

    public static WANServicesFetcher getWANServicesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.WANSERVICES_FETCHER, id);
        if (fetcher != null) {
            return (WANServicesFetcher) fetcher;
        }
        if ((fetcher = getWANServicesFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (WANServicesFetcher) addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }
        
        if ((fetcher = getWANServicesFetcherForGatewayId(id)) != null) {
            return (WANServicesFetcher) addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }
        
        if ((fetcher = getWANServicesFetcherForNetconfGatewayId(id)) != null) {
            return (WANServicesFetcher) addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }
        
        if ((fetcher = getWANServicesFetcherForRedundancyGroupId(id)) != null) {
            return (WANServicesFetcher) addFetcher(Constants.WANSERVICES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<WANService> getAllWANServices() throws RestException {
        java.util.List<WANService> allObjs = new ArrayList<WANService>();

        return allObjs;
    }

    public static java.util.List<WANServicesFetcher> getAllWANServicesFetchers() throws RestException {
        java.util.List<WANServicesFetcher> allObjs = new ArrayList<WANServicesFetcher>();
        return allObjs;
    }
    public static SharedNetworkResource getSharedNetworkResourceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SharedNetworkResource obj = null;
            obj = new SharedNetworkResource();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SHAREDNETWORKRESOURCE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressRangesFetcher getAddressRangesFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            AddressRangesFetcher fetcher = obj.getAddressRanges();
            return addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATIPEntriesFetcher getPATIPEntriesFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            PATIPEntriesFetcher fetcher = obj.getPATIPEntries();
            return addFetcher(Constants.PATIPENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPNConnectionsFetcher getVPNConnectionsFetcherForSharedNetworkResourceId(String id) throws RestException {
        SharedNetworkResource obj = getObject(Constants.SHAREDNETWORKRESOURCE, id);
        if (obj == null) {
            obj = getSharedNetworkResourceById(id);
        }

        if (obj != null) {
            VPNConnectionsFetcher fetcher = obj.getVPNConnections();
            return addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SharedNetworkResource> getSharedNetworkResourcesForFetcherId(String id) throws RestException {
        SharedNetworkResourcesFetcher fetcher = getSharedNetworkResourcesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SHAREDNETWORKRESOURCE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SharedNetworkResource>();
    }

    public static SharedNetworkResourcesFetcher getSharedNetworkResourcesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, id);
        if (fetcher != null) {
            return (SharedNetworkResourcesFetcher) fetcher;
        }
        if ((fetcher = getSharedNetworkResourcesFetcherForEnterpriseId(id)) != null) {
            return (SharedNetworkResourcesFetcher) addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSharedNetworkResourcesFetcherForMeId(id)) != null) {
            return (SharedNetworkResourcesFetcher) addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSharedNetworkResourcesFetcherForPATMapperId(id)) != null) {
            return (SharedNetworkResourcesFetcher) addFetcher(Constants.SHAREDNETWORKRESOURCES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SharedNetworkResource> getAllSharedNetworkResources() throws RestException {
        java.util.List<SharedNetworkResource> allObjs = new ArrayList<SharedNetworkResource>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            SharedNetworkResourcesFetcher fetcher = getSharedNetworkResourcesFetcherForMeId(session.getId());
            java.util.List<SharedNetworkResource> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<SharedNetworkResourcesFetcher> getAllSharedNetworkResourcesFetchers() throws RestException {
        java.util.List<SharedNetworkResourcesFetcher> allObjs = new ArrayList<SharedNetworkResourcesFetcher>();
        return allObjs;
    }
    public static ShuntLink getShuntLinkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ShuntLink obj = null;
            obj = new ShuntLink();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SHUNTLINK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForShuntLinkId(String id) throws RestException {
        ShuntLink obj = getObject(Constants.SHUNTLINK, id);
        if (obj == null) {
            obj = getShuntLinkById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForShuntLinkId(String id) throws RestException {
        ShuntLink obj = getObject(Constants.SHUNTLINK, id);
        if (obj == null) {
            obj = getShuntLinkById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForShuntLinkId(String id) throws RestException {
        ShuntLink obj = getObject(Constants.SHUNTLINK, id);
        if (obj == null) {
            obj = getShuntLinkById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForShuntLinkId(String id) throws RestException {
        ShuntLink obj = getObject(Constants.SHUNTLINK, id);
        if (obj == null) {
            obj = getShuntLinkById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualUplinksFetcher getVirtualUplinksFetcherForShuntLinkId(String id) throws RestException {
        ShuntLink obj = getObject(Constants.SHUNTLINK, id);
        if (obj == null) {
            obj = getShuntLinkById(id);
        }

        if (obj != null) {
            VirtualUplinksFetcher fetcher = obj.getVirtualUplinks();
            return addFetcher(Constants.VIRTUALUPLINKS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ShuntLink> getShuntLinksForFetcherId(String id) throws RestException {
        ShuntLinksFetcher fetcher = getShuntLinksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SHUNTLINK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ShuntLink>();
    }

    public static ShuntLinksFetcher getShuntLinksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SHUNTLINKS_FETCHER, id);
        if (fetcher != null) {
            return (ShuntLinksFetcher) fetcher;
        }
        if ((fetcher = getShuntLinksFetcherForNSRedundantGatewayGroupId(id)) != null) {
            return (ShuntLinksFetcher) addFetcher(Constants.SHUNTLINKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ShuntLink> getAllShuntLinks() throws RestException {
        java.util.List<ShuntLink> allObjs = new ArrayList<ShuntLink>();

        return allObjs;
    }

    public static java.util.List<ShuntLinksFetcher> getAllShuntLinksFetchers() throws RestException {
        java.util.List<ShuntLinksFetcher> allObjs = new ArrayList<ShuntLinksFetcher>();
        return allObjs;
    }
    public static SiteInfo getSiteInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SiteInfo obj = null;
            obj = new SiteInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SITEINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSiteInfoId(String id) throws RestException {
        SiteInfo obj = getObject(Constants.SITEINFO, id);
        if (obj == null) {
            obj = getSiteInfoById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSiteInfoId(String id) throws RestException {
        SiteInfo obj = getObject(Constants.SITEINFO, id);
        if (obj == null) {
            obj = getSiteInfoById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSiteInfoId(String id) throws RestException {
        SiteInfo obj = getObject(Constants.SITEINFO, id);
        if (obj == null) {
            obj = getSiteInfoById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SiteInfo> getSiteInfosForFetcherId(String id) throws RestException {
        SiteInfosFetcher fetcher = getSiteInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SITEINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SiteInfo>();
    }

    public static SiteInfosFetcher getSiteInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SITEINFOS_FETCHER, id);
        if (fetcher != null) {
            return (SiteInfosFetcher) fetcher;
        }
        if ((fetcher = getSiteInfosFetcherForMeId(id)) != null) {
            return (SiteInfosFetcher) addFetcher(Constants.SITEINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SiteInfo> getAllSiteInfos() throws RestException {
        java.util.List<SiteInfo> allObjs = new ArrayList<SiteInfo>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            SiteInfosFetcher fetcher = getSiteInfosFetcherForMeId(session.getId());
            java.util.List<SiteInfo> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<SiteInfosFetcher> getAllSiteInfosFetchers() throws RestException {
        java.util.List<SiteInfosFetcher> allObjs = new ArrayList<SiteInfosFetcher>();
        return allObjs;
    }
    public static SPATSourcesPool getSPATSourcesPoolById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SPATSourcesPool obj = null;
            obj = new SPATSourcesPool();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SPATSOURCESPOOL, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSPATSourcesPoolId(String id) throws RestException {
        SPATSourcesPool obj = getObject(Constants.SPATSOURCESPOOL, id);
        if (obj == null) {
            obj = getSPATSourcesPoolById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSPATSourcesPoolId(String id) throws RestException {
        SPATSourcesPool obj = getObject(Constants.SPATSOURCESPOOL, id);
        if (obj == null) {
            obj = getSPATSourcesPoolById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSPATSourcesPoolId(String id) throws RestException {
        SPATSourcesPool obj = getObject(Constants.SPATSOURCESPOOL, id);
        if (obj == null) {
            obj = getSPATSourcesPoolById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SPATSourcesPool> getSPATSourcesPoolsForFetcherId(String id) throws RestException {
        SPATSourcesPoolsFetcher fetcher = getSPATSourcesPoolsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SPATSOURCESPOOL);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SPATSourcesPool>();
    }

    public static SPATSourcesPoolsFetcher getSPATSourcesPoolsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SPATSOURCESPOOLS_FETCHER, id);
        if (fetcher != null) {
            return (SPATSourcesPoolsFetcher) fetcher;
        }
        if ((fetcher = getSPATSourcesPoolsFetcherForAggregatedDomainId(id)) != null) {
            return (SPATSourcesPoolsFetcher) addFetcher(Constants.SPATSOURCESPOOLS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSPATSourcesPoolsFetcherForDomainId(id)) != null) {
            return (SPATSourcesPoolsFetcher) addFetcher(Constants.SPATSOURCESPOOLS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SPATSourcesPool> getAllSPATSourcesPools() throws RestException {
        java.util.List<SPATSourcesPool> allObjs = new ArrayList<SPATSourcesPool>();

        return allObjs;
    }

    public static java.util.List<SPATSourcesPoolsFetcher> getAllSPATSourcesPoolsFetchers() throws RestException {
        java.util.List<SPATSourcesPoolsFetcher> allObjs = new ArrayList<SPATSourcesPoolsFetcher>();
        return allObjs;
    }
    public static SSHKey getSSHKeyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SSHKey obj = null;
            obj = new SSHKey();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SSHKEY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSSHKeyId(String id) throws RestException {
        SSHKey obj = getObject(Constants.SSHKEY, id);
        if (obj == null) {
            obj = getSSHKeyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSSHKeyId(String id) throws RestException {
        SSHKey obj = getObject(Constants.SSHKEY, id);
        if (obj == null) {
            obj = getSSHKeyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSSHKeyId(String id) throws RestException {
        SSHKey obj = getObject(Constants.SSHKEY, id);
        if (obj == null) {
            obj = getSSHKeyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SSHKey> getSSHKeysForFetcherId(String id) throws RestException {
        SSHKeysFetcher fetcher = getSSHKeysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SSHKEY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SSHKey>();
    }

    public static SSHKeysFetcher getSSHKeysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SSHKEYS_FETCHER, id);
        if (fetcher != null) {
            return (SSHKeysFetcher) fetcher;
        }
        if ((fetcher = getSSHKeysFetcherForInfrastructureAccessProfileId(id)) != null) {
            return (SSHKeysFetcher) addFetcher(Constants.SSHKEYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SSHKey> getAllSSHKeys() throws RestException {
        java.util.List<SSHKey> allObjs = new ArrayList<SSHKey>();

        return allObjs;
    }

    public static java.util.List<SSHKeysFetcher> getAllSSHKeysFetchers() throws RestException {
        java.util.List<SSHKeysFetcher> allObjs = new ArrayList<SSHKeysFetcher>();
        return allObjs;
    }
    public static SSIDConnection getSSIDConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SSIDConnection obj = null;
            obj = new SSIDConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SSIDCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForSSIDConnectionId(String id) throws RestException {
        SSIDConnection obj = getObject(Constants.SSIDCONNECTION, id);
        if (obj == null) {
            obj = getSSIDConnectionById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForSSIDConnectionId(String id) throws RestException {
        SSIDConnection obj = getObject(Constants.SSIDCONNECTION, id);
        if (obj == null) {
            obj = getSSIDConnectionById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSSIDConnectionId(String id) throws RestException {
        SSIDConnection obj = getObject(Constants.SSIDCONNECTION, id);
        if (obj == null) {
            obj = getSSIDConnectionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSSIDConnectionId(String id) throws RestException {
        SSIDConnection obj = getObject(Constants.SSIDCONNECTION, id);
        if (obj == null) {
            obj = getSSIDConnectionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSSIDConnectionId(String id) throws RestException {
        SSIDConnection obj = getObject(Constants.SSIDCONNECTION, id);
        if (obj == null) {
            obj = getSSIDConnectionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SSIDConnection> getSSIDConnectionsForFetcherId(String id) throws RestException {
        SSIDConnectionsFetcher fetcher = getSSIDConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SSIDCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SSIDConnection>();
    }

    public static SSIDConnectionsFetcher getSSIDConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SSIDCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (SSIDConnectionsFetcher) fetcher;
        }
        if ((fetcher = getSSIDConnectionsFetcherForWirelessPortId(id)) != null) {
            return (SSIDConnectionsFetcher) addFetcher(Constants.SSIDCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SSIDConnection> getAllSSIDConnections() throws RestException {
        java.util.List<SSIDConnection> allObjs = new ArrayList<SSIDConnection>();

        return allObjs;
    }

    public static java.util.List<SSIDConnectionsFetcher> getAllSSIDConnectionsFetchers() throws RestException {
        java.util.List<SSIDConnectionsFetcher> allObjs = new ArrayList<SSIDConnectionsFetcher>();
        return allObjs;
    }
    public static StaticRoute getStaticRouteById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            StaticRoute obj = null;
            obj = new StaticRoute();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.STATICROUTE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForStaticRouteId(String id) throws RestException {
        StaticRoute obj = getObject(Constants.STATICROUTE, id);
        if (obj == null) {
            obj = getStaticRouteById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForStaticRouteId(String id) throws RestException {
        StaticRoute obj = getObject(Constants.STATICROUTE, id);
        if (obj == null) {
            obj = getStaticRouteById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForStaticRouteId(String id) throws RestException {
        StaticRoute obj = getObject(Constants.STATICROUTE, id);
        if (obj == null) {
            obj = getStaticRouteById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForStaticRouteId(String id) throws RestException {
        StaticRoute obj = getObject(Constants.STATICROUTE, id);
        if (obj == null) {
            obj = getStaticRouteById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForStaticRouteId(String id) throws RestException {
        StaticRoute obj = getObject(Constants.STATICROUTE, id);
        if (obj == null) {
            obj = getStaticRouteById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<StaticRoute> getStaticRoutesForFetcherId(String id) throws RestException {
        StaticRoutesFetcher fetcher = getStaticRoutesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.STATICROUTE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<StaticRoute>();
    }

    public static StaticRoutesFetcher getStaticRoutesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.STATICROUTES_FETCHER, id);
        if (fetcher != null) {
            return (StaticRoutesFetcher) fetcher;
        }
        if ((fetcher = getStaticRoutesFetcherForAggregatedDomainId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForContainerInterfaceId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForDomainId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForHostInterfaceId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForL2DomainId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForMeId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForSharedNetworkResourceId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStaticRoutesFetcherForVMInterfaceId(id)) != null) {
            return (StaticRoutesFetcher) addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<StaticRoute> getAllStaticRoutes() throws RestException {
        java.util.List<StaticRoute> allObjs = new ArrayList<StaticRoute>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            StaticRoutesFetcher fetcher = getStaticRoutesFetcherForMeId(session.getId());
            java.util.List<StaticRoute> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<StaticRoutesFetcher> getAllStaticRoutesFetchers() throws RestException {
        java.util.List<StaticRoutesFetcher> allObjs = new ArrayList<StaticRoutesFetcher>();
        return allObjs;
    }
    public static Statistics getStatisticsById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Statistics obj = null;
            obj = new Statistics();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.STATISTICS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForStatisticsId(String id) throws RestException {
        Statistics obj = getObject(Constants.STATISTICS, id);
        if (obj == null) {
            obj = getStatisticsById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForStatisticsId(String id) throws RestException {
        Statistics obj = getObject(Constants.STATISTICS, id);
        if (obj == null) {
            obj = getStatisticsById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForStatisticsId(String id) throws RestException {
        Statistics obj = getObject(Constants.STATISTICS, id);
        if (obj == null) {
            obj = getStatisticsById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Statistics> getStatisticsForFetcherId(String id) throws RestException {
        StatisticsFetcher fetcher = getStatisticsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.STATISTICS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Statistics>();
    }

    public static StatisticsFetcher getStatisticsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.STATISTICS_FETCHER, id);
        if (fetcher != null) {
            return (StatisticsFetcher) fetcher;
        }
        if ((fetcher = getStatisticsFetcherForAddressMapId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForAggregatedDomainId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForBridgeInterfaceId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForContainerInterfaceId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForDomainId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForEgressACLEntryTemplateId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForHostInterfaceId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForIngressACLEntryTemplateId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForIngressAdvFwdEntryTemplateId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForIngressAuditACLEntryTemplateId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForL2DomainId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForNSPortId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForPATNATPoolId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForSubnetId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForVLANId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForVMInterfaceId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForVPortId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForVRSId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForVSCId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsFetcherForZoneId(id)) != null) {
            return (StatisticsFetcher) addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Statistics> getAllStatistics() throws RestException {
        java.util.List<Statistics> allObjs = new ArrayList<Statistics>();

        return allObjs;
    }

    public static java.util.List<StatisticsFetcher> getAllStatisticsFetchers() throws RestException {
        java.util.List<StatisticsFetcher> allObjs = new ArrayList<StatisticsFetcher>();
        return allObjs;
    }
    public static StatsCollectorInfo getStatsCollectorInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            StatsCollectorInfo obj = null;
            obj = new StatsCollectorInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.STATSCOLLECTORINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForStatsCollectorInfoId(String id) throws RestException {
        StatsCollectorInfo obj = getObject(Constants.STATSCOLLECTORINFO, id);
        if (obj == null) {
            obj = getStatsCollectorInfoById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForStatsCollectorInfoId(String id) throws RestException {
        StatsCollectorInfo obj = getObject(Constants.STATSCOLLECTORINFO, id);
        if (obj == null) {
            obj = getStatsCollectorInfoById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForStatsCollectorInfoId(String id) throws RestException {
        StatsCollectorInfo obj = getObject(Constants.STATSCOLLECTORINFO, id);
        if (obj == null) {
            obj = getStatsCollectorInfoById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<StatsCollectorInfo> getStatsCollectorInfosForFetcherId(String id) throws RestException {
        StatsCollectorInfosFetcher fetcher = getStatsCollectorInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.STATSCOLLECTORINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<StatsCollectorInfo>();
    }

    public static StatsCollectorInfosFetcher getStatsCollectorInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.STATSCOLLECTORINFOS_FETCHER, id);
        if (fetcher != null) {
            return (StatsCollectorInfosFetcher) fetcher;
        }
        if ((fetcher = getStatsCollectorInfosFetcherForMeId(id)) != null) {
            return (StatsCollectorInfosFetcher) addFetcher(Constants.STATSCOLLECTORINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<StatsCollectorInfo> getAllStatsCollectorInfos() throws RestException {
        java.util.List<StatsCollectorInfo> allObjs = new ArrayList<StatsCollectorInfo>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            StatsCollectorInfosFetcher fetcher = getStatsCollectorInfosFetcherForMeId(session.getId());
            java.util.List<StatsCollectorInfo> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<StatsCollectorInfosFetcher> getAllStatsCollectorInfosFetchers() throws RestException {
        java.util.List<StatsCollectorInfosFetcher> allObjs = new ArrayList<StatsCollectorInfosFetcher>();
        return allObjs;
    }
    public static StatisticsPolicy getStatisticsPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            StatisticsPolicy obj = null;
            obj = new StatisticsPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.STATISTICSPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForStatisticsPolicyId(String id) throws RestException {
        StatisticsPolicy obj = getObject(Constants.STATISTICSPOLICY, id);
        if (obj == null) {
            obj = getStatisticsPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForStatisticsPolicyId(String id) throws RestException {
        StatisticsPolicy obj = getObject(Constants.STATISTICSPOLICY, id);
        if (obj == null) {
            obj = getStatisticsPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForStatisticsPolicyId(String id) throws RestException {
        StatisticsPolicy obj = getObject(Constants.STATISTICSPOLICY, id);
        if (obj == null) {
            obj = getStatisticsPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<StatisticsPolicy> getStatisticsPoliciesForFetcherId(String id) throws RestException {
        StatisticsPoliciesFetcher fetcher = getStatisticsPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.STATISTICSPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<StatisticsPolicy>();
    }

    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.STATISTICSPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (StatisticsPoliciesFetcher) fetcher;
        }
        if ((fetcher = getStatisticsPoliciesFetcherForAddressMapId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForAggregatedDomainId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForDomainId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForL2DomainId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForNSPortId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForPATNATPoolId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForSubnetId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForVPortId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getStatisticsPoliciesFetcherForZoneId(id)) != null) {
            return (StatisticsPoliciesFetcher) addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<StatisticsPolicy> getAllStatisticsPolicies() throws RestException {
        java.util.List<StatisticsPolicy> allObjs = new ArrayList<StatisticsPolicy>();

        return allObjs;
    }

    public static java.util.List<StatisticsPoliciesFetcher> getAllStatisticsPoliciesFetchers() throws RestException {
        java.util.List<StatisticsPoliciesFetcher> allObjs = new ArrayList<StatisticsPoliciesFetcher>();
        return allObjs;
    }
    public static Subnet getSubnetById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Subnet obj = null;
            obj = new Subnet();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SUBNET, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressRangesFetcher getAddressRangesFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            AddressRangesFetcher fetcher = obj.getAddressRanges();
            return addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPNeighborsFetcher getBGPNeighborsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            BGPNeighborsFetcher fetcher = obj.getBGPNeighbors();
            return addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerResyncsFetcher getContainerResyncsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            ContainerResyncsFetcher fetcher = obj.getContainerResyncs();
            return addFetcher(Constants.CONTAINERRESYNCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DefaultGatewaysFetcher getDefaultGatewaysFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            DefaultGatewaysFetcher fetcher = obj.getDefaultGateways();
            return addFetcher(Constants.DEFAULTGATEWAYS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewayConnectionsFetcher getIKEGatewayConnectionsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            IKEGatewayConnectionsFetcher fetcher = obj.getIKEGatewayConnections();
            return addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IPReservationsFetcher getIPReservationsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            IPReservationsFetcher fetcher = obj.getIPReservations();
            return addFetcher(Constants.IPRESERVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATIPEntriesFetcher getPATIPEntriesFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            PATIPEntriesFetcher fetcher = obj.getPATIPEntries();
            return addFetcher(Constants.PATIPENTRIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ProxyARPFiltersFetcher getProxyARPFiltersFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            ProxyARPFiltersFetcher fetcher = obj.getProxyARPFilters();
            return addFetcher(Constants.PROXYARPFILTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMResyncsFetcher getVMResyncsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VMResyncsFetcher fetcher = obj.getVMResyncs();
            return addFetcher(Constants.VMRESYNCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualIPsFetcher getVirtualIPsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VirtualIPsFetcher fetcher = obj.getVirtualIPs();
            return addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMIPReservationsFetcher getVMIPReservationsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VMIPReservationsFetcher fetcher = obj.getVMIPReservations();
            return addFetcher(Constants.VMIPRESERVATIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForSubnetId(String id) throws RestException {
        Subnet obj = getObject(Constants.SUBNET, id);
        if (obj == null) {
            obj = getSubnetById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Subnet> getSubnetsForFetcherId(String id) throws RestException {
        SubnetsFetcher fetcher = getSubnetsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SUBNET);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Subnet>();
    }

    public static SubnetsFetcher getSubnetsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SUBNETS_FETCHER, id);
        if (fetcher != null) {
            return (SubnetsFetcher) fetcher;
        }
        if ((fetcher = getSubnetsFetcherForAggregatedDomainId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForDomainId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForGatewayId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForIKEGatewayConnectionId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForMeId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForNetconfGatewayId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForNSGatewayId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForPATMapperId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForSubnetTemplateId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetsFetcherForZoneId(id)) != null) {
            return (SubnetsFetcher) addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Subnet> getAllSubnets() throws RestException {
        java.util.List<Subnet> allObjs = new ArrayList<Subnet>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            SubnetsFetcher fetcher = getSubnetsFetcherForMeId(session.getId());
            java.util.List<Subnet> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<SubnetsFetcher> getAllSubnetsFetchers() throws RestException {
        java.util.List<SubnetsFetcher> allObjs = new ArrayList<SubnetsFetcher>();
        return allObjs;
    }
    public static SubnetTemplate getSubnetTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SubnetTemplate obj = null;
            obj = new SubnetTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SUBNETTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AddressRangesFetcher getAddressRangesFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            AddressRangesFetcher fetcher = obj.getAddressRanges();
            return addFetcher(Constants.ADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForSubnetTemplateId(String id) throws RestException {
        SubnetTemplate obj = getObject(Constants.SUBNETTEMPLATE, id);
        if (obj == null) {
            obj = getSubnetTemplateById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SubnetTemplate> getSubnetTemplatesForFetcherId(String id) throws RestException {
        SubnetTemplatesFetcher fetcher = getSubnetTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SUBNETTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SubnetTemplate>();
    }

    public static SubnetTemplatesFetcher getSubnetTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SUBNETTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (SubnetTemplatesFetcher) fetcher;
        }
        if ((fetcher = getSubnetTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (SubnetTemplatesFetcher) addFetcher(Constants.SUBNETTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getSubnetTemplatesFetcherForZoneTemplateId(id)) != null) {
            return (SubnetTemplatesFetcher) addFetcher(Constants.SUBNETTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SubnetTemplate> getAllSubnetTemplates() throws RestException {
        java.util.List<SubnetTemplate> allObjs = new ArrayList<SubnetTemplate>();

        return allObjs;
    }

    public static java.util.List<SubnetTemplatesFetcher> getAllSubnetTemplatesFetchers() throws RestException {
        java.util.List<SubnetTemplatesFetcher> allObjs = new ArrayList<SubnetTemplatesFetcher>();
        return allObjs;
    }
    public static SupplementalInfraConfig getSupplementalInfraConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SupplementalInfraConfig obj = null;
            obj = new SupplementalInfraConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SUPPLEMENTALINFRACONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<SupplementalInfraConfig> getSupplementalInfraConfigsForFetcherId(String id) throws RestException {
        SupplementalInfraConfigsFetcher fetcher = getSupplementalInfraConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SUPPLEMENTALINFRACONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SupplementalInfraConfig>();
    }

    public static SupplementalInfraConfigsFetcher getSupplementalInfraConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SUPPLEMENTALINFRACONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (SupplementalInfraConfigsFetcher) fetcher;
        }
        if ((fetcher = getSupplementalInfraConfigsFetcherForNSGatewayId(id)) != null) {
            return (SupplementalInfraConfigsFetcher) addFetcher(Constants.SUPPLEMENTALINFRACONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SupplementalInfraConfig> getAllSupplementalInfraConfigs() throws RestException {
        java.util.List<SupplementalInfraConfig> allObjs = new ArrayList<SupplementalInfraConfig>();

        return allObjs;
    }

    public static java.util.List<SupplementalInfraConfigsFetcher> getAllSupplementalInfraConfigsFetchers() throws RestException {
        java.util.List<SupplementalInfraConfigsFetcher> allObjs = new ArrayList<SupplementalInfraConfigsFetcher>();
        return allObjs;
    }
    public static SyslogDestination getSyslogDestinationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SyslogDestination obj = null;
            obj = new SyslogDestination();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SYSLOGDESTINATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<SyslogDestination> getSyslogDestinationsForFetcherId(String id) throws RestException {
        SyslogDestinationsFetcher fetcher = getSyslogDestinationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SYSLOGDESTINATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SyslogDestination>();
    }

    public static SyslogDestinationsFetcher getSyslogDestinationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SYSLOGDESTINATIONS_FETCHER, id);
        if (fetcher != null) {
            return (SyslogDestinationsFetcher) fetcher;
        }
        if ((fetcher = getSyslogDestinationsFetcherForEnterpriseId(id)) != null) {
            return (SyslogDestinationsFetcher) addFetcher(Constants.SYSLOGDESTINATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SyslogDestination> getAllSyslogDestinations() throws RestException {
        java.util.List<SyslogDestination> allObjs = new ArrayList<SyslogDestination>();

        return allObjs;
    }

    public static java.util.List<SyslogDestinationsFetcher> getAllSyslogDestinationsFetchers() throws RestException {
        java.util.List<SyslogDestinationsFetcher> allObjs = new ArrayList<SyslogDestinationsFetcher>();
        return allObjs;
    }
    public static SystemConfig getSystemConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            SystemConfig obj = null;
            obj = new SystemConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.SYSTEMCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForSystemConfigId(String id) throws RestException {
        SystemConfig obj = getObject(Constants.SYSTEMCONFIG, id);
        if (obj == null) {
            obj = getSystemConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForSystemConfigId(String id) throws RestException {
        SystemConfig obj = getObject(Constants.SYSTEMCONFIG, id);
        if (obj == null) {
            obj = getSystemConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForSystemConfigId(String id) throws RestException {
        SystemConfig obj = getObject(Constants.SYSTEMCONFIG, id);
        if (obj == null) {
            obj = getSystemConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<SystemConfig> getSystemConfigsForFetcherId(String id) throws RestException {
        SystemConfigsFetcher fetcher = getSystemConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.SYSTEMCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<SystemConfig>();
    }

    public static SystemConfigsFetcher getSystemConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.SYSTEMCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (SystemConfigsFetcher) fetcher;
        }
        if ((fetcher = getSystemConfigsFetcherForMeId(id)) != null) {
            return (SystemConfigsFetcher) addFetcher(Constants.SYSTEMCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<SystemConfig> getAllSystemConfigs() throws RestException {
        java.util.List<SystemConfig> allObjs = new ArrayList<SystemConfig>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            SystemConfigsFetcher fetcher = getSystemConfigsFetcherForMeId(session.getId());
            java.util.List<SystemConfig> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<SystemConfigsFetcher> getAllSystemConfigsFetchers() throws RestException {
        java.util.List<SystemConfigsFetcher> allObjs = new ArrayList<SystemConfigsFetcher>();
        return allObjs;
    }
    public static TCA getTCAById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TCA obj = null;
            obj = new TCA();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TCA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForTCAId(String id) throws RestException {
        TCA obj = getObject(Constants.TCA, id);
        if (obj == null) {
            obj = getTCAById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForTCAId(String id) throws RestException {
        TCA obj = getObject(Constants.TCA, id);
        if (obj == null) {
            obj = getTCAById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTCAId(String id) throws RestException {
        TCA obj = getObject(Constants.TCA, id);
        if (obj == null) {
            obj = getTCAById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTCAId(String id) throws RestException {
        TCA obj = getObject(Constants.TCA, id);
        if (obj == null) {
            obj = getTCAById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTCAId(String id) throws RestException {
        TCA obj = getObject(Constants.TCA, id);
        if (obj == null) {
            obj = getTCAById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<TCA> getTCAsForFetcherId(String id) throws RestException {
        TCAsFetcher fetcher = getTCAsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TCA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TCA>();
    }

    public static TCAsFetcher getTCAsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TCAS_FETCHER, id);
        if (fetcher != null) {
            return (TCAsFetcher) fetcher;
        }
        if ((fetcher = getTCAsFetcherForAggregatedDomainId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForBridgeInterfaceId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForContainerInterfaceId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForDomainId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForHostInterfaceId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForL2DomainId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForMeId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForSubnetId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForVMInterfaceId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForVPortId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTCAsFetcherForZoneId(id)) != null) {
            return (TCAsFetcher) addFetcher(Constants.TCAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<TCA> getAllTCAs() throws RestException {
        java.util.List<TCA> allObjs = new ArrayList<TCA>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            TCAsFetcher fetcher = getTCAsFetcherForMeId(session.getId());
            java.util.List<TCA> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<TCAsFetcher> getAllTCAsFetchers() throws RestException {
        java.util.List<TCAsFetcher> allObjs = new ArrayList<TCAsFetcher>();
        return allObjs;
    }
    public static Test getTestById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Test obj = null;
            obj = new Test();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TEST, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTestId(String id) throws RestException {
        Test obj = getObject(Constants.TEST, id);
        if (obj == null) {
            obj = getTestById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTestId(String id) throws RestException {
        Test obj = getObject(Constants.TEST, id);
        if (obj == null) {
            obj = getTestById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTestId(String id) throws RestException {
        Test obj = getObject(Constants.TEST, id);
        if (obj == null) {
            obj = getTestById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Test> getTestsForFetcherId(String id) throws RestException {
        TestsFetcher fetcher = getTestsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TEST);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Test>();
    }

    public static TestsFetcher getTestsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TESTS_FETCHER, id);
        if (fetcher != null) {
            return (TestsFetcher) fetcher;
        }
        if ((fetcher = getTestsFetcherForScheduledTestSuiteId(id)) != null) {
            return (TestsFetcher) addFetcher(Constants.TESTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTestsFetcherForTestSuiteId(id)) != null) {
            return (TestsFetcher) addFetcher(Constants.TESTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Test> getAllTests() throws RestException {
        java.util.List<Test> allObjs = new ArrayList<Test>();

        return allObjs;
    }

    public static java.util.List<TestsFetcher> getAllTestsFetchers() throws RestException {
        java.util.List<TestsFetcher> allObjs = new ArrayList<TestsFetcher>();
        return allObjs;
    }
    public static TestDefinition getTestDefinitionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TestDefinition obj = null;
            obj = new TestDefinition();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TESTDEFINITION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTestDefinitionId(String id) throws RestException {
        TestDefinition obj = getObject(Constants.TESTDEFINITION, id);
        if (obj == null) {
            obj = getTestDefinitionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTestDefinitionId(String id) throws RestException {
        TestDefinition obj = getObject(Constants.TESTDEFINITION, id);
        if (obj == null) {
            obj = getTestDefinitionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTestDefinitionId(String id) throws RestException {
        TestDefinition obj = getObject(Constants.TESTDEFINITION, id);
        if (obj == null) {
            obj = getTestDefinitionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<TestDefinition> getTestDefinitionsForFetcherId(String id) throws RestException {
        TestDefinitionsFetcher fetcher = getTestDefinitionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TESTDEFINITION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TestDefinition>();
    }

    public static TestDefinitionsFetcher getTestDefinitionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TESTDEFINITIONS_FETCHER, id);
        if (fetcher != null) {
            return (TestDefinitionsFetcher) fetcher;
        }
        if ((fetcher = getTestDefinitionsFetcherForEnterpriseId(id)) != null) {
            return (TestDefinitionsFetcher) addFetcher(Constants.TESTDEFINITIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTestDefinitionsFetcherForMeId(id)) != null) {
            return (TestDefinitionsFetcher) addFetcher(Constants.TESTDEFINITIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<TestDefinition> getAllTestDefinitions() throws RestException {
        java.util.List<TestDefinition> allObjs = new ArrayList<TestDefinition>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            TestDefinitionsFetcher fetcher = getTestDefinitionsFetcherForMeId(session.getId());
            java.util.List<TestDefinition> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<TestDefinitionsFetcher> getAllTestDefinitionsFetchers() throws RestException {
        java.util.List<TestDefinitionsFetcher> allObjs = new ArrayList<TestDefinitionsFetcher>();
        return allObjs;
    }
    public static TestRun getTestRunById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TestRun obj = null;
            obj = new TestRun();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TESTRUN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTestRunId(String id) throws RestException {
        TestRun obj = getObject(Constants.TESTRUN, id);
        if (obj == null) {
            obj = getTestRunById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTestRunId(String id) throws RestException {
        TestRun obj = getObject(Constants.TESTRUN, id);
        if (obj == null) {
            obj = getTestRunById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTestRunId(String id) throws RestException {
        TestRun obj = getObject(Constants.TESTRUN, id);
        if (obj == null) {
            obj = getTestRunById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<TestRun> getTestRunsForFetcherId(String id) throws RestException {
        TestRunsFetcher fetcher = getTestRunsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TESTRUN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TestRun>();
    }

    public static TestRunsFetcher getTestRunsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TESTRUNS_FETCHER, id);
        if (fetcher != null) {
            return (TestRunsFetcher) fetcher;
        }
        if ((fetcher = getTestRunsFetcherForScheduledtestsuiterunId(id)) != null) {
            return (TestRunsFetcher) addFetcher(Constants.TESTRUNS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTestRunsFetcherForTestSuiteRunId(id)) != null) {
            return (TestRunsFetcher) addFetcher(Constants.TESTRUNS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<TestRun> getAllTestRuns() throws RestException {
        java.util.List<TestRun> allObjs = new ArrayList<TestRun>();

        return allObjs;
    }

    public static java.util.List<TestRunsFetcher> getAllTestRunsFetchers() throws RestException {
        java.util.List<TestRunsFetcher> allObjs = new ArrayList<TestRunsFetcher>();
        return allObjs;
    }
    public static TestSuite getTestSuiteById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TestSuite obj = null;
            obj = new TestSuite();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TESTSUITE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTestSuiteId(String id) throws RestException {
        TestSuite obj = getObject(Constants.TESTSUITE, id);
        if (obj == null) {
            obj = getTestSuiteById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTestSuiteId(String id) throws RestException {
        TestSuite obj = getObject(Constants.TESTSUITE, id);
        if (obj == null) {
            obj = getTestSuiteById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTestSuiteId(String id) throws RestException {
        TestSuite obj = getObject(Constants.TESTSUITE, id);
        if (obj == null) {
            obj = getTestSuiteById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestsFetcher getTestsFetcherForTestSuiteId(String id) throws RestException {
        TestSuite obj = getObject(Constants.TESTSUITE, id);
        if (obj == null) {
            obj = getTestSuiteById(id);
        }

        if (obj != null) {
            TestsFetcher fetcher = obj.getTests();
            return addFetcher(Constants.TESTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestSuiteRunsFetcher getTestSuiteRunsFetcherForTestSuiteId(String id) throws RestException {
        TestSuite obj = getObject(Constants.TESTSUITE, id);
        if (obj == null) {
            obj = getTestSuiteById(id);
        }

        if (obj != null) {
            TestSuiteRunsFetcher fetcher = obj.getTestSuiteRuns();
            return addFetcher(Constants.TESTSUITERUNS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<TestSuite> getTestSuitesForFetcherId(String id) throws RestException {
        TestSuitesFetcher fetcher = getTestSuitesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TESTSUITE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TestSuite>();
    }

    public static TestSuitesFetcher getTestSuitesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TESTSUITES_FETCHER, id);
        if (fetcher != null) {
            return (TestSuitesFetcher) fetcher;
        }
        if ((fetcher = getTestSuitesFetcherForEnterpriseId(id)) != null) {
            return (TestSuitesFetcher) addFetcher(Constants.TESTSUITES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<TestSuite> getAllTestSuites() throws RestException {
        java.util.List<TestSuite> allObjs = new ArrayList<TestSuite>();

        return allObjs;
    }

    public static java.util.List<TestSuitesFetcher> getAllTestSuitesFetchers() throws RestException {
        java.util.List<TestSuitesFetcher> allObjs = new ArrayList<TestSuitesFetcher>();
        return allObjs;
    }
    public static TestSuiteRun getTestSuiteRunById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            TestSuiteRun obj = null;
            obj = new TestSuiteRun();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TESTSUITERUN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTestSuiteRunId(String id) throws RestException {
        TestSuiteRun obj = getObject(Constants.TESTSUITERUN, id);
        if (obj == null) {
            obj = getTestSuiteRunById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTestSuiteRunId(String id) throws RestException {
        TestSuiteRun obj = getObject(Constants.TESTSUITERUN, id);
        if (obj == null) {
            obj = getTestSuiteRunById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTestSuiteRunId(String id) throws RestException {
        TestSuiteRun obj = getObject(Constants.TESTSUITERUN, id);
        if (obj == null) {
            obj = getTestSuiteRunById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestRunsFetcher getTestRunsFetcherForTestSuiteRunId(String id) throws RestException {
        TestSuiteRun obj = getObject(Constants.TESTSUITERUN, id);
        if (obj == null) {
            obj = getTestSuiteRunById(id);
        }

        if (obj != null) {
            TestRunsFetcher fetcher = obj.getTestRuns();
            return addFetcher(Constants.TESTRUNS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<TestSuiteRun> getTestSuiteRunsForFetcherId(String id) throws RestException {
        TestSuiteRunsFetcher fetcher = getTestSuiteRunsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TESTSUITERUN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<TestSuiteRun>();
    }

    public static TestSuiteRunsFetcher getTestSuiteRunsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TESTSUITERUNS_FETCHER, id);
        if (fetcher != null) {
            return (TestSuiteRunsFetcher) fetcher;
        }
        if ((fetcher = getTestSuiteRunsFetcherForTestSuiteId(id)) != null) {
            return (TestSuiteRunsFetcher) addFetcher(Constants.TESTSUITERUNS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTestSuiteRunsFetcherForVPortId(id)) != null) {
            return (TestSuiteRunsFetcher) addFetcher(Constants.TESTSUITERUNS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<TestSuiteRun> getAllTestSuiteRuns() throws RestException {
        java.util.List<TestSuiteRun> allObjs = new ArrayList<TestSuiteRun>();

        return allObjs;
    }

    public static java.util.List<TestSuiteRunsFetcher> getAllTestSuiteRunsFetchers() throws RestException {
        java.util.List<TestSuiteRunsFetcher> allObjs = new ArrayList<TestSuiteRunsFetcher>();
        return allObjs;
    }
    public static ThreatPreventionInfo getThreatPreventionInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ThreatPreventionInfo obj = null;
            obj = new ThreatPreventionInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.THREATPREVENTIONINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ThreatPreventionInfo> getThreatPreventionInfosForFetcherId(String id) throws RestException {
        ThreatPreventionInfosFetcher fetcher = getThreatPreventionInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.THREATPREVENTIONINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ThreatPreventionInfo>();
    }

    public static ThreatPreventionInfosFetcher getThreatPreventionInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.THREATPREVENTIONINFOS_FETCHER, id);
        if (fetcher != null) {
            return (ThreatPreventionInfosFetcher) fetcher;
        }
        if ((fetcher = getThreatPreventionInfosFetcherForNSGatewayId(id)) != null) {
            return (ThreatPreventionInfosFetcher) addFetcher(Constants.THREATPREVENTIONINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ThreatPreventionInfo> getAllThreatPreventionInfos() throws RestException {
        java.util.List<ThreatPreventionInfo> allObjs = new ArrayList<ThreatPreventionInfo>();

        return allObjs;
    }

    public static java.util.List<ThreatPreventionInfosFetcher> getAllThreatPreventionInfosFetchers() throws RestException {
        java.util.List<ThreatPreventionInfosFetcher> allObjs = new ArrayList<ThreatPreventionInfosFetcher>();
        return allObjs;
    }
    public static ThreatPreventionServerConnection getThreatPreventionServerConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ThreatPreventionServerConnection obj = null;
            obj = new ThreatPreventionServerConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.THREATPREVENTIONSERVERCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ThreatPreventionServerConnection> getThreatPreventionServerConnectionsForFetcherId(String id) throws RestException {
        ThreatPreventionServerConnectionsFetcher fetcher = getThreatPreventionServerConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.THREATPREVENTIONSERVERCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ThreatPreventionServerConnection>();
    }

    public static ThreatPreventionServerConnectionsFetcher getThreatPreventionServerConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.THREATPREVENTIONSERVERCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (ThreatPreventionServerConnectionsFetcher) fetcher;
        }
        if ((fetcher = getThreatPreventionServerConnectionsFetcherForVSPId(id)) != null) {
            return (ThreatPreventionServerConnectionsFetcher) addFetcher(Constants.THREATPREVENTIONSERVERCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ThreatPreventionServerConnection> getAllThreatPreventionServerConnections() throws RestException {
        java.util.List<ThreatPreventionServerConnection> allObjs = new ArrayList<ThreatPreventionServerConnection>();

        return allObjs;
    }

    public static java.util.List<ThreatPreventionServerConnectionsFetcher> getAllThreatPreventionServerConnectionsFetchers() throws RestException {
        java.util.List<ThreatPreventionServerConnectionsFetcher> allObjs = new ArrayList<ThreatPreventionServerConnectionsFetcher>();
        return allObjs;
    }
    public static Tier getTierById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Tier obj = null;
            obj = new Tier();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TIER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DestinationurlsFetcher getDestinationurlsFetcherForTierId(String id) throws RestException {
        Tier obj = getObject(Constants.TIER, id);
        if (obj == null) {
            obj = getTierById(id);
        }

        if (obj != null) {
            DestinationurlsFetcher fetcher = obj.getDestinationurls();
            return addFetcher(Constants.DESTINATIONURLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTierId(String id) throws RestException {
        Tier obj = getObject(Constants.TIER, id);
        if (obj == null) {
            obj = getTierById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTierId(String id) throws RestException {
        Tier obj = getObject(Constants.TIER, id);
        if (obj == null) {
            obj = getTierById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTierId(String id) throws RestException {
        Tier obj = getObject(Constants.TIER, id);
        if (obj == null) {
            obj = getTierById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Tier> getTiersForFetcherId(String id) throws RestException {
        TiersFetcher fetcher = getTiersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TIER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Tier>();
    }

    public static TiersFetcher getTiersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TIERS_FETCHER, id);
        if (fetcher != null) {
            return (TiersFetcher) fetcher;
        }
        if ((fetcher = getTiersFetcherForPerformanceMonitorId(id)) != null) {
            return (TiersFetcher) addFetcher(Constants.TIERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Tier> getAllTiers() throws RestException {
        java.util.List<Tier> allObjs = new ArrayList<Tier>();

        return allObjs;
    }

    public static java.util.List<TiersFetcher> getAllTiersFetchers() throws RestException {
        java.util.List<TiersFetcher> allObjs = new ArrayList<TiersFetcher>();
        return allObjs;
    }
    public static Trunk getTrunkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Trunk obj = null;
            obj = new Trunk();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.TRUNK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForTrunkId(String id) throws RestException {
        Trunk obj = getObject(Constants.TRUNK, id);
        if (obj == null) {
            obj = getTrunkById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForTrunkId(String id) throws RestException {
        Trunk obj = getObject(Constants.TRUNK, id);
        if (obj == null) {
            obj = getTrunkById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForTrunkId(String id) throws RestException {
        Trunk obj = getObject(Constants.TRUNK, id);
        if (obj == null) {
            obj = getTrunkById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForTrunkId(String id) throws RestException {
        Trunk obj = getObject(Constants.TRUNK, id);
        if (obj == null) {
            obj = getTrunkById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Trunk> getTrunksForFetcherId(String id) throws RestException {
        TrunksFetcher fetcher = getTrunksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.TRUNK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Trunk>();
    }

    public static TrunksFetcher getTrunksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.TRUNKS_FETCHER, id);
        if (fetcher != null) {
            return (TrunksFetcher) fetcher;
        }
        if ((fetcher = getTrunksFetcherForEnterpriseId(id)) != null) {
            return (TrunksFetcher) addFetcher(Constants.TRUNKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getTrunksFetcherForVPortId(id)) != null) {
            return (TrunksFetcher) addFetcher(Constants.TRUNKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Trunk> getAllTrunks() throws RestException {
        java.util.List<Trunk> allObjs = new ArrayList<Trunk>();

        return allObjs;
    }

    public static java.util.List<TrunksFetcher> getAllTrunksFetchers() throws RestException {
        java.util.List<TrunksFetcher> allObjs = new ArrayList<TrunksFetcher>();
        return allObjs;
    }
    public static Underlay getUnderlayById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Underlay obj = null;
            obj = new Underlay();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.UNDERLAY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForUnderlayId(String id) throws RestException {
        Underlay obj = getObject(Constants.UNDERLAY, id);
        if (obj == null) {
            obj = getUnderlayById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForUnderlayId(String id) throws RestException {
        Underlay obj = getObject(Constants.UNDERLAY, id);
        if (obj == null) {
            obj = getUnderlayById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForUnderlayId(String id) throws RestException {
        Underlay obj = getObject(Constants.UNDERLAY, id);
        if (obj == null) {
            obj = getUnderlayById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Underlay> getUnderlaysForFetcherId(String id) throws RestException {
        UnderlaysFetcher fetcher = getUnderlaysFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.UNDERLAY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Underlay>();
    }

    public static UnderlaysFetcher getUnderlaysFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.UNDERLAYS_FETCHER, id);
        if (fetcher != null) {
            return (UnderlaysFetcher) fetcher;
        }
        if ((fetcher = getUnderlaysFetcherForMeId(id)) != null) {
            return (UnderlaysFetcher) addFetcher(Constants.UNDERLAYS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Underlay> getAllUnderlays() throws RestException {
        java.util.List<Underlay> allObjs = new ArrayList<Underlay>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            UnderlaysFetcher fetcher = getUnderlaysFetcherForMeId(session.getId());
            java.util.List<Underlay> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<UnderlaysFetcher> getAllUnderlaysFetchers() throws RestException {
        java.util.List<UnderlaysFetcher> allObjs = new ArrayList<UnderlaysFetcher>();
        return allObjs;
    }
    public static UnderlayTest getUnderlayTestById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            UnderlayTest obj = null;
            obj = new UnderlayTest();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.UNDERLAYTEST, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<UnderlayTest> getUnderlayTestsForFetcherId(String id) throws RestException {
        UnderlayTestsFetcher fetcher = getUnderlayTestsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.UNDERLAYTEST);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<UnderlayTest>();
    }

    public static UnderlayTestsFetcher getUnderlayTestsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.UNDERLAYTESTS_FETCHER, id);
        if (fetcher != null) {
            return (UnderlayTestsFetcher) fetcher;
        }
        if ((fetcher = getUnderlayTestsFetcherForNSGatewayId(id)) != null) {
            return (UnderlayTestsFetcher) addFetcher(Constants.UNDERLAYTESTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUnderlayTestsFetcherForUplinkConnectionId(id)) != null) {
            return (UnderlayTestsFetcher) addFetcher(Constants.UNDERLAYTESTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<UnderlayTest> getAllUnderlayTests() throws RestException {
        java.util.List<UnderlayTest> allObjs = new ArrayList<UnderlayTest>();

        return allObjs;
    }

    public static java.util.List<UnderlayTestsFetcher> getAllUnderlayTestsFetchers() throws RestException {
        java.util.List<UnderlayTestsFetcher> allObjs = new ArrayList<UnderlayTestsFetcher>();
        return allObjs;
    }
    public static UplinkConnection getUplinkConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            UplinkConnection obj = null;
            obj = new UplinkConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.UPLINKCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static BFDSessionsFetcher getBFDSessionsFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            BFDSessionsFetcher fetcher = obj.getBFDSessions();
            return addFetcher(Constants.BFDSESSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static CustomPropertiesFetcher getCustomPropertiesFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            CustomPropertiesFetcher fetcher = obj.getCustomProperties();
            return addFetcher(Constants.CUSTOMPROPERTIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UnderlayTestsFetcher getUnderlayTestsFetcherForUplinkConnectionId(String id) throws RestException {
        UplinkConnection obj = getObject(Constants.UPLINKCONNECTION, id);
        if (obj == null) {
            obj = getUplinkConnectionById(id);
        }

        if (obj != null) {
            UnderlayTestsFetcher fetcher = obj.getUnderlayTests();
            return addFetcher(Constants.UNDERLAYTESTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<UplinkConnection> getUplinkConnectionsForFetcherId(String id) throws RestException {
        UplinkConnectionsFetcher fetcher = getUplinkConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.UPLINKCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<UplinkConnection>();
    }

    public static UplinkConnectionsFetcher getUplinkConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.UPLINKCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (UplinkConnectionsFetcher) fetcher;
        }
        if ((fetcher = getUplinkConnectionsFetcherForNSGatewayId(id)) != null) {
            return (UplinkConnectionsFetcher) addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUplinkConnectionsFetcherForVLANId(id)) != null) {
            return (UplinkConnectionsFetcher) addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUplinkConnectionsFetcherForVLANTemplateId(id)) != null) {
            return (UplinkConnectionsFetcher) addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<UplinkConnection> getAllUplinkConnections() throws RestException {
        java.util.List<UplinkConnection> allObjs = new ArrayList<UplinkConnection>();

        return allObjs;
    }

    public static java.util.List<UplinkConnectionsFetcher> getAllUplinkConnectionsFetchers() throws RestException {
        java.util.List<UplinkConnectionsFetcher> allObjs = new ArrayList<UplinkConnectionsFetcher>();
        return allObjs;
    }
    public static UplinkRD getUplinkRDById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            UplinkRD obj = null;
            obj = new UplinkRD();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.UPLINKRD, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForUplinkRDId(String id) throws RestException {
        UplinkRD obj = getObject(Constants.UPLINKRD, id);
        if (obj == null) {
            obj = getUplinkRDById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForUplinkRDId(String id) throws RestException {
        UplinkRD obj = getObject(Constants.UPLINKRD, id);
        if (obj == null) {
            obj = getUplinkRDById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForUplinkRDId(String id) throws RestException {
        UplinkRD obj = getObject(Constants.UPLINKRD, id);
        if (obj == null) {
            obj = getUplinkRDById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<UplinkRD> getUplinkRDsForFetcherId(String id) throws RestException {
        UplinkRDsFetcher fetcher = getUplinkRDsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.UPLINKRD);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<UplinkRD>();
    }

    public static UplinkRDsFetcher getUplinkRDsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.UPLINKRDS_FETCHER, id);
        if (fetcher != null) {
            return (UplinkRDsFetcher) fetcher;
        }
        if ((fetcher = getUplinkRDsFetcherForAggregatedDomainId(id)) != null) {
            return (UplinkRDsFetcher) addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUplinkRDsFetcherForDomainId(id)) != null) {
            return (UplinkRDsFetcher) addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUplinkRDsFetcherForL2DomainId(id)) != null) {
            return (UplinkRDsFetcher) addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUplinkRDsFetcherForMeId(id)) != null) {
            return (UplinkRDsFetcher) addFetcher(Constants.UPLINKRDS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<UplinkRD> getAllUplinkRDs() throws RestException {
        java.util.List<UplinkRD> allObjs = new ArrayList<UplinkRD>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            UplinkRDsFetcher fetcher = getUplinkRDsFetcherForMeId(session.getId());
            java.util.List<UplinkRD> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<UplinkRDsFetcher> getAllUplinkRDsFetchers() throws RestException {
        java.util.List<UplinkRDsFetcher> allObjs = new ArrayList<UplinkRDsFetcher>();
        return allObjs;
    }
    public static User getUserById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            User obj = null;
            obj = new User();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.USER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AvatarsFetcher getAvatarsFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            AvatarsFetcher fetcher = obj.getAvatars();
            return addFetcher(Constants.AVATARS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForUserId(String id) throws RestException {
        User obj = getObject(Constants.USER, id);
        if (obj == null) {
            obj = getUserById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<User> getUsersForFetcherId(String id) throws RestException {
        UsersFetcher fetcher = getUsersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.USER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<User>();
    }

    public static UsersFetcher getUsersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.USERS_FETCHER, id);
        if (fetcher != null) {
            return (UsersFetcher) fetcher;
        }
        if ((fetcher = getUsersFetcherForEnterpriseId(id)) != null) {
            return (UsersFetcher) addFetcher(Constants.USERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUsersFetcherForGroupId(id)) != null) {
            return (UsersFetcher) addFetcher(Constants.USERS_FETCHER, fetcher);
        }
        
        if ((fetcher = getUsersFetcherForMeId(id)) != null) {
            return (UsersFetcher) addFetcher(Constants.USERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<User> getAllUsers() throws RestException {
        java.util.List<User> allObjs = new ArrayList<User>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            UsersFetcher fetcher = getUsersFetcherForMeId(session.getId());
            java.util.List<User> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<UsersFetcher> getAllUsersFetchers() throws RestException {
        java.util.List<UsersFetcher> allObjs = new ArrayList<UsersFetcher>();
        return allObjs;
    }
    public static UserContext getUserContextById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            UserContext obj = null;
            obj = new UserContext();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.USERCONTEXT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForUserContextId(String id) throws RestException {
        UserContext obj = getObject(Constants.USERCONTEXT, id);
        if (obj == null) {
            obj = getUserContextById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForUserContextId(String id) throws RestException {
        UserContext obj = getObject(Constants.USERCONTEXT, id);
        if (obj == null) {
            obj = getUserContextById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForUserContextId(String id) throws RestException {
        UserContext obj = getObject(Constants.USERCONTEXT, id);
        if (obj == null) {
            obj = getUserContextById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<UserContext> getUserContextsForFetcherId(String id) throws RestException {
        UserContextsFetcher fetcher = getUserContextsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.USERCONTEXT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<UserContext>();
    }

    public static UserContextsFetcher getUserContextsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.USERCONTEXTS_FETCHER, id);
        if (fetcher != null) {
            return (UserContextsFetcher) fetcher;
        }
        if ((fetcher = getUserContextsFetcherForMeId(id)) != null) {
            return (UserContextsFetcher) addFetcher(Constants.USERCONTEXTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<UserContext> getAllUserContexts() throws RestException {
        java.util.List<UserContext> allObjs = new ArrayList<UserContext>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            UserContextsFetcher fetcher = getUserContextsFetcherForMeId(session.getId());
            java.util.List<UserContext> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<UserContextsFetcher> getAllUserContextsFetchers() throws RestException {
        java.util.List<UserContextsFetcher> allObjs = new ArrayList<UserContextsFetcher>();
        return allObjs;
    }
    public static VCenter getVCenterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenter obj = null;
            obj = new VCenter();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AutodiscovereddatacentersFetcher getAutodiscovereddatacentersFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            AutodiscovereddatacentersFetcher fetcher = obj.getAutodiscovereddatacenters();
            return addFetcher(Constants.AUTODISCOVEREDDATACENTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterDataCentersFetcher getVCenterDataCentersFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            VCenterDataCentersFetcher fetcher = obj.getVCenterDataCenters();
            return addFetcher(Constants.VCENTERDATACENTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            VRSAddressRangesFetcher fetcher = obj.getVRSAddressRanges();
            return addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherForVCenterId(String id) throws RestException {
        VCenter obj = getObject(Constants.VCENTER, id);
        if (obj == null) {
            obj = getVCenterById(id);
        }

        if (obj != null) {
            VRSRedeploymentpoliciesFetcher fetcher = obj.getVRSRedeploymentpolicies();
            return addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenter> getVCentersForFetcherId(String id) throws RestException {
        VCentersFetcher fetcher = getVCentersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenter>();
    }

    public static VCentersFetcher getVCentersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTERS_FETCHER, id);
        if (fetcher != null) {
            return (VCentersFetcher) fetcher;
        }
        if ((fetcher = getVCentersFetcherForMeId(id)) != null) {
            return (VCentersFetcher) addFetcher(Constants.VCENTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenter> getAllVCenters() throws RestException {
        java.util.List<VCenter> allObjs = new ArrayList<VCenter>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCentersFetcher fetcher = getVCentersFetcherForMeId(session.getId());
            java.util.List<VCenter> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VCentersFetcher> getAllVCentersFetchers() throws RestException {
        java.util.List<VCentersFetcher> allObjs = new ArrayList<VCentersFetcher>();
        return allObjs;
    }
    public static VCenterCluster getVCenterClusterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterCluster obj = null;
            obj = new VCenterCluster();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTERCLUSTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AutoDiscoverHypervisorFromClustersFetcher getAutoDiscoverHypervisorFromClustersFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            AutoDiscoverHypervisorFromClustersFetcher fetcher = obj.getAutoDiscoverHypervisorFromClusters();
            return addFetcher(Constants.AUTODISCOVERHYPERVISORFROMCLUSTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterHypervisorsFetcher getVCenterHypervisorsFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            VCenterHypervisorsFetcher fetcher = obj.getVCenterHypervisors();
            return addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            VRSAddressRangesFetcher fetcher = obj.getVRSAddressRanges();
            return addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherForVCenterClusterId(String id) throws RestException {
        VCenterCluster obj = getObject(Constants.VCENTERCLUSTER, id);
        if (obj == null) {
            obj = getVCenterClusterById(id);
        }

        if (obj != null) {
            VRSRedeploymentpoliciesFetcher fetcher = obj.getVRSRedeploymentpolicies();
            return addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenterCluster> getVCenterClustersForFetcherId(String id) throws RestException {
        VCenterClustersFetcher fetcher = getVCenterClustersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTERCLUSTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenterCluster>();
    }

    public static VCenterClustersFetcher getVCenterClustersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTERCLUSTERS_FETCHER, id);
        if (fetcher != null) {
            return (VCenterClustersFetcher) fetcher;
        }
        if ((fetcher = getVCenterClustersFetcherForVCenterDataCenterId(id)) != null) {
            return (VCenterClustersFetcher) addFetcher(Constants.VCENTERCLUSTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenterCluster> getAllVCenterClusters() throws RestException {
        java.util.List<VCenterCluster> allObjs = new ArrayList<VCenterCluster>();

        return allObjs;
    }

    public static java.util.List<VCenterClustersFetcher> getAllVCenterClustersFetchers() throws RestException {
        java.util.List<VCenterClustersFetcher> allObjs = new ArrayList<VCenterClustersFetcher>();
        return allObjs;
    }
    public static VCenterDataCenter getVCenterDataCenterById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterDataCenter obj = null;
            obj = new VCenterDataCenter();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTERDATACENTER, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AutoDiscoverClustersFetcher getAutoDiscoverClustersFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            AutoDiscoverClustersFetcher fetcher = obj.getAutoDiscoverClusters();
            return addFetcher(Constants.AUTODISCOVERCLUSTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AutoDiscoverHypervisorFromClustersFetcher getAutoDiscoverHypervisorFromClustersFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            AutoDiscoverHypervisorFromClustersFetcher fetcher = obj.getAutoDiscoverHypervisorFromClusters();
            return addFetcher(Constants.AUTODISCOVERHYPERVISORFROMCLUSTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterClustersFetcher getVCenterClustersFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            VCenterClustersFetcher fetcher = obj.getVCenterClusters();
            return addFetcher(Constants.VCENTERCLUSTERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VCenterHypervisorsFetcher getVCenterHypervisorsFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            VCenterHypervisorsFetcher fetcher = obj.getVCenterHypervisors();
            return addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            VRSAddressRangesFetcher fetcher = obj.getVRSAddressRanges();
            return addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherForVCenterDataCenterId(String id) throws RestException {
        VCenterDataCenter obj = getObject(Constants.VCENTERDATACENTER, id);
        if (obj == null) {
            obj = getVCenterDataCenterById(id);
        }

        if (obj != null) {
            VRSRedeploymentpoliciesFetcher fetcher = obj.getVRSRedeploymentpolicies();
            return addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenterDataCenter> getVCenterDataCentersForFetcherId(String id) throws RestException {
        VCenterDataCentersFetcher fetcher = getVCenterDataCentersFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTERDATACENTER);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenterDataCenter>();
    }

    public static VCenterDataCentersFetcher getVCenterDataCentersFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTERDATACENTERS_FETCHER, id);
        if (fetcher != null) {
            return (VCenterDataCentersFetcher) fetcher;
        }
        if ((fetcher = getVCenterDataCentersFetcherForVCenterId(id)) != null) {
            return (VCenterDataCentersFetcher) addFetcher(Constants.VCENTERDATACENTERS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenterDataCenter> getAllVCenterDataCenters() throws RestException {
        java.util.List<VCenterDataCenter> allObjs = new ArrayList<VCenterDataCenter>();

        return allObjs;
    }

    public static java.util.List<VCenterDataCentersFetcher> getAllVCenterDataCentersFetchers() throws RestException {
        java.util.List<VCenterDataCentersFetcher> allObjs = new ArrayList<VCenterDataCentersFetcher>();
        return allObjs;
    }
    public static VCenterHypervisor getVCenterHypervisorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterHypervisor obj = null;
            obj = new VCenterHypervisor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTERHYPERVISOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            VRSAddressRangesFetcher fetcher = obj.getVRSAddressRanges();
            return addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSMetricsFetcher getVRSMetricsFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            VRSMetricsFetcher fetcher = obj.getVRSMetrics();
            return addFetcher(Constants.VRSMETRICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherForVCenterHypervisorId(String id) throws RestException {
        VCenterHypervisor obj = getObject(Constants.VCENTERHYPERVISOR, id);
        if (obj == null) {
            obj = getVCenterHypervisorById(id);
        }

        if (obj != null) {
            VRSRedeploymentpoliciesFetcher fetcher = obj.getVRSRedeploymentpolicies();
            return addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenterHypervisor> getVCenterHypervisorsForFetcherId(String id) throws RestException {
        VCenterHypervisorsFetcher fetcher = getVCenterHypervisorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTERHYPERVISOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenterHypervisor>();
    }

    public static VCenterHypervisorsFetcher getVCenterHypervisorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTERHYPERVISORS_FETCHER, id);
        if (fetcher != null) {
            return (VCenterHypervisorsFetcher) fetcher;
        }
        if ((fetcher = getVCenterHypervisorsFetcherForMeId(id)) != null) {
            return (VCenterHypervisorsFetcher) addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVCenterHypervisorsFetcherForVCenterClusterId(id)) != null) {
            return (VCenterHypervisorsFetcher) addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVCenterHypervisorsFetcherForVCenterDataCenterId(id)) != null) {
            return (VCenterHypervisorsFetcher) addFetcher(Constants.VCENTERHYPERVISORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenterHypervisor> getAllVCenterHypervisors() throws RestException {
        java.util.List<VCenterHypervisor> allObjs = new ArrayList<VCenterHypervisor>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterHypervisorsFetcher fetcher = getVCenterHypervisorsFetcherForMeId(session.getId());
            java.util.List<VCenterHypervisor> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VCenterHypervisorsFetcher> getAllVCenterHypervisorsFetchers() throws RestException {
        java.util.List<VCenterHypervisorsFetcher> allObjs = new ArrayList<VCenterHypervisorsFetcher>();
        return allObjs;
    }
    public static VirtualFirewallPolicy getVirtualFirewallPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualFirewallPolicy obj = null;
            obj = new VirtualFirewallPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VIRTUALFIREWALLPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVirtualFirewallPolicyId(String id) throws RestException {
        VirtualFirewallPolicy obj = getObject(Constants.VIRTUALFIREWALLPOLICY, id);
        if (obj == null) {
            obj = getVirtualFirewallPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVirtualFirewallPolicyId(String id) throws RestException {
        VirtualFirewallPolicy obj = getObject(Constants.VIRTUALFIREWALLPOLICY, id);
        if (obj == null) {
            obj = getVirtualFirewallPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVirtualFirewallPolicyId(String id) throws RestException {
        VirtualFirewallPolicy obj = getObject(Constants.VIRTUALFIREWALLPOLICY, id);
        if (obj == null) {
            obj = getVirtualFirewallPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherForVirtualFirewallPolicyId(String id) throws RestException {
        VirtualFirewallPolicy obj = getObject(Constants.VIRTUALFIREWALLPOLICY, id);
        if (obj == null) {
            obj = getVirtualFirewallPolicyById(id);
        }

        if (obj != null) {
            VirtualFirewallRulesFetcher fetcher = obj.getVirtualFirewallRules();
            return addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VirtualFirewallPolicy> getVirtualFirewallPoliciesForFetcherId(String id) throws RestException {
        VirtualFirewallPoliciesFetcher fetcher = getVirtualFirewallPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VIRTUALFIREWALLPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VirtualFirewallPolicy>();
    }

    public static VirtualFirewallPoliciesFetcher getVirtualFirewallPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (VirtualFirewallPoliciesFetcher) fetcher;
        }
        if ((fetcher = getVirtualFirewallPoliciesFetcherForAggregatedDomainId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallPoliciesFetcherForDomainId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallPoliciesFetcherForDomainTemplateId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallPoliciesFetcherForL2DomainId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallPoliciesFetcherForL2DomainTemplateId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallPoliciesFetcherForMeId(id)) != null) {
            return (VirtualFirewallPoliciesFetcher) addFetcher(Constants.VIRTUALFIREWALLPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VirtualFirewallPolicy> getAllVirtualFirewallPolicies() throws RestException {
        java.util.List<VirtualFirewallPolicy> allObjs = new ArrayList<VirtualFirewallPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualFirewallPoliciesFetcher fetcher = getVirtualFirewallPoliciesFetcherForMeId(session.getId());
            java.util.List<VirtualFirewallPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VirtualFirewallPoliciesFetcher> getAllVirtualFirewallPoliciesFetchers() throws RestException {
        java.util.List<VirtualFirewallPoliciesFetcher> allObjs = new ArrayList<VirtualFirewallPoliciesFetcher>();
        return allObjs;
    }
    public static VirtualFirewallRule getVirtualFirewallRuleById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualFirewallRule obj = null;
            obj = new VirtualFirewallRule();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VIRTUALFIREWALLRULE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVirtualFirewallRuleId(String id) throws RestException {
        VirtualFirewallRule obj = getObject(Constants.VIRTUALFIREWALLRULE, id);
        if (obj == null) {
            obj = getVirtualFirewallRuleById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVirtualFirewallRuleId(String id) throws RestException {
        VirtualFirewallRule obj = getObject(Constants.VIRTUALFIREWALLRULE, id);
        if (obj == null) {
            obj = getVirtualFirewallRuleById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVirtualFirewallRuleId(String id) throws RestException {
        VirtualFirewallRule obj = getObject(Constants.VIRTUALFIREWALLRULE, id);
        if (obj == null) {
            obj = getVirtualFirewallRuleById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VirtualFirewallRule> getVirtualFirewallRulesForFetcherId(String id) throws RestException {
        VirtualFirewallRulesFetcher fetcher = getVirtualFirewallRulesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VIRTUALFIREWALLRULE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VirtualFirewallRule>();
    }

    public static VirtualFirewallRulesFetcher getVirtualFirewallRulesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, id);
        if (fetcher != null) {
            return (VirtualFirewallRulesFetcher) fetcher;
        }
        if ((fetcher = getVirtualFirewallRulesFetcherForAggregatedDomainId(id)) != null) {
            return (VirtualFirewallRulesFetcher) addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallRulesFetcherForDomainId(id)) != null) {
            return (VirtualFirewallRulesFetcher) addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallRulesFetcherForL2DomainId(id)) != null) {
            return (VirtualFirewallRulesFetcher) addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallRulesFetcherForMeId(id)) != null) {
            return (VirtualFirewallRulesFetcher) addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualFirewallRulesFetcherForVirtualFirewallPolicyId(id)) != null) {
            return (VirtualFirewallRulesFetcher) addFetcher(Constants.VIRTUALFIREWALLRULES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VirtualFirewallRule> getAllVirtualFirewallRules() throws RestException {
        java.util.List<VirtualFirewallRule> allObjs = new ArrayList<VirtualFirewallRule>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualFirewallRulesFetcher fetcher = getVirtualFirewallRulesFetcherForMeId(session.getId());
            java.util.List<VirtualFirewallRule> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VirtualFirewallRulesFetcher> getAllVirtualFirewallRulesFetchers() throws RestException {
        java.util.List<VirtualFirewallRulesFetcher> allObjs = new ArrayList<VirtualFirewallRulesFetcher>();
        return allObjs;
    }
    public static VirtualIP getVirtualIPById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualIP obj = null;
            obj = new VirtualIP();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VIRTUALIP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForVirtualIPId(String id) throws RestException {
        VirtualIP obj = getObject(Constants.VIRTUALIP, id);
        if (obj == null) {
            obj = getVirtualIPById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVirtualIPId(String id) throws RestException {
        VirtualIP obj = getObject(Constants.VIRTUALIP, id);
        if (obj == null) {
            obj = getVirtualIPById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVirtualIPId(String id) throws RestException {
        VirtualIP obj = getObject(Constants.VIRTUALIP, id);
        if (obj == null) {
            obj = getVirtualIPById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVirtualIPId(String id) throws RestException {
        VirtualIP obj = getObject(Constants.VIRTUALIP, id);
        if (obj == null) {
            obj = getVirtualIPById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VirtualIP> getVirtualIPsForFetcherId(String id) throws RestException {
        VirtualIPsFetcher fetcher = getVirtualIPsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VIRTUALIP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VirtualIP>();
    }

    public static VirtualIPsFetcher getVirtualIPsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VIRTUALIPS_FETCHER, id);
        if (fetcher != null) {
            return (VirtualIPsFetcher) fetcher;
        }
        if ((fetcher = getVirtualIPsFetcherForRedirectionTargetId(id)) != null) {
            return (VirtualIPsFetcher) addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualIPsFetcherForSubnetId(id)) != null) {
            return (VirtualIPsFetcher) addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualIPsFetcherForVPortId(id)) != null) {
            return (VirtualIPsFetcher) addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VirtualIP> getAllVirtualIPs() throws RestException {
        java.util.List<VirtualIP> allObjs = new ArrayList<VirtualIP>();

        return allObjs;
    }

    public static java.util.List<VirtualIPsFetcher> getAllVirtualIPsFetchers() throws RestException {
        java.util.List<VirtualIPsFetcher> allObjs = new ArrayList<VirtualIPsFetcher>();
        return allObjs;
    }
    public static VirtualUplink getVirtualUplinkById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VirtualUplink obj = null;
            obj = new VirtualUplink();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VIRTUALUPLINK, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static IKEGatewayConnectionsFetcher getIKEGatewayConnectionsFetcherForVirtualUplinkId(String id) throws RestException {
        VirtualUplink obj = getObject(Constants.VIRTUALUPLINK, id);
        if (obj == null) {
            obj = getVirtualUplinkById(id);
        }

        if (obj != null) {
            IKEGatewayConnectionsFetcher fetcher = obj.getIKEGatewayConnections();
            return addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VirtualUplink> getVirtualUplinksForFetcherId(String id) throws RestException {
        VirtualUplinksFetcher fetcher = getVirtualUplinksFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VIRTUALUPLINK);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VirtualUplink>();
    }

    public static VirtualUplinksFetcher getVirtualUplinksFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VIRTUALUPLINKS_FETCHER, id);
        if (fetcher != null) {
            return (VirtualUplinksFetcher) fetcher;
        }
        if ((fetcher = getVirtualUplinksFetcherForNSGatewayId(id)) != null) {
            return (VirtualUplinksFetcher) addFetcher(Constants.VIRTUALUPLINKS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVirtualUplinksFetcherForShuntLinkId(id)) != null) {
            return (VirtualUplinksFetcher) addFetcher(Constants.VIRTUALUPLINKS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VirtualUplink> getAllVirtualUplinks() throws RestException {
        java.util.List<VirtualUplink> allObjs = new ArrayList<VirtualUplink>();

        return allObjs;
    }

    public static java.util.List<VirtualUplinksFetcher> getAllVirtualUplinksFetchers() throws RestException {
        java.util.List<VirtualUplinksFetcher> allObjs = new ArrayList<VirtualUplinksFetcher>();
        return allObjs;
    }
    public static VLAN getVLANById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VLAN obj = null;
            obj = new VLAN();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VLAN, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPNeighborsFetcher getBGPNeighborsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            BGPNeighborsFetcher fetcher = obj.getBGPNeighbors();
            return addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BRConnectionsFetcher getBRConnectionsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            BRConnectionsFetcher fetcher = obj.getBRConnections();
            return addFetcher(Constants.BRCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IKEGatewayConnectionsFetcher getIKEGatewayConnectionsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            IKEGatewayConnectionsFetcher fetcher = obj.getIKEGatewayConnections();
            return addFetcher(Constants.IKEGATEWAYCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static LtestatisticsFetcher getLtestatisticsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            LtestatisticsFetcher fetcher = obj.getLtestatistics();
            return addFetcher(Constants.LTESTATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PATNATPoolsFetcher getPATNATPoolsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            PATNATPoolsFetcher fetcher = obj.getPATNATPools();
            return addFetcher(Constants.PATNATPOOLS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkConnectionsFetcher getUplinkConnectionsFetcherForVLANId(String id) throws RestException {
        VLAN obj = getObject(Constants.VLAN, id);
        if (obj == null) {
            obj = getVLANById(id);
        }

        if (obj != null) {
            UplinkConnectionsFetcher fetcher = obj.getUplinkConnections();
            return addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VLAN> getVLANsForFetcherId(String id) throws RestException {
        VLANsFetcher fetcher = getVLANsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VLAN);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VLAN>();
    }

    public static VLANsFetcher getVLANsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VLANS_FETCHER, id);
        if (fetcher != null) {
            return (VLANsFetcher) fetcher;
        }
        if ((fetcher = getVLANsFetcherForEthernetSegmentGroupId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANsFetcherForGatewayRedundantPortId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANsFetcherForNSPortId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANsFetcherForRedundantPortId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANsFetcherForPortId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANsFetcherForVsgRedundantPortId(id)) != null) {
            return (VLANsFetcher) addFetcher(Constants.VLANS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VLAN> getAllVLANs() throws RestException {
        java.util.List<VLAN> allObjs = new ArrayList<VLAN>();

        return allObjs;
    }

    public static java.util.List<VLANsFetcher> getAllVLANsFetchers() throws RestException {
        java.util.List<VLANsFetcher> allObjs = new ArrayList<VLANsFetcher>();
        return allObjs;
    }
    public static VLANTemplate getVLANTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VLANTemplate obj = null;
            obj = new VLANTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VLANTEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static BRConnectionsFetcher getBRConnectionsFetcherForVLANTemplateId(String id) throws RestException {
        VLANTemplate obj = getObject(Constants.VLANTEMPLATE, id);
        if (obj == null) {
            obj = getVLANTemplateById(id);
        }

        if (obj != null) {
            BRConnectionsFetcher fetcher = obj.getBRConnections();
            return addFetcher(Constants.BRCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVLANTemplateId(String id) throws RestException {
        VLANTemplate obj = getObject(Constants.VLANTEMPLATE, id);
        if (obj == null) {
            obj = getVLANTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVLANTemplateId(String id) throws RestException {
        VLANTemplate obj = getObject(Constants.VLANTEMPLATE, id);
        if (obj == null) {
            obj = getVLANTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVLANTemplateId(String id) throws RestException {
        VLANTemplate obj = getObject(Constants.VLANTEMPLATE, id);
        if (obj == null) {
            obj = getVLANTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static UplinkConnectionsFetcher getUplinkConnectionsFetcherForVLANTemplateId(String id) throws RestException {
        VLANTemplate obj = getObject(Constants.VLANTEMPLATE, id);
        if (obj == null) {
            obj = getVLANTemplateById(id);
        }

        if (obj != null) {
            UplinkConnectionsFetcher fetcher = obj.getUplinkConnections();
            return addFetcher(Constants.UPLINKCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VLANTemplate> getVLANTemplatesForFetcherId(String id) throws RestException {
        VLANTemplatesFetcher fetcher = getVLANTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VLANTEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VLANTemplate>();
    }

    public static VLANTemplatesFetcher getVLANTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VLANTEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (VLANTemplatesFetcher) fetcher;
        }
        if ((fetcher = getVLANTemplatesFetcherForNSPortTemplateId(id)) != null) {
            return (VLANTemplatesFetcher) addFetcher(Constants.VLANTEMPLATES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVLANTemplatesFetcherForPortTemplateId(id)) != null) {
            return (VLANTemplatesFetcher) addFetcher(Constants.VLANTEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VLANTemplate> getAllVLANTemplates() throws RestException {
        java.util.List<VLANTemplate> allObjs = new ArrayList<VLANTemplate>();

        return allObjs;
    }

    public static java.util.List<VLANTemplatesFetcher> getAllVLANTemplatesFetchers() throws RestException {
        java.util.List<VLANTemplatesFetcher> allObjs = new ArrayList<VLANTemplatesFetcher>();
        return allObjs;
    }
    public static VM getVMById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VM obj = null;
            obj = new VM();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VM, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMResyncsFetcher getVMResyncsFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            VMResyncsFetcher fetcher = obj.getVMResyncs();
            return addFetcher(Constants.VMRESYNCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSsFetcher getVRSsFetcherForVMId(String id) throws RestException {
        VM obj = getObject(Constants.VM, id);
        if (obj == null) {
            obj = getVMById(id);
        }

        if (obj != null) {
            VRSsFetcher fetcher = obj.getVRSs();
            return addFetcher(Constants.VRSS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VM> getVMsForFetcherId(String id) throws RestException {
        VMsFetcher fetcher = getVMsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VM);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VM>();
    }

    public static VMsFetcher getVMsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VMS_FETCHER, id);
        if (fetcher != null) {
            return (VMsFetcher) fetcher;
        }
        if ((fetcher = getVMsFetcherForAggregatedDomainId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForDomainId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForEgressACLTemplateId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForEnterpriseId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForIngressACLTemplateId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForL2DomainId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForMeId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForQOSId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForSubnetId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForUserId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForVPortId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForVRSId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMsFetcherForZoneId(id)) != null) {
            return (VMsFetcher) addFetcher(Constants.VMS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VM> getAllVMs() throws RestException {
        java.util.List<VM> allObjs = new ArrayList<VM>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VMsFetcher fetcher = getVMsFetcherForMeId(session.getId());
            java.util.List<VM> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VMsFetcher> getAllVMsFetchers() throws RestException {
        java.util.List<VMsFetcher> allObjs = new ArrayList<VMsFetcher>();
        return allObjs;
    }
    public static VMInterface getVMInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VMInterface obj = null;
            obj = new VMInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VMINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiCastChannelMapsFetcher getMultiCastChannelMapsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            MultiCastChannelMapsFetcher fetcher = obj.getMultiCastChannelMaps();
            return addFetcher(Constants.MULTICASTCHANNELMAPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyDecisionsFetcher getPolicyDecisionsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            PolicyDecisionsFetcher fetcher = obj.getPolicyDecisions();
            return addFetcher(Constants.POLICYDECISIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StaticRoutesFetcher getStaticRoutesFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            StaticRoutesFetcher fetcher = obj.getStaticRoutes();
            return addFetcher(Constants.STATICROUTES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForVMInterfaceId(String id) throws RestException {
        VMInterface obj = getObject(Constants.VMINTERFACE, id);
        if (obj == null) {
            obj = getVMInterfaceById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VMInterface> getVMInterfacesForFetcherId(String id) throws RestException {
        VMInterfacesFetcher fetcher = getVMInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VMINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VMInterface>();
    }

    public static VMInterfacesFetcher getVMInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VMINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (VMInterfacesFetcher) fetcher;
        }
        if ((fetcher = getVMInterfacesFetcherForAggregatedDomainId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForDomainId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForL2DomainId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForMeId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForSubnetId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForVMId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForVPortId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMInterfacesFetcherForZoneId(id)) != null) {
            return (VMInterfacesFetcher) addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VMInterface> getAllVMInterfaces() throws RestException {
        java.util.List<VMInterface> allObjs = new ArrayList<VMInterface>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VMInterfacesFetcher fetcher = getVMInterfacesFetcherForMeId(session.getId());
            java.util.List<VMInterface> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VMInterfacesFetcher> getAllVMInterfacesFetchers() throws RestException {
        java.util.List<VMInterfacesFetcher> allObjs = new ArrayList<VMInterfacesFetcher>();
        return allObjs;
    }
    public static VMIPReservation getVMIPReservationById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VMIPReservation obj = null;
            obj = new VMIPReservation();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VMIPRESERVATION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVMIPReservationId(String id) throws RestException {
        VMIPReservation obj = getObject(Constants.VMIPRESERVATION, id);
        if (obj == null) {
            obj = getVMIPReservationById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVMIPReservationId(String id) throws RestException {
        VMIPReservation obj = getObject(Constants.VMIPRESERVATION, id);
        if (obj == null) {
            obj = getVMIPReservationById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVMIPReservationId(String id) throws RestException {
        VMIPReservation obj = getObject(Constants.VMIPRESERVATION, id);
        if (obj == null) {
            obj = getVMIPReservationById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VMIPReservation> getVMIPReservationsForFetcherId(String id) throws RestException {
        VMIPReservationsFetcher fetcher = getVMIPReservationsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VMIPRESERVATION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VMIPReservation>();
    }

    public static VMIPReservationsFetcher getVMIPReservationsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VMIPRESERVATIONS_FETCHER, id);
        if (fetcher != null) {
            return (VMIPReservationsFetcher) fetcher;
        }
        if ((fetcher = getVMIPReservationsFetcherForL2DomainId(id)) != null) {
            return (VMIPReservationsFetcher) addFetcher(Constants.VMIPRESERVATIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVMIPReservationsFetcherForSubnetId(id)) != null) {
            return (VMIPReservationsFetcher) addFetcher(Constants.VMIPRESERVATIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VMIPReservation> getAllVMIPReservations() throws RestException {
        java.util.List<VMIPReservation> allObjs = new ArrayList<VMIPReservation>();

        return allObjs;
    }

    public static java.util.List<VMIPReservationsFetcher> getAllVMIPReservationsFetchers() throws RestException {
        java.util.List<VMIPReservationsFetcher> allObjs = new ArrayList<VMIPReservationsFetcher>();
        return allObjs;
    }
    public static VNF getVNFById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNF obj = null;
            obj = new VNF();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNF, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFInterfacesFetcher getVNFInterfacesFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            VNFInterfacesFetcher fetcher = obj.getVNFInterfaces();
            return addFetcher(Constants.VNFINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFMetadatasFetcher getVNFMetadatasFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            VNFMetadatasFetcher fetcher = obj.getVNFMetadatas();
            return addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFThresholdPoliciesFetcher getVNFThresholdPoliciesFetcherForVNFId(String id) throws RestException {
        VNF obj = getObject(Constants.VNF, id);
        if (obj == null) {
            obj = getVNFById(id);
        }

        if (obj != null) {
            VNFThresholdPoliciesFetcher fetcher = obj.getVNFThresholdPolicies();
            return addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNF> getVNFsForFetcherId(String id) throws RestException {
        VNFsFetcher fetcher = getVNFsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNF);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNF>();
    }

    public static VNFsFetcher getVNFsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFS_FETCHER, id);
        if (fetcher != null) {
            return (VNFsFetcher) fetcher;
        }
        if ((fetcher = getVNFsFetcherForEnterpriseId(id)) != null) {
            return (VNFsFetcher) addFetcher(Constants.VNFS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFsFetcherForNSGatewayId(id)) != null) {
            return (VNFsFetcher) addFetcher(Constants.VNFS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNF> getAllVNFs() throws RestException {
        java.util.List<VNF> allObjs = new ArrayList<VNF>();

        return allObjs;
    }

    public static java.util.List<VNFsFetcher> getAllVNFsFetchers() throws RestException {
        java.util.List<VNFsFetcher> allObjs = new ArrayList<VNFsFetcher>();
        return allObjs;
    }
    public static VNFCatalog getVNFCatalogById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFCatalog obj = null;
            obj = new VNFCatalog();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFCATALOG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFCatalogId(String id) throws RestException {
        VNFCatalog obj = getObject(Constants.VNFCATALOG, id);
        if (obj == null) {
            obj = getVNFCatalogById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFCatalogId(String id) throws RestException {
        VNFCatalog obj = getObject(Constants.VNFCATALOG, id);
        if (obj == null) {
            obj = getVNFCatalogById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFCatalogId(String id) throws RestException {
        VNFCatalog obj = getObject(Constants.VNFCATALOG, id);
        if (obj == null) {
            obj = getVNFCatalogById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFDescriptorsFetcher getVNFDescriptorsFetcherForVNFCatalogId(String id) throws RestException {
        VNFCatalog obj = getObject(Constants.VNFCATALOG, id);
        if (obj == null) {
            obj = getVNFCatalogById(id);
        }

        if (obj != null) {
            VNFDescriptorsFetcher fetcher = obj.getVNFDescriptors();
            return addFetcher(Constants.VNFDESCRIPTORS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFCatalog> getVNFCatalogsForFetcherId(String id) throws RestException {
        VNFCatalogsFetcher fetcher = getVNFCatalogsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFCATALOG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFCatalog>();
    }

    public static VNFCatalogsFetcher getVNFCatalogsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFCATALOGS_FETCHER, id);
        if (fetcher != null) {
            return (VNFCatalogsFetcher) fetcher;
        }
        if ((fetcher = getVNFCatalogsFetcherForMeId(id)) != null) {
            return (VNFCatalogsFetcher) addFetcher(Constants.VNFCATALOGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFCatalog> getAllVNFCatalogs() throws RestException {
        java.util.List<VNFCatalog> allObjs = new ArrayList<VNFCatalog>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFCatalogsFetcher fetcher = getVNFCatalogsFetcherForMeId(session.getId());
            java.util.List<VNFCatalog> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VNFCatalogsFetcher> getAllVNFCatalogsFetchers() throws RestException {
        java.util.List<VNFCatalogsFetcher> allObjs = new ArrayList<VNFCatalogsFetcher>();
        return allObjs;
    }
    public static VNFDescriptor getVNFDescriptorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFDescriptor obj = null;
            obj = new VNFDescriptor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFDESCRIPTOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFDescriptorId(String id) throws RestException {
        VNFDescriptor obj = getObject(Constants.VNFDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFDescriptorById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFDescriptorId(String id) throws RestException {
        VNFDescriptor obj = getObject(Constants.VNFDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFDescriptorById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFDescriptorId(String id) throws RestException {
        VNFDescriptor obj = getObject(Constants.VNFDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFDescriptorById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFInterfaceDescriptorsFetcher getVNFInterfaceDescriptorsFetcherForVNFDescriptorId(String id) throws RestException {
        VNFDescriptor obj = getObject(Constants.VNFDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFDescriptorById(id);
        }

        if (obj != null) {
            VNFInterfaceDescriptorsFetcher fetcher = obj.getVNFInterfaceDescriptors();
            return addFetcher(Constants.VNFINTERFACEDESCRIPTORS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFDescriptor> getVNFDescriptorsForFetcherId(String id) throws RestException {
        VNFDescriptorsFetcher fetcher = getVNFDescriptorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFDESCRIPTOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFDescriptor>();
    }

    public static VNFDescriptorsFetcher getVNFDescriptorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFDESCRIPTORS_FETCHER, id);
        if (fetcher != null) {
            return (VNFDescriptorsFetcher) fetcher;
        }
        if ((fetcher = getVNFDescriptorsFetcherForVNFCatalogId(id)) != null) {
            return (VNFDescriptorsFetcher) addFetcher(Constants.VNFDESCRIPTORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFDescriptor> getAllVNFDescriptors() throws RestException {
        java.util.List<VNFDescriptor> allObjs = new ArrayList<VNFDescriptor>();

        return allObjs;
    }

    public static java.util.List<VNFDescriptorsFetcher> getAllVNFDescriptorsFetchers() throws RestException {
        java.util.List<VNFDescriptorsFetcher> allObjs = new ArrayList<VNFDescriptorsFetcher>();
        return allObjs;
    }
    public static VNFDomainMapping getVNFDomainMappingById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFDomainMapping obj = null;
            obj = new VNFDomainMapping();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFDOMAINMAPPING, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFDomainMappingId(String id) throws RestException {
        VNFDomainMapping obj = getObject(Constants.VNFDOMAINMAPPING, id);
        if (obj == null) {
            obj = getVNFDomainMappingById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFDomainMappingId(String id) throws RestException {
        VNFDomainMapping obj = getObject(Constants.VNFDOMAINMAPPING, id);
        if (obj == null) {
            obj = getVNFDomainMappingById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFDomainMappingId(String id) throws RestException {
        VNFDomainMapping obj = getObject(Constants.VNFDOMAINMAPPING, id);
        if (obj == null) {
            obj = getVNFDomainMappingById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFDomainMapping> getVNFDomainMappingsForFetcherId(String id) throws RestException {
        VNFDomainMappingsFetcher fetcher = getVNFDomainMappingsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFDOMAINMAPPING);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFDomainMapping>();
    }

    public static VNFDomainMappingsFetcher getVNFDomainMappingsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFDOMAINMAPPINGS_FETCHER, id);
        if (fetcher != null) {
            return (VNFDomainMappingsFetcher) fetcher;
        }
        if ((fetcher = getVNFDomainMappingsFetcherForAggregatedDomainId(id)) != null) {
            return (VNFDomainMappingsFetcher) addFetcher(Constants.VNFDOMAINMAPPINGS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFDomainMappingsFetcherForDomainId(id)) != null) {
            return (VNFDomainMappingsFetcher) addFetcher(Constants.VNFDOMAINMAPPINGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFDomainMapping> getAllVNFDomainMappings() throws RestException {
        java.util.List<VNFDomainMapping> allObjs = new ArrayList<VNFDomainMapping>();

        return allObjs;
    }

    public static java.util.List<VNFDomainMappingsFetcher> getAllVNFDomainMappingsFetchers() throws RestException {
        java.util.List<VNFDomainMappingsFetcher> allObjs = new ArrayList<VNFDomainMappingsFetcher>();
        return allObjs;
    }
    public static VNFInterface getVNFInterfaceById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFInterface obj = null;
            obj = new VNFInterface();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFINTERFACE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFInterfaceId(String id) throws RestException {
        VNFInterface obj = getObject(Constants.VNFINTERFACE, id);
        if (obj == null) {
            obj = getVNFInterfaceById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFInterfaceId(String id) throws RestException {
        VNFInterface obj = getObject(Constants.VNFINTERFACE, id);
        if (obj == null) {
            obj = getVNFInterfaceById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFInterfaceId(String id) throws RestException {
        VNFInterface obj = getObject(Constants.VNFINTERFACE, id);
        if (obj == null) {
            obj = getVNFInterfaceById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFInterface> getVNFInterfacesForFetcherId(String id) throws RestException {
        VNFInterfacesFetcher fetcher = getVNFInterfacesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFINTERFACE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFInterface>();
    }

    public static VNFInterfacesFetcher getVNFInterfacesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFINTERFACES_FETCHER, id);
        if (fetcher != null) {
            return (VNFInterfacesFetcher) fetcher;
        }
        if ((fetcher = getVNFInterfacesFetcherForVNFId(id)) != null) {
            return (VNFInterfacesFetcher) addFetcher(Constants.VNFINTERFACES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFInterfacesFetcherForVPortId(id)) != null) {
            return (VNFInterfacesFetcher) addFetcher(Constants.VNFINTERFACES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFInterface> getAllVNFInterfaces() throws RestException {
        java.util.List<VNFInterface> allObjs = new ArrayList<VNFInterface>();

        return allObjs;
    }

    public static java.util.List<VNFInterfacesFetcher> getAllVNFInterfacesFetchers() throws RestException {
        java.util.List<VNFInterfacesFetcher> allObjs = new ArrayList<VNFInterfacesFetcher>();
        return allObjs;
    }
    public static VNFInterfaceDescriptor getVNFInterfaceDescriptorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFInterfaceDescriptor obj = null;
            obj = new VNFInterfaceDescriptor();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFINTERFACEDESCRIPTOR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFInterfaceDescriptorId(String id) throws RestException {
        VNFInterfaceDescriptor obj = getObject(Constants.VNFINTERFACEDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFInterfaceDescriptorById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFInterfaceDescriptorId(String id) throws RestException {
        VNFInterfaceDescriptor obj = getObject(Constants.VNFINTERFACEDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFInterfaceDescriptorById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFInterfaceDescriptorId(String id) throws RestException {
        VNFInterfaceDescriptor obj = getObject(Constants.VNFINTERFACEDESCRIPTOR, id);
        if (obj == null) {
            obj = getVNFInterfaceDescriptorById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFInterfaceDescriptor> getVNFInterfaceDescriptorsForFetcherId(String id) throws RestException {
        VNFInterfaceDescriptorsFetcher fetcher = getVNFInterfaceDescriptorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFINTERFACEDESCRIPTOR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFInterfaceDescriptor>();
    }

    public static VNFInterfaceDescriptorsFetcher getVNFInterfaceDescriptorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFINTERFACEDESCRIPTORS_FETCHER, id);
        if (fetcher != null) {
            return (VNFInterfaceDescriptorsFetcher) fetcher;
        }
        if ((fetcher = getVNFInterfaceDescriptorsFetcherForVNFDescriptorId(id)) != null) {
            return (VNFInterfaceDescriptorsFetcher) addFetcher(Constants.VNFINTERFACEDESCRIPTORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFInterfaceDescriptor> getAllVNFInterfaceDescriptors() throws RestException {
        java.util.List<VNFInterfaceDescriptor> allObjs = new ArrayList<VNFInterfaceDescriptor>();

        return allObjs;
    }

    public static java.util.List<VNFInterfaceDescriptorsFetcher> getAllVNFInterfaceDescriptorsFetchers() throws RestException {
        java.util.List<VNFInterfaceDescriptorsFetcher> allObjs = new ArrayList<VNFInterfaceDescriptorsFetcher>();
        return allObjs;
    }
    public static VNFMetadata getVNFMetadataById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFMetadata obj = null;
            obj = new VNFMetadata();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFMETADATA, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFMetadataId(String id) throws RestException {
        VNFMetadata obj = getObject(Constants.VNFMETADATA, id);
        if (obj == null) {
            obj = getVNFMetadataById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFMetadataId(String id) throws RestException {
        VNFMetadata obj = getObject(Constants.VNFMETADATA, id);
        if (obj == null) {
            obj = getVNFMetadataById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFMetadataId(String id) throws RestException {
        VNFMetadata obj = getObject(Constants.VNFMETADATA, id);
        if (obj == null) {
            obj = getVNFMetadataById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFMetadata> getVNFMetadatasForFetcherId(String id) throws RestException {
        VNFMetadatasFetcher fetcher = getVNFMetadatasFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFMETADATA);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFMetadata>();
    }

    public static VNFMetadatasFetcher getVNFMetadatasFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFMETADATAS_FETCHER, id);
        if (fetcher != null) {
            return (VNFMetadatasFetcher) fetcher;
        }
        if ((fetcher = getVNFMetadatasFetcherForEnterpriseId(id)) != null) {
            return (VNFMetadatasFetcher) addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFMetadatasFetcherForMeId(id)) != null) {
            return (VNFMetadatasFetcher) addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFMetadatasFetcherForVNFId(id)) != null) {
            return (VNFMetadatasFetcher) addFetcher(Constants.VNFMETADATAS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFMetadata> getAllVNFMetadatas() throws RestException {
        java.util.List<VNFMetadata> allObjs = new ArrayList<VNFMetadata>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFMetadatasFetcher fetcher = getVNFMetadatasFetcherForMeId(session.getId());
            java.util.List<VNFMetadata> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VNFMetadatasFetcher> getAllVNFMetadatasFetchers() throws RestException {
        java.util.List<VNFMetadatasFetcher> allObjs = new ArrayList<VNFMetadatasFetcher>();
        return allObjs;
    }
    public static VNFThresholdPolicy getVNFThresholdPolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFThresholdPolicy obj = null;
            obj = new VNFThresholdPolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VNFTHRESHOLDPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVNFThresholdPolicyId(String id) throws RestException {
        VNFThresholdPolicy obj = getObject(Constants.VNFTHRESHOLDPOLICY, id);
        if (obj == null) {
            obj = getVNFThresholdPolicyById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVNFThresholdPolicyId(String id) throws RestException {
        VNFThresholdPolicy obj = getObject(Constants.VNFTHRESHOLDPOLICY, id);
        if (obj == null) {
            obj = getVNFThresholdPolicyById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVNFThresholdPolicyId(String id) throws RestException {
        VNFThresholdPolicy obj = getObject(Constants.VNFTHRESHOLDPOLICY, id);
        if (obj == null) {
            obj = getVNFThresholdPolicyById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VNFThresholdPolicy> getVNFThresholdPoliciesForFetcherId(String id) throws RestException {
        VNFThresholdPoliciesFetcher fetcher = getVNFThresholdPoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VNFTHRESHOLDPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VNFThresholdPolicy>();
    }

    public static VNFThresholdPoliciesFetcher getVNFThresholdPoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (VNFThresholdPoliciesFetcher) fetcher;
        }
        if ((fetcher = getVNFThresholdPoliciesFetcherForEnterpriseId(id)) != null) {
            return (VNFThresholdPoliciesFetcher) addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFThresholdPoliciesFetcherForMeId(id)) != null) {
            return (VNFThresholdPoliciesFetcher) addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVNFThresholdPoliciesFetcherForVNFId(id)) != null) {
            return (VNFThresholdPoliciesFetcher) addFetcher(Constants.VNFTHRESHOLDPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VNFThresholdPolicy> getAllVNFThresholdPolicies() throws RestException {
        java.util.List<VNFThresholdPolicy> allObjs = new ArrayList<VNFThresholdPolicy>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VNFThresholdPoliciesFetcher fetcher = getVNFThresholdPoliciesFetcherForMeId(session.getId());
            java.util.List<VNFThresholdPolicy> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VNFThresholdPoliciesFetcher> getAllVNFThresholdPoliciesFetchers() throws RestException {
        java.util.List<VNFThresholdPoliciesFetcher> allObjs = new ArrayList<VNFThresholdPoliciesFetcher>();
        return allObjs;
    }
    public static VPNConnection getVPNConnectionById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VPNConnection obj = null;
            obj = new VPNConnection();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VPNCONNECTION, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVPNConnectionId(String id) throws RestException {
        VPNConnection obj = getObject(Constants.VPNCONNECTION, id);
        if (obj == null) {
            obj = getVPNConnectionById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVPNConnectionId(String id) throws RestException {
        VPNConnection obj = getObject(Constants.VPNCONNECTION, id);
        if (obj == null) {
            obj = getVPNConnectionById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVPNConnectionId(String id) throws RestException {
        VPNConnection obj = getObject(Constants.VPNCONNECTION, id);
        if (obj == null) {
            obj = getVPNConnectionById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VPNConnection> getVPNConnectionsForFetcherId(String id) throws RestException {
        VPNConnectionsFetcher fetcher = getVPNConnectionsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VPNCONNECTION);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VPNConnection>();
    }

    public static VPNConnectionsFetcher getVPNConnectionsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VPNCONNECTIONS_FETCHER, id);
        if (fetcher != null) {
            return (VPNConnectionsFetcher) fetcher;
        }
        if ((fetcher = getVPNConnectionsFetcherForAggregatedDomainId(id)) != null) {
            return (VPNConnectionsFetcher) addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPNConnectionsFetcherForDomainId(id)) != null) {
            return (VPNConnectionsFetcher) addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPNConnectionsFetcherForL2DomainId(id)) != null) {
            return (VPNConnectionsFetcher) addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPNConnectionsFetcherForSharedNetworkResourceId(id)) != null) {
            return (VPNConnectionsFetcher) addFetcher(Constants.VPNCONNECTIONS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VPNConnection> getAllVPNConnections() throws RestException {
        java.util.List<VPNConnection> allObjs = new ArrayList<VPNConnection>();

        return allObjs;
    }

    public static java.util.List<VPNConnectionsFetcher> getAllVPNConnectionsFetchers() throws RestException {
        java.util.List<VPNConnectionsFetcher> allObjs = new ArrayList<VPNConnectionsFetcher>();
        return allObjs;
    }
    public static VPort getVPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VPort obj = null;
            obj = new VPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AggregateMetadatasFetcher getAggregateMetadatasFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            AggregateMetadatasFetcher fetcher = obj.getAggregateMetadatas();
            return addFetcher(Constants.AGGREGATEMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static AlarmsFetcher getAlarmsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPNeighborsFetcher getBGPNeighborsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            BGPNeighborsFetcher fetcher = obj.getBGPNeighbors();
            return addFetcher(Constants.BGPNEIGHBORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BridgeInterfacesFetcher getBridgeInterfacesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            BridgeInterfacesFetcher fetcher = obj.getBridgeInterfaces();
            return addFetcher(Constants.BRIDGEINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DeploymentFailuresFetcher getDeploymentFailuresFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            DeploymentFailuresFetcher fetcher = obj.getDeploymentFailures();
            return addFetcher(Constants.DEPLOYMENTFAILURES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EgressACLEntryTemplatesFetcher getEgressACLEntryTemplatesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            EgressACLEntryTemplatesFetcher fetcher = obj.getEgressACLEntryTemplates();
            return addFetcher(Constants.EGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HostInterfacesFetcher getHostInterfacesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            HostInterfacesFetcher fetcher = obj.getHostInterfaces();
            return addFetcher(Constants.HOSTINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressACLEntryTemplatesFetcher getIngressACLEntryTemplatesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            IngressACLEntryTemplatesFetcher fetcher = obj.getIngressACLEntryTemplates();
            return addFetcher(Constants.INGRESSACLENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static IngressAdvFwdEntryTemplatesFetcher getIngressAdvFwdEntryTemplatesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            IngressAdvFwdEntryTemplatesFetcher fetcher = obj.getIngressAdvFwdEntryTemplates();
            return addFetcher(Constants.INGRESSADVFWDENTRYTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PolicyGroupsFetcher getPolicyGroupsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            PolicyGroupsFetcher fetcher = obj.getPolicyGroups();
            return addFetcher(Constants.POLICYGROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PortMappingsFetcher getPortMappingsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            PortMappingsFetcher fetcher = obj.getPortMappings();
            return addFetcher(Constants.PORTMAPPINGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static RedirectionTargetsFetcher getRedirectionTargetsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            RedirectionTargetsFetcher fetcher = obj.getRedirectionTargets();
            return addFetcher(Constants.REDIRECTIONTARGETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ScheduledtestsuiterunsFetcher getScheduledtestsuiterunsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            ScheduledtestsuiterunsFetcher fetcher = obj.getScheduledtestsuiteruns();
            return addFetcher(Constants.SCHEDULEDTESTSUITERUNS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TestSuiteRunsFetcher getTestSuiteRunsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            TestSuiteRunsFetcher fetcher = obj.getTestSuiteRuns();
            return addFetcher(Constants.TESTSUITERUNS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TrunksFetcher getTrunksFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            TrunksFetcher fetcher = obj.getTrunks();
            return addFetcher(Constants.TRUNKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VirtualIPsFetcher getVirtualIPsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VirtualIPsFetcher fetcher = obj.getVirtualIPs();
            return addFetcher(Constants.VIRTUALIPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VNFInterfacesFetcher getVNFInterfacesFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VNFInterfacesFetcher fetcher = obj.getVNFInterfaces();
            return addFetcher(Constants.VNFINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortMirrorsFetcher getVPortMirrorsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VPortMirrorsFetcher fetcher = obj.getVPortMirrors();
            return addFetcher(Constants.VPORTMIRRORS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSsFetcher getVRSsFetcherForVPortId(String id) throws RestException {
        VPort obj = getObject(Constants.VPORT, id);
        if (obj == null) {
            obj = getVPortById(id);
        }

        if (obj != null) {
            VRSsFetcher fetcher = obj.getVRSs();
            return addFetcher(Constants.VRSS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VPort> getVPortsForFetcherId(String id) throws RestException {
        VPortsFetcher fetcher = getVPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VPort>();
    }

    public static VPortsFetcher getVPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VPORTS_FETCHER, id);
        if (fetcher != null) {
            return (VPortsFetcher) fetcher;
        }
        if ((fetcher = getVPortsFetcherForAggregatedDomainId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForDomainId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForEgressProfileId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForFloatingIpId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForIngressProfileId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForL2DomainId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForMultiNICVPortId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForOverlayMirrorDestinationId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForPolicyGroupId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForRedirectionTargetId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForSubnetId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForTrunkId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForVRSId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortsFetcherForZoneId(id)) != null) {
            return (VPortsFetcher) addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VPort> getAllVPorts() throws RestException {
        java.util.List<VPort> allObjs = new ArrayList<VPort>();

        return allObjs;
    }

    public static java.util.List<VPortsFetcher> getAllVPortsFetchers() throws RestException {
        java.util.List<VPortsFetcher> allObjs = new ArrayList<VPortsFetcher>();
        return allObjs;
    }
    public static VPortMirror getVPortMirrorById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VPortMirror obj = null;
            obj = new VPortMirror();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VPORTMIRROR, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVPortMirrorId(String id) throws RestException {
        VPortMirror obj = getObject(Constants.VPORTMIRROR, id);
        if (obj == null) {
            obj = getVPortMirrorById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVPortMirrorId(String id) throws RestException {
        VPortMirror obj = getObject(Constants.VPORTMIRROR, id);
        if (obj == null) {
            obj = getVPortMirrorById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVPortMirrorId(String id) throws RestException {
        VPortMirror obj = getObject(Constants.VPORTMIRROR, id);
        if (obj == null) {
            obj = getVPortMirrorById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VPortMirror> getVPortMirrorsForFetcherId(String id) throws RestException {
        VPortMirrorsFetcher fetcher = getVPortMirrorsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VPORTMIRROR);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VPortMirror>();
    }

    public static VPortMirrorsFetcher getVPortMirrorsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VPORTMIRRORS_FETCHER, id);
        if (fetcher != null) {
            return (VPortMirrorsFetcher) fetcher;
        }
        if ((fetcher = getVPortMirrorsFetcherForMirrorDestinationId(id)) != null) {
            return (VPortMirrorsFetcher) addFetcher(Constants.VPORTMIRRORS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVPortMirrorsFetcherForVPortId(id)) != null) {
            return (VPortMirrorsFetcher) addFetcher(Constants.VPORTMIRRORS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VPortMirror> getAllVPortMirrors() throws RestException {
        java.util.List<VPortMirror> allObjs = new ArrayList<VPortMirror>();

        return allObjs;
    }

    public static java.util.List<VPortMirrorsFetcher> getAllVPortMirrorsFetchers() throws RestException {
        java.util.List<VPortMirrorsFetcher> allObjs = new ArrayList<VPortMirrorsFetcher>();
        return allObjs;
    }
    public static VRS getVRSById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VRS obj = null;
            obj = new VRS();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VRS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainersFetcher getContainersFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ControllerVRSLinksFetcher getControllerVRSLinksFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            ControllerVRSLinksFetcher fetcher = obj.getControllerVRSLinks();
            return addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HSCsFetcher getHSCsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            HSCsFetcher fetcher = obj.getHSCs();
            return addFetcher(Constants.HSCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MonitoringPortsFetcher getMonitoringPortsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            MonitoringPortsFetcher fetcher = obj.getMonitoringPorts();
            return addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MultiNICVPortsFetcher getMultiNICVPortsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            MultiNICVPortsFetcher fetcher = obj.getMultiNICVPorts();
            return addFetcher(Constants.MULTINICVPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSCsFetcher getVSCsFetcherForVRSId(String id) throws RestException {
        VRS obj = getObject(Constants.VRS, id);
        if (obj == null) {
            obj = getVRSById(id);
        }

        if (obj != null) {
            VSCsFetcher fetcher = obj.getVSCs();
            return addFetcher(Constants.VSCS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VRS> getVRSsForFetcherId(String id) throws RestException {
        VRSsFetcher fetcher = getVRSsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VRS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VRS>();
    }

    public static VRSsFetcher getVRSsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VRSS_FETCHER, id);
        if (fetcher != null) {
            return (VRSsFetcher) fetcher;
        }
        if ((fetcher = getVRSsFetcherForContainerId(id)) != null) {
            return (VRSsFetcher) addFetcher(Constants.VRSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSsFetcherForControllerVRSLinkId(id)) != null) {
            return (VRSsFetcher) addFetcher(Constants.VRSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSsFetcherForMeId(id)) != null) {
            return (VRSsFetcher) addFetcher(Constants.VRSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSsFetcherForVMId(id)) != null) {
            return (VRSsFetcher) addFetcher(Constants.VRSS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSsFetcherForVPortId(id)) != null) {
            return (VRSsFetcher) addFetcher(Constants.VRSS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VRS> getAllVRSs() throws RestException {
        java.util.List<VRS> allObjs = new ArrayList<VRS>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VRSsFetcher fetcher = getVRSsFetcherForMeId(session.getId());
            java.util.List<VRS> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VRSsFetcher> getAllVRSsFetchers() throws RestException {
        java.util.List<VRSsFetcher> allObjs = new ArrayList<VRSsFetcher>();
        return allObjs;
    }
    public static VRSAddressRange getVRSAddressRangeById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VRSAddressRange obj = null;
            obj = new VRSAddressRange();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VRSADDRESSRANGE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVRSAddressRangeId(String id) throws RestException {
        VRSAddressRange obj = getObject(Constants.VRSADDRESSRANGE, id);
        if (obj == null) {
            obj = getVRSAddressRangeById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVRSAddressRangeId(String id) throws RestException {
        VRSAddressRange obj = getObject(Constants.VRSADDRESSRANGE, id);
        if (obj == null) {
            obj = getVRSAddressRangeById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVRSAddressRangeId(String id) throws RestException {
        VRSAddressRange obj = getObject(Constants.VRSADDRESSRANGE, id);
        if (obj == null) {
            obj = getVRSAddressRangeById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VRSAddressRange> getVRSAddressRangesForFetcherId(String id) throws RestException {
        VRSAddressRangesFetcher fetcher = getVRSAddressRangesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VRSADDRESSRANGE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VRSAddressRange>();
    }

    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VRSADDRESSRANGES_FETCHER, id);
        if (fetcher != null) {
            return (VRSAddressRangesFetcher) fetcher;
        }
        if ((fetcher = getVRSAddressRangesFetcherForVCenterId(id)) != null) {
            return (VRSAddressRangesFetcher) addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSAddressRangesFetcherForVCenterClusterId(id)) != null) {
            return (VRSAddressRangesFetcher) addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSAddressRangesFetcherForVCenterDataCenterId(id)) != null) {
            return (VRSAddressRangesFetcher) addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSAddressRangesFetcherForVCenterHypervisorId(id)) != null) {
            return (VRSAddressRangesFetcher) addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSAddressRangesFetcherForVCenterVRSConfigId(id)) != null) {
            return (VRSAddressRangesFetcher) addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VRSAddressRange> getAllVRSAddressRanges() throws RestException {
        java.util.List<VRSAddressRange> allObjs = new ArrayList<VRSAddressRange>();

        return allObjs;
    }

    public static java.util.List<VRSAddressRangesFetcher> getAllVRSAddressRangesFetchers() throws RestException {
        java.util.List<VRSAddressRangesFetcher> allObjs = new ArrayList<VRSAddressRangesFetcher>();
        return allObjs;
    }
    public static VCenterVRSConfig getVCenterVRSConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterVRSConfig obj = null;
            obj = new VCenterVRSConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VCENTERVRSCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVCenterVRSConfigId(String id) throws RestException {
        VCenterVRSConfig obj = getObject(Constants.VCENTERVRSCONFIG, id);
        if (obj == null) {
            obj = getVCenterVRSConfigById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVCenterVRSConfigId(String id) throws RestException {
        VCenterVRSConfig obj = getObject(Constants.VCENTERVRSCONFIG, id);
        if (obj == null) {
            obj = getVCenterVRSConfigById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVCenterVRSConfigId(String id) throws RestException {
        VCenterVRSConfig obj = getObject(Constants.VCENTERVRSCONFIG, id);
        if (obj == null) {
            obj = getVCenterVRSConfigById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSAddressRangesFetcher getVRSAddressRangesFetcherForVCenterVRSConfigId(String id) throws RestException {
        VCenterVRSConfig obj = getObject(Constants.VCENTERVRSCONFIG, id);
        if (obj == null) {
            obj = getVCenterVRSConfigById(id);
        }

        if (obj != null) {
            VRSAddressRangesFetcher fetcher = obj.getVRSAddressRanges();
            return addFetcher(Constants.VRSADDRESSRANGES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherForVCenterVRSConfigId(String id) throws RestException {
        VCenterVRSConfig obj = getObject(Constants.VCENTERVRSCONFIG, id);
        if (obj == null) {
            obj = getVCenterVRSConfigById(id);
        }

        if (obj != null) {
            VRSRedeploymentpoliciesFetcher fetcher = obj.getVRSRedeploymentpolicies();
            return addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VCenterVRSConfig> getVCenterVRSConfigsForFetcherId(String id) throws RestException {
        VCenterVRSConfigsFetcher fetcher = getVCenterVRSConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VCENTERVRSCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VCenterVRSConfig>();
    }

    public static VCenterVRSConfigsFetcher getVCenterVRSConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VCENTERVRSCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (VCenterVRSConfigsFetcher) fetcher;
        }
        if ((fetcher = getVCenterVRSConfigsFetcherForMeId(id)) != null) {
            return (VCenterVRSConfigsFetcher) addFetcher(Constants.VCENTERVRSCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VCenterVRSConfig> getAllVCenterVRSConfigs() throws RestException {
        java.util.List<VCenterVRSConfig> allObjs = new ArrayList<VCenterVRSConfig>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VCenterVRSConfigsFetcher fetcher = getVCenterVRSConfigsFetcherForMeId(session.getId());
            java.util.List<VCenterVRSConfig> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VCenterVRSConfigsFetcher> getAllVCenterVRSConfigsFetchers() throws RestException {
        java.util.List<VCenterVRSConfigsFetcher> allObjs = new ArrayList<VCenterVRSConfigsFetcher>();
        return allObjs;
    }
    public static vrsInfo getvrsInfoById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            vrsInfo obj = null;
            obj = new vrsInfo();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VRSINFO, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForvrsInfoId(String id) throws RestException {
        vrsInfo obj = getObject(Constants.VRSINFO, id);
        if (obj == null) {
            obj = getvrsInfoById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForvrsInfoId(String id) throws RestException {
        vrsInfo obj = getObject(Constants.VRSINFO, id);
        if (obj == null) {
            obj = getvrsInfoById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForvrsInfoId(String id) throws RestException {
        vrsInfo obj = getObject(Constants.VRSINFO, id);
        if (obj == null) {
            obj = getvrsInfoById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<vrsInfo> getvrsInfosForFetcherId(String id) throws RestException {
        vrsInfosFetcher fetcher = getvrsInfosFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VRSINFO);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<vrsInfo>();
    }

    public static vrsInfosFetcher getvrsInfosFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VRSINFOS_FETCHER, id);
        if (fetcher != null) {
            return (vrsInfosFetcher) fetcher;
        }
        if ((fetcher = getvrsInfosFetcherForMeId(id)) != null) {
            return (vrsInfosFetcher) addFetcher(Constants.VRSINFOS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<vrsInfo> getAllvrsInfos() throws RestException {
        java.util.List<vrsInfo> allObjs = new ArrayList<vrsInfo>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            vrsInfosFetcher fetcher = getvrsInfosFetcherForMeId(session.getId());
            java.util.List<vrsInfo> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<vrsInfosFetcher> getAllvrsInfosFetchers() throws RestException {
        java.util.List<vrsInfosFetcher> allObjs = new ArrayList<vrsInfosFetcher>();
        return allObjs;
    }
    public static VRSMetrics getVRSMetricsById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VRSMetrics obj = null;
            obj = new VRSMetrics();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VRSMETRICS, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<VRSMetrics> getVRSMetricsForFetcherId(String id) throws RestException {
        VRSMetricsFetcher fetcher = getVRSMetricsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VRSMETRICS);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VRSMetrics>();
    }

    public static VRSMetricsFetcher getVRSMetricsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VRSMETRICS_FETCHER, id);
        if (fetcher != null) {
            return (VRSMetricsFetcher) fetcher;
        }
        if ((fetcher = getVRSMetricsFetcherForVCenterHypervisorId(id)) != null) {
            return (VRSMetricsFetcher) addFetcher(Constants.VRSMETRICS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VRSMetrics> getAllVRSMetrics() throws RestException {
        java.util.List<VRSMetrics> allObjs = new ArrayList<VRSMetrics>();

        return allObjs;
    }

    public static java.util.List<VRSMetricsFetcher> getAllVRSMetricsFetchers() throws RestException {
        java.util.List<VRSMetricsFetcher> allObjs = new ArrayList<VRSMetricsFetcher>();
        return allObjs;
    }
    public static VRSRedeploymentpolicy getVRSRedeploymentpolicyById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VRSRedeploymentpolicy obj = null;
            obj = new VRSRedeploymentpolicy();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VRSREDEPLOYMENTPOLICY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<VRSRedeploymentpolicy> getVRSRedeploymentpoliciesForFetcherId(String id) throws RestException {
        VRSRedeploymentpoliciesFetcher fetcher = getVRSRedeploymentpoliciesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VRSREDEPLOYMENTPOLICY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VRSRedeploymentpolicy>();
    }

    public static VRSRedeploymentpoliciesFetcher getVRSRedeploymentpoliciesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, id);
        if (fetcher != null) {
            return (VRSRedeploymentpoliciesFetcher) fetcher;
        }
        if ((fetcher = getVRSRedeploymentpoliciesFetcherForVCenterId(id)) != null) {
            return (VRSRedeploymentpoliciesFetcher) addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSRedeploymentpoliciesFetcherForVCenterClusterId(id)) != null) {
            return (VRSRedeploymentpoliciesFetcher) addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSRedeploymentpoliciesFetcherForVCenterDataCenterId(id)) != null) {
            return (VRSRedeploymentpoliciesFetcher) addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSRedeploymentpoliciesFetcherForVCenterHypervisorId(id)) != null) {
            return (VRSRedeploymentpoliciesFetcher) addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getVRSRedeploymentpoliciesFetcherForVCenterVRSConfigId(id)) != null) {
            return (VRSRedeploymentpoliciesFetcher) addFetcher(Constants.VRSREDEPLOYMENTPOLICIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VRSRedeploymentpolicy> getAllVRSRedeploymentpolicies() throws RestException {
        java.util.List<VRSRedeploymentpolicy> allObjs = new ArrayList<VRSRedeploymentpolicy>();

        return allObjs;
    }

    public static java.util.List<VRSRedeploymentpoliciesFetcher> getAllVRSRedeploymentpoliciesFetchers() throws RestException {
        java.util.List<VRSRedeploymentpoliciesFetcher> allObjs = new ArrayList<VRSRedeploymentpoliciesFetcher>();
        return allObjs;
    }
    public static VSC getVSCById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSC obj = null;
            obj = new VSC();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSC, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static BGPPeersFetcher getBGPPeersFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            BGPPeersFetcher fetcher = obj.getBGPPeers();
            return addFetcher(Constants.BGPPEERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ControllerVRSLinksFetcher getControllerVRSLinksFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            ControllerVRSLinksFetcher fetcher = obj.getControllerVRSLinks();
            return addFetcher(Constants.CONTROLLERVRSLINKS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MonitoringPortsFetcher getMonitoringPortsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            MonitoringPortsFetcher fetcher = obj.getMonitoringPorts();
            return addFetcher(Constants.MONITORINGPORTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForVSCId(String id) throws RestException {
        VSC obj = getObject(Constants.VSC, id);
        if (obj == null) {
            obj = getVSCById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VSC> getVSCsForFetcherId(String id) throws RestException {
        VSCsFetcher fetcher = getVSCsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSC);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VSC>();
    }

    public static VSCsFetcher getVSCsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSCS_FETCHER, id);
        if (fetcher != null) {
            return (VSCsFetcher) fetcher;
        }
        if ((fetcher = getVSCsFetcherForControllerVRSLinkId(id)) != null) {
            return (VSCsFetcher) addFetcher(Constants.VSCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVSCsFetcherForVRSId(id)) != null) {
            return (VSCsFetcher) addFetcher(Constants.VSCS_FETCHER, fetcher);
        }
        
        if ((fetcher = getVSCsFetcherForVSPId(id)) != null) {
            return (VSCsFetcher) addFetcher(Constants.VSCS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VSC> getAllVSCs() throws RestException {
        java.util.List<VSC> allObjs = new ArrayList<VSC>();

        return allObjs;
    }

    public static java.util.List<VSCsFetcher> getAllVSCsFetchers() throws RestException {
        java.util.List<VSCsFetcher> allObjs = new ArrayList<VSCsFetcher>();
        return allObjs;
    }
    public static VSD getVSDById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSD obj = null;
            obj = new VSD();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSD, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSDComponentsFetcher getVSDComponentsFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            VSDComponentsFetcher fetcher = obj.getVSDComponents();
            return addFetcher(Constants.VSDCOMPONENTS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVSDId(String id) throws RestException {
        VSD obj = getObject(Constants.VSD, id);
        if (obj == null) {
            obj = getVSDById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VSD> getVSDsForFetcherId(String id) throws RestException {
        VSDsFetcher fetcher = getVSDsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSD);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VSD>();
    }

    public static VSDsFetcher getVSDsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSDS_FETCHER, id);
        if (fetcher != null) {
            return (VSDsFetcher) fetcher;
        }return null;
    }

    public static java.util.List<VSD> getAllVSDs() throws RestException {
        java.util.List<VSD> allObjs = new ArrayList<VSD>();

        return allObjs;
    }

    public static java.util.List<VSDsFetcher> getAllVSDsFetchers() throws RestException {
        java.util.List<VSDsFetcher> allObjs = new ArrayList<VSDsFetcher>();
        return allObjs;
    }
    public static VSDConfig getVSDConfigById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSDConfig obj = null;
            obj = new VSDConfig();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSDCONFIG, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<VSDConfig> getVSDConfigsForFetcherId(String id) throws RestException {
        VSDConfigsFetcher fetcher = getVSDConfigsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSDCONFIG);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VSDConfig>();
    }

    public static VSDConfigsFetcher getVSDConfigsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSDCONFIGS_FETCHER, id);
        if (fetcher != null) {
            return (VSDConfigsFetcher) fetcher;
        }
        if ((fetcher = getVSDConfigsFetcherForMeId(id)) != null) {
            return (VSDConfigsFetcher) addFetcher(Constants.VSDCONFIGS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VSDConfig> getAllVSDConfigs() throws RestException {
        java.util.List<VSDConfig> allObjs = new ArrayList<VSDConfig>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSDConfigsFetcher fetcher = getVSDConfigsFetcherForMeId(session.getId());
            java.util.List<VSDConfig> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VSDConfigsFetcher> getAllVSDConfigsFetchers() throws RestException {
        java.util.List<VSDConfigsFetcher> allObjs = new ArrayList<VSDConfigsFetcher>();
        return allObjs;
    }
    public static VsgRedundantPort getVsgRedundantPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VsgRedundantPort obj = null;
            obj = new VsgRedundantPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSGREDUNDANTPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EnterprisePermissionsFetcher getEnterprisePermissionsFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            EnterprisePermissionsFetcher fetcher = obj.getEnterprisePermissions();
            return addFetcher(Constants.ENTERPRISEPERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VLANsFetcher getVLANsFetcherForVsgRedundantPortId(String id) throws RestException {
        VsgRedundantPort obj = getObject(Constants.VSGREDUNDANTPORT, id);
        if (obj == null) {
            obj = getVsgRedundantPortById(id);
        }

        if (obj != null) {
            VLANsFetcher fetcher = obj.getVLANs();
            return addFetcher(Constants.VLANS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VsgRedundantPort> getVsgRedundantPortsForFetcherId(String id) throws RestException {
        VsgRedundantPortsFetcher fetcher = getVsgRedundantPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSGREDUNDANTPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VsgRedundantPort>();
    }

    public static VsgRedundantPortsFetcher getVsgRedundantPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSGREDUNDANTPORTS_FETCHER, id);
        if (fetcher != null) {
            return (VsgRedundantPortsFetcher) fetcher;
        }
        if ((fetcher = getVsgRedundantPortsFetcherForRedundancyGroupId(id)) != null) {
            return (VsgRedundantPortsFetcher) addFetcher(Constants.VSGREDUNDANTPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VsgRedundantPort> getAllVsgRedundantPorts() throws RestException {
        java.util.List<VsgRedundantPort> allObjs = new ArrayList<VsgRedundantPort>();

        return allObjs;
    }

    public static java.util.List<VsgRedundantPortsFetcher> getAllVsgRedundantPortsFetchers() throws RestException {
        java.util.List<VsgRedundantPortsFetcher> allObjs = new ArrayList<VsgRedundantPortsFetcher>();
        return allObjs;
    }
    public static VSP getVSPById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSP obj = null;
            obj = new VSP();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.VSP, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static HSCsFetcher getHSCsFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            HSCsFetcher fetcher = obj.getHSCs();
            return addFetcher(Constants.HSCS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static NetconfManagersFetcher getNetconfManagersFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            NetconfManagersFetcher fetcher = obj.getNetconfManagers();
            return addFetcher(Constants.NETCONFMANAGERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ThreatPreventionServerConnectionsFetcher getThreatPreventionServerConnectionsFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            ThreatPreventionServerConnectionsFetcher fetcher = obj.getThreatPreventionServerConnections();
            return addFetcher(Constants.THREATPREVENTIONSERVERCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VSCsFetcher getVSCsFetcherForVSPId(String id) throws RestException {
        VSP obj = getObject(Constants.VSP, id);
        if (obj == null) {
            obj = getVSPById(id);
        }

        if (obj != null) {
            VSCsFetcher fetcher = obj.getVSCs();
            return addFetcher(Constants.VSCS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<VSP> getVSPsForFetcherId(String id) throws RestException {
        VSPsFetcher fetcher = getVSPsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.VSP);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<VSP>();
    }

    public static VSPsFetcher getVSPsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.VSPS_FETCHER, id);
        if (fetcher != null) {
            return (VSPsFetcher) fetcher;
        }
        if ((fetcher = getVSPsFetcherForMeId(id)) != null) {
            return (VSPsFetcher) addFetcher(Constants.VSPS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<VSP> getAllVSPs() throws RestException {
        java.util.List<VSP> allObjs = new ArrayList<VSP>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            VSPsFetcher fetcher = getVSPsFetcherForMeId(session.getId());
            java.util.List<VSP> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<VSPsFetcher> getAllVSPsFetchers() throws RestException {
        java.util.List<VSPsFetcher> allObjs = new ArrayList<VSPsFetcher>();
        return allObjs;
    }
    public static WebCategory getWebCategoryById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            WebCategory obj = null;
            obj = new WebCategory();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.WEBCATEGORY, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForWebCategoryId(String id) throws RestException {
        WebCategory obj = getObject(Constants.WEBCATEGORY, id);
        if (obj == null) {
            obj = getWebCategoryById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForWebCategoryId(String id) throws RestException {
        WebCategory obj = getObject(Constants.WEBCATEGORY, id);
        if (obj == null) {
            obj = getWebCategoryById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForWebCategoryId(String id) throws RestException {
        WebCategory obj = getObject(Constants.WEBCATEGORY, id);
        if (obj == null) {
            obj = getWebCategoryById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WebDomainNamesFetcher getWebDomainNamesFetcherForWebCategoryId(String id) throws RestException {
        WebCategory obj = getObject(Constants.WEBCATEGORY, id);
        if (obj == null) {
            obj = getWebCategoryById(id);
        }

        if (obj != null) {
            WebDomainNamesFetcher fetcher = obj.getWebDomainNames();
            return addFetcher(Constants.WEBDOMAINNAMES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<WebCategory> getWebCategoriesForFetcherId(String id) throws RestException {
        WebCategoriesFetcher fetcher = getWebCategoriesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.WEBCATEGORY);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<WebCategory>();
    }

    public static WebCategoriesFetcher getWebCategoriesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.WEBCATEGORIES_FETCHER, id);
        if (fetcher != null) {
            return (WebCategoriesFetcher) fetcher;
        }
        if ((fetcher = getWebCategoriesFetcherForEnterpriseId(id)) != null) {
            return (WebCategoriesFetcher) addFetcher(Constants.WEBCATEGORIES_FETCHER, fetcher);
        }
        
        if ((fetcher = getWebCategoriesFetcherForWebDomainNameId(id)) != null) {
            return (WebCategoriesFetcher) addFetcher(Constants.WEBCATEGORIES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<WebCategory> getAllWebCategories() throws RestException {
        java.util.List<WebCategory> allObjs = new ArrayList<WebCategory>();

        return allObjs;
    }

    public static java.util.List<WebCategoriesFetcher> getAllWebCategoriesFetchers() throws RestException {
        java.util.List<WebCategoriesFetcher> allObjs = new ArrayList<WebCategoriesFetcher>();
        return allObjs;
    }
    public static WebDomainName getWebDomainNameById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            WebDomainName obj = null;
            obj = new WebDomainName();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.WEBDOMAINNAME, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForWebDomainNameId(String id) throws RestException {
        WebDomainName obj = getObject(Constants.WEBDOMAINNAME, id);
        if (obj == null) {
            obj = getWebDomainNameById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForWebDomainNameId(String id) throws RestException {
        WebDomainName obj = getObject(Constants.WEBDOMAINNAME, id);
        if (obj == null) {
            obj = getWebDomainNameById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForWebDomainNameId(String id) throws RestException {
        WebDomainName obj = getObject(Constants.WEBDOMAINNAME, id);
        if (obj == null) {
            obj = getWebDomainNameById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static WebCategoriesFetcher getWebCategoriesFetcherForWebDomainNameId(String id) throws RestException {
        WebDomainName obj = getObject(Constants.WEBDOMAINNAME, id);
        if (obj == null) {
            obj = getWebDomainNameById(id);
        }

        if (obj != null) {
            WebCategoriesFetcher fetcher = obj.getWebCategories();
            return addFetcher(Constants.WEBCATEGORIES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<WebDomainName> getWebDomainNamesForFetcherId(String id) throws RestException {
        WebDomainNamesFetcher fetcher = getWebDomainNamesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.WEBDOMAINNAME);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<WebDomainName>();
    }

    public static WebDomainNamesFetcher getWebDomainNamesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.WEBDOMAINNAMES_FETCHER, id);
        if (fetcher != null) {
            return (WebDomainNamesFetcher) fetcher;
        }
        if ((fetcher = getWebDomainNamesFetcherForEnterpriseId(id)) != null) {
            return (WebDomainNamesFetcher) addFetcher(Constants.WEBDOMAINNAMES_FETCHER, fetcher);
        }
        
        if ((fetcher = getWebDomainNamesFetcherForWebCategoryId(id)) != null) {
            return (WebDomainNamesFetcher) addFetcher(Constants.WEBDOMAINNAMES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<WebDomainName> getAllWebDomainNames() throws RestException {
        java.util.List<WebDomainName> allObjs = new ArrayList<WebDomainName>();

        return allObjs;
    }

    public static java.util.List<WebDomainNamesFetcher> getAllWebDomainNamesFetchers() throws RestException {
        java.util.List<WebDomainNamesFetcher> allObjs = new ArrayList<WebDomainNamesFetcher>();
        return allObjs;
    }
    public static WirelessPort getWirelessPortById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            WirelessPort obj = null;
            obj = new WirelessPort();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.WIRELESSPORT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static AlarmsFetcher getAlarmsFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            AlarmsFetcher fetcher = obj.getAlarms();
            return addFetcher(Constants.ALARMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SSIDConnectionsFetcher getSSIDConnectionsFetcherForWirelessPortId(String id) throws RestException {
        WirelessPort obj = getObject(Constants.WIRELESSPORT, id);
        if (obj == null) {
            obj = getWirelessPortById(id);
        }

        if (obj != null) {
            SSIDConnectionsFetcher fetcher = obj.getSSIDConnections();
            return addFetcher(Constants.SSIDCONNECTIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<WirelessPort> getWirelessPortsForFetcherId(String id) throws RestException {
        WirelessPortsFetcher fetcher = getWirelessPortsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.WIRELESSPORT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<WirelessPort>();
    }

    public static WirelessPortsFetcher getWirelessPortsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.WIRELESSPORTS_FETCHER, id);
        if (fetcher != null) {
            return (WirelessPortsFetcher) fetcher;
        }
        if ((fetcher = getWirelessPortsFetcherForAutoDiscoveredGatewayId(id)) != null) {
            return (WirelessPortsFetcher) addFetcher(Constants.WIRELESSPORTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getWirelessPortsFetcherForNSGatewayId(id)) != null) {
            return (WirelessPortsFetcher) addFetcher(Constants.WIRELESSPORTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<WirelessPort> getAllWirelessPorts() throws RestException {
        java.util.List<WirelessPort> allObjs = new ArrayList<WirelessPort>();

        return allObjs;
    }

    public static java.util.List<WirelessPortsFetcher> getAllWirelessPortsFetchers() throws RestException {
        java.util.List<WirelessPortsFetcher> allObjs = new ArrayList<WirelessPortsFetcher>();
        return allObjs;
    }
    public static ZFBAutoAssignment getZFBAutoAssignmentById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZFBAutoAssignment obj = null;
            obj = new ZFBAutoAssignment();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ZFBAUTOASSIGNMENT, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }public static java.util.List<ZFBAutoAssignment> getZFBAutoAssignmentsForFetcherId(String id) throws RestException {
        ZFBAutoAssignmentsFetcher fetcher = getZFBAutoAssignmentsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ZFBAUTOASSIGNMENT);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ZFBAutoAssignment>();
    }

    public static ZFBAutoAssignmentsFetcher getZFBAutoAssignmentsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ZFBAUTOASSIGNMENTS_FETCHER, id);
        if (fetcher != null) {
            return (ZFBAutoAssignmentsFetcher) fetcher;
        }
        if ((fetcher = getZFBAutoAssignmentsFetcherForMeId(id)) != null) {
            return (ZFBAutoAssignmentsFetcher) addFetcher(Constants.ZFBAUTOASSIGNMENTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ZFBAutoAssignment> getAllZFBAutoAssignments() throws RestException {
        java.util.List<ZFBAutoAssignment> allObjs = new ArrayList<ZFBAutoAssignment>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZFBAutoAssignmentsFetcher fetcher = getZFBAutoAssignmentsFetcherForMeId(session.getId());
            java.util.List<ZFBAutoAssignment> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ZFBAutoAssignmentsFetcher> getAllZFBAutoAssignmentsFetchers() throws RestException {
        java.util.List<ZFBAutoAssignmentsFetcher> allObjs = new ArrayList<ZFBAutoAssignmentsFetcher>();
        return allObjs;
    }
    public static ZFBRequest getZFBRequestById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZFBRequest obj = null;
            obj = new ZFBRequest();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ZFBREQUEST, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForZFBRequestId(String id) throws RestException {
        ZFBRequest obj = getObject(Constants.ZFBREQUEST, id);
        if (obj == null) {
            obj = getZFBRequestById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static JobsFetcher getJobsFetcherForZFBRequestId(String id) throws RestException {
        ZFBRequest obj = getObject(Constants.ZFBREQUEST, id);
        if (obj == null) {
            obj = getZFBRequestById(id);
        }

        if (obj != null) {
            JobsFetcher fetcher = obj.getJobs();
            return addFetcher(Constants.JOBS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForZFBRequestId(String id) throws RestException {
        ZFBRequest obj = getObject(Constants.ZFBREQUEST, id);
        if (obj == null) {
            obj = getZFBRequestById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForZFBRequestId(String id) throws RestException {
        ZFBRequest obj = getObject(Constants.ZFBREQUEST, id);
        if (obj == null) {
            obj = getZFBRequestById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ZFBRequest> getZFBRequestsForFetcherId(String id) throws RestException {
        ZFBRequestsFetcher fetcher = getZFBRequestsFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ZFBREQUEST);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ZFBRequest>();
    }

    public static ZFBRequestsFetcher getZFBRequestsFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ZFBREQUESTS_FETCHER, id);
        if (fetcher != null) {
            return (ZFBRequestsFetcher) fetcher;
        }
        if ((fetcher = getZFBRequestsFetcherForEnterpriseId(id)) != null) {
            return (ZFBRequestsFetcher) addFetcher(Constants.ZFBREQUESTS_FETCHER, fetcher);
        }
        
        if ((fetcher = getZFBRequestsFetcherForMeId(id)) != null) {
            return (ZFBRequestsFetcher) addFetcher(Constants.ZFBREQUESTS_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ZFBRequest> getAllZFBRequests() throws RestException {
        java.util.List<ZFBRequest> allObjs = new ArrayList<ZFBRequest>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZFBRequestsFetcher fetcher = getZFBRequestsFetcherForMeId(session.getId());
            java.util.List<ZFBRequest> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ZFBRequestsFetcher> getAllZFBRequestsFetchers() throws RestException {
        java.util.List<ZFBRequestsFetcher> allObjs = new ArrayList<ZFBRequestsFetcher>();
        return allObjs;
    }
    public static Zone getZoneById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            Zone obj = null;
            obj = new Zone();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ZONE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static ContainersFetcher getContainersFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            ContainersFetcher fetcher = obj.getContainers();
            return addFetcher(Constants.CONTAINERS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static ContainerInterfacesFetcher getContainerInterfacesFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            ContainerInterfacesFetcher fetcher = obj.getContainerInterfaces();
            return addFetcher(Constants.CONTAINERINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPOptionsFetcher getDHCPOptionsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            DHCPOptionsFetcher fetcher = obj.getDHCPOptions();
            return addFetcher(Constants.DHCPOPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static DHCPv6OptionsFetcher getDHCPv6OptionsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            DHCPv6OptionsFetcher fetcher = obj.getDHCPv6Options();
            return addFetcher(Constants.DHCPV6OPTIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static EventLogsFetcher getEventLogsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GroupsFetcher getGroupsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            GroupsFetcher fetcher = obj.getGroups();
            return addFetcher(Constants.GROUPS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsFetcher getStatisticsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            StatisticsFetcher fetcher = obj.getStatistics();
            return addFetcher(Constants.STATISTICS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static StatisticsPoliciesFetcher getStatisticsPoliciesFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            StatisticsPoliciesFetcher fetcher = obj.getStatisticsPolicies();
            return addFetcher(Constants.STATISTICSPOLICIES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetsFetcher getSubnetsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            SubnetsFetcher fetcher = obj.getSubnets();
            return addFetcher(Constants.SUBNETS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static TCAsFetcher getTCAsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            TCAsFetcher fetcher = obj.getTCAs();
            return addFetcher(Constants.TCAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMsFetcher getVMsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            VMsFetcher fetcher = obj.getVMs();
            return addFetcher(Constants.VMS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VMInterfacesFetcher getVMInterfacesFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            VMInterfacesFetcher fetcher = obj.getVMInterfaces();
            return addFetcher(Constants.VMINTERFACES_FETCHER, fetcher);
        }

        return null;
    }
    
    public static VPortsFetcher getVPortsFetcherForZoneId(String id) throws RestException {
        Zone obj = getObject(Constants.ZONE, id);
        if (obj == null) {
            obj = getZoneById(id);
        }

        if (obj != null) {
            VPortsFetcher fetcher = obj.getVPorts();
            return addFetcher(Constants.VPORTS_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<Zone> getZonesForFetcherId(String id) throws RestException {
        ZonesFetcher fetcher = getZonesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ZONE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<Zone>();
    }

    public static ZonesFetcher getZonesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ZONES_FETCHER, id);
        if (fetcher != null) {
            return (ZonesFetcher) fetcher;
        }
        if ((fetcher = getZonesFetcherForAggregatedDomainId(id)) != null) {
            return (ZonesFetcher) addFetcher(Constants.ZONES_FETCHER, fetcher);
        }
        
        if ((fetcher = getZonesFetcherForDomainId(id)) != null) {
            return (ZonesFetcher) addFetcher(Constants.ZONES_FETCHER, fetcher);
        }
        
        if ((fetcher = getZonesFetcherForMeId(id)) != null) {
            return (ZonesFetcher) addFetcher(Constants.ZONES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<Zone> getAllZones() throws RestException {
        java.util.List<Zone> allObjs = new ArrayList<Zone>();
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZonesFetcher fetcher = getZonesFetcherForMeId(session.getId());
            java.util.List<Zone> objs = session.fetch(fetcher);
            allObjs.addAll(objs);
        }
        

        return allObjs;
    }

    public static java.util.List<ZonesFetcher> getAllZonesFetchers() throws RestException {
        java.util.List<ZonesFetcher> allObjs = new ArrayList<ZonesFetcher>();
        return allObjs;
    }
    public static ZoneTemplate getZoneTemplateById(String id) {
        for (Session session : SessionManager.getInstance().getSessions()) {
            ZoneTemplate obj = null;
            obj = new ZoneTemplate();
            obj.setId(id);

            try {
                session.fetch(obj);
                return addObject(Constants.ZONETEMPLATE, obj);
            } catch (RestException | HttpClientErrorException ex) {
                // Object not found in session
            }

            
        }

        return null;
    }
    public static EventLogsFetcher getEventLogsFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            EventLogsFetcher fetcher = obj.getEventLogs();
            return addFetcher(Constants.EVENTLOGS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static GlobalMetadatasFetcher getGlobalMetadatasFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            GlobalMetadatasFetcher fetcher = obj.getGlobalMetadatas();
            return addFetcher(Constants.GLOBALMETADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static MetadatasFetcher getMetadatasFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            MetadatasFetcher fetcher = obj.getMetadatas();
            return addFetcher(Constants.METADATAS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static PermissionsFetcher getPermissionsFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            PermissionsFetcher fetcher = obj.getPermissions();
            return addFetcher(Constants.PERMISSIONS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static QOSsFetcher getQOSsFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            QOSsFetcher fetcher = obj.getQOSs();
            return addFetcher(Constants.QOSS_FETCHER, fetcher);
        }

        return null;
    }
    
    public static SubnetTemplatesFetcher getSubnetTemplatesFetcherForZoneTemplateId(String id) throws RestException {
        ZoneTemplate obj = getObject(Constants.ZONETEMPLATE, id);
        if (obj == null) {
            obj = getZoneTemplateById(id);
        }

        if (obj != null) {
            SubnetTemplatesFetcher fetcher = obj.getSubnetTemplates();
            return addFetcher(Constants.SUBNETTEMPLATES_FETCHER, fetcher);
        }

        return null;
    }
    public static java.util.List<ZoneTemplate> getZoneTemplatesForFetcherId(String id) throws RestException {
        ZoneTemplatesFetcher fetcher = getZoneTemplatesFetcherById(id);
        if (fetcher != null) {
            try {
                Session session = fetcher.getSession();
                session.fetch(fetcher);
                return addFetcherObjects(fetcher, Constants.ZONETEMPLATE);
            } catch (RestException | HttpClientErrorException ex) {
                // Error fetching objects
            }
        }

        return new ArrayList<ZoneTemplate>();
    }

    public static ZoneTemplatesFetcher getZoneTemplatesFetcherById(String id) throws RestException {
        BaseFetcher<? extends BaseObjectExtensions> fetcher = getFetcher(Constants.ZONETEMPLATES_FETCHER, id);
        if (fetcher != null) {
            return (ZoneTemplatesFetcher) fetcher;
        }
        if ((fetcher = getZoneTemplatesFetcherForDomainTemplateId(id)) != null) {
            return (ZoneTemplatesFetcher) addFetcher(Constants.ZONETEMPLATES_FETCHER, fetcher);
        }
        return null;
    }

    public static java.util.List<ZoneTemplate> getAllZoneTemplates() throws RestException {
        java.util.List<ZoneTemplate> allObjs = new ArrayList<ZoneTemplate>();

        return allObjs;
    }

    public static java.util.List<ZoneTemplatesFetcher> getAllZoneTemplatesFetchers() throws RestException {
        java.util.List<ZoneTemplatesFetcher> allObjs = new ArrayList<ZoneTemplatesFetcher>();
        return allObjs;
    }
}